### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  id: ActionInfo
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.ActionInfo.ActionFloor
  - TinyLife.Actions.ActionInfo.ActionLocation
  - TinyLife.Actions.ActionInfo.ActionSpot
  - TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  - TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.ActionInfo.CurrentMap
  - TinyLife.Actions.ActionInfo.FromActionInfo(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Single)
  - TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  - TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike,TinyLife.Objects.MapObject)
  - TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Guid,Microsoft.Xna.Framework.Vector2,System.Single)
  - TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.PersonLike)
  - TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  - TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  - TinyLife.Actions.ActionInfo.GetInvolvedLocations
  - TinyLife.Actions.ActionInfo.GetInvolvedObjectIds
  - TinyLife.Actions.ActionInfo.GetInvolvedObject``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean,System.Func{``0,System.Boolean})
  - TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  - TinyLife.Actions.ActionInfo.GoalMap
  - TinyLife.Actions.ActionInfo.Lot
  - TinyLife.Actions.ActionInfo.Person
  - TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  - TinyLife.Actions.ActionInfo.ToFreeActionSpots(TinyLife.Objects.ObjectCategory)
  - TinyLife.Actions.ActionInfo.Validate(TinyLife.Objects.PersonLike)
  langs:
  - csharp
  - vb
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: An action info is a set of information that is required to execute an action
  example: []
  syntax:
    content: >-
      [DataContract]

      public class ActionInfo : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class ActionInfo Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.ActionInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.ActionInfo.Person
  commentId: P:TinyLife.Actions.ActionInfo.Person
  id: Person
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: ActionInfo.Person
  fullName: TinyLife.Actions.ActionInfo.Person
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The <xref href="TinyLife.Actions.ActionInfo.Person" data-throw-if-not-resolved="false"></xref> that is currently executing the action
  example: []
  syntax:
    content: public PersonLike Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.PersonLike
    content.vb: Public Property Person As PersonLike
  overload: TinyLife.Actions.ActionInfo.Person*
- uid: TinyLife.Actions.ActionInfo.ActionLocation
  commentId: F:TinyLife.Actions.ActionInfo.ActionLocation
  id: ActionLocation
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: ActionLocation
  nameWithType: ActionInfo.ActionLocation
  fullName: TinyLife.Actions.ActionInfo.ActionLocation
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The location on the <xref href="TinyLife.Actions.ActionInfo.GoalMap" data-throw-if-not-resolved="false"></xref> that this action should be executed in.

    Note that, for manually executed actions, this is always the world position that the mouse was in.

    For automatically executed actions, this is often the <xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>'s location or an offset based on the <xref href="TinyLife.Actions.ActionInfo.ActionSpot" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Vector2 ActionLocation
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: >-
      <DataMember>

      Public ReadOnly ActionLocation As Vector2
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.ActionInfo.ActionFloor
  commentId: F:TinyLife.Actions.ActionInfo.ActionFloor
  id: ActionFloor
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: ActionFloor
  nameWithType: ActionInfo.ActionFloor
  fullName: TinyLife.Actions.ActionInfo.ActionFloor
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The floor that this action info's <xref href="TinyLife.Actions.ActionInfo.ActionLocation" data-throw-if-not-resolved="false"></xref> is on, on the <xref href="TinyLife.Actions.ActionInfo.GoalMap" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly float ActionFloor
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public ReadOnly ActionFloor As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.ActionInfo.ActionSpot
  commentId: P:TinyLife.Actions.ActionInfo.ActionSpot
  id: ActionSpot
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: ActionSpot
  nameWithType: ActionInfo.ActionSpot
  fullName: TinyLife.Actions.ActionInfo.ActionSpot
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    c
        The <xref href="TinyLife.Actions.ActionInfo.ActionSpot" data-throw-if-not-resolved="false"></xref> that this action is related to. Can be null, even if the <xref href="TinyLife.Actions.ActionInfo.actionObject" data-throw-if-not-resolved="false"></xref> exists.
  example: []
  syntax:
    content: public ActionSpot ActionSpot { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.ActionSpot
    content.vb: Public Property ActionSpot As ActionSpot
  overload: TinyLife.Actions.ActionInfo.ActionSpot*
- uid: TinyLife.Actions.ActionInfo.CurrentMap
  commentId: P:TinyLife.Actions.ActionInfo.CurrentMap
  id: CurrentMap
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: CurrentMap
  nameWithType: ActionInfo.CurrentMap
  fullName: TinyLife.Actions.ActionInfo.CurrentMap
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref> that the action is currently being executed on, which returns the <xref href="TinyLife.Actions.ActionInfo.Person" data-throw-if-not-resolved="false"></xref>'s <xref href="TinyLife.Objects.MapObject.Map" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Map CurrentMap { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Property CurrentMap As Map
  overload: TinyLife.Actions.ActionInfo.CurrentMap*
- uid: TinyLife.Actions.ActionInfo.GoalMap
  commentId: P:TinyLife.Actions.ActionInfo.GoalMap
  id: GoalMap
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GoalMap
  nameWithType: ActionInfo.GoalMap
  fullName: TinyLife.Actions.ActionInfo.GoalMap
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref> that this action's action object, action wall and other key action components are expected to be on. This is essentially the map that the <xref href="TinyLife.Actions.ActionInfo.Person" data-throw-if-not-resolved="false"></xref> should do most of the action on.

    If no explicit goal map is stored, <xref href="TinyLife.Actions.ActionInfo.CurrentMap" data-throw-if-not-resolved="false"></xref> is returned. If the stored goal map is removed from the save, this method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  example: []
  syntax:
    content: public Map GoalMap { get; set; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public Property GoalMap As Map
  overload: TinyLife.Actions.ActionInfo.GoalMap*
- uid: TinyLife.Actions.ActionInfo.Lot
  commentId: P:TinyLife.Actions.ActionInfo.Lot
  id: Lot
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: Lot
  nameWithType: ActionInfo.Lot
  fullName: TinyLife.Actions.ActionInfo.Lot
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The lot that this action's <xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref> is on, or the lot that the <xref href="TinyLife.Actions.ActionInfo.ActionLocation" data-throw-if-not-resolved="false"></xref> is on if there is no action object.
  example: []
  syntax:
    content: public Lot Lot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property Lot As Lot
  overload: TinyLife.Actions.ActionInfo.Lot*
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  id: GetActionObject``1(System.Boolean)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetActionObject<T>(bool)
  nameWithType: ActionInfo.GetActionObject<T>(bool)
  fullName: TinyLife.Actions.ActionInfo.GetActionObject<T>(bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns the object that this action is related to, or null if there is none or the object isn't of the given type, or isn't on the <xref href="TinyLife.Actions.ActionInfo.GoalMap" data-throw-if-not-resolved="false"></xref>.

    If this action is related to a <xref href="TinyLife.Objects.WallLike" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">T</code> is <xref href="TinyLife.World.Wall" data-throw-if-not-resolved="false"></xref>, the wall is returned. Otherwise, the involved <xref href="TinyLife.Objects.MapObject" data-throw-if-not-resolved="false"></xref> is returned, if it matches <code class="typeparamref">T</code>.
  example: []
  syntax:
    content: public T GetActionObject<T>(bool alsoReturnFake = true)
    parameters:
    - id: alsoReturnFake
      type: System.Boolean
    typeParameters:
    - id: T
      description: The type that the action object is expected to be of
    return:
      type: '{T}'
      description: The action object, or null if there is none on the <xref href="TinyLife.Actions.ActionInfo.GoalMap" data-throw-if-not-resolved="false"></xref> or the type does not match
    content.vb: Public Function GetActionObject(Of T)(alsoReturnFake As Boolean = True) As T
  overload: TinyLife.Actions.ActionInfo.GetActionObject*
  nameWithType.vb: ActionInfo.GetActionObject(Of T)(Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetActionObject(Of T)(Boolean)
  name.vb: GetActionObject(Of T)(Boolean)
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  id: AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: AddAuxiliaryLocation(Map, Vector2, float)
  nameWithType: ActionInfo.AddAuxiliaryLocation(Map, Vector2, float)
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Adds an additional location that, along with <xref href="TinyLife.Actions.ActionInfo.ActionLocation" data-throw-if-not-resolved="false"></xref>, is involved in this action.

    Adding an auxiliary location causes <xref href="TinyLife.Actions.ActionInfo.GetInvolvedLocations" data-throw-if-not-resolved="false"></xref> to consider it.
  example: []
  syntax:
    content: public bool AddAuxiliaryLocation(Map map, Vector2 location, float floor)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to add the location on.
    - id: location
      type: Microsoft.Xna.Framework.Vector2
      description: The location to add.
    - id: floor
      type: System.Single
      description: The floor that the location is on.
    return:
      type: System.Boolean
    content.vb: Public Function AddAuxiliaryLocation(map As Map, location As Vector2, floor As Single) As Boolean
  overload: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation*
  nameWithType.vb: ActionInfo.AddAuxiliaryLocation(Map, Vector2, Single)
  fullName.vb: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Single)
  name.vb: AddAuxiliaryLocation(Map, Vector2, Single)
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32)
  id: AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: AddAuxiliaryLocation(Map, Point, int)
  nameWithType: ActionInfo.AddAuxiliaryLocation(Map, Point, int)
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map, Microsoft.Xna.Framework.Point, int)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Adds an additional location that, along with <xref href="TinyLife.Actions.ActionInfo.ActionLocation" data-throw-if-not-resolved="false"></xref>, is involved in this action.

    Adding an auxiliary location causes <xref href="TinyLife.Actions.ActionInfo.GetInvolvedLocations" data-throw-if-not-resolved="false"></xref> to consider it.
  example: []
  syntax:
    content: public bool AddAuxiliaryLocation(Map map, Point location, int floor)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to add the location on.
    - id: location
      type: Microsoft.Xna.Framework.Point
      description: The location to add.
    - id: floor
      type: System.Int32
      description: The floor that the location is on.
    return:
      type: System.Boolean
    content.vb: Public Function AddAuxiliaryLocation(map As Map, location As Point, floor As Integer) As Boolean
  overload: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation*
  nameWithType.vb: ActionInfo.AddAuxiliaryLocation(Map, Point, Integer)
  fullName.vb: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Integer)
  name.vb: AddAuxiliaryLocation(Map, Point, Integer)
- uid: TinyLife.Actions.ActionInfo.GetInvolvedLocations
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedLocations
  id: GetInvolvedLocations
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetInvolvedLocations()
  nameWithType: ActionInfo.GetInvolvedLocations()
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedLocations()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns all of the locations that are involved in this action information, including the <xref href="TinyLife.Actions.ActionInfo.ActionLocation" data-throw-if-not-resolved="false"></xref> and any auxiliary locations added by <xref href="TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IEnumerable<(Map Map, Vector2 Pos, float Floor)> GetInvolvedLocations()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}}
      description: This action's involved locations.
    content.vb: Public Function GetInvolvedLocations() As IEnumerable(Of (Map As Map, Pos As Vector2, Floor As Single))
  overload: TinyLife.Actions.ActionInfo.GetInvolvedLocations*
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  id: AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: AddAuxiliaryObject(MapObject, ActionSpot)
  nameWithType: ActionInfo.AddAuxiliaryObject(MapObject, ActionSpot)
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject, TinyLife.Objects.ActionSpot)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Adds an additional object that, along with the <xref href="TinyLife.Actions.ActionInfo.actionObject" data-throw-if-not-resolved="false"></xref>, is involved in this action.

    Adding an auxiliary object causes <xref href="TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> to consider it, as well as <xref href="TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> to be called for it.

    Auxiliary objects can be on the <xref href="TinyLife.Actions.ActionInfo.GoalMap" data-throw-if-not-resolved="false"></xref> or any of its <xref href="TinyLife.World.Map.Neighborhood" data-throw-if-not-resolved="false"></xref> members.
  example: []
  syntax:
    content: public bool AddAuxiliaryObject(MapObject o, ActionSpot spot = null)
    parameters:
    - id: o
      type: TinyLife.Objects.MapObject
      description: The object to add
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: An optional action spot to store with the object which can be retrieved later using <xref href="TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Boolean
    content.vb: Public Function AddAuxiliaryObject(o As MapObject, spot As ActionSpot = Nothing) As Boolean
  overload: TinyLife.Actions.ActionInfo.AddAuxiliaryObject*
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  id: GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetInvolvedObjects<T>(ObjectCategory, bool, bool)
  nameWithType: ActionInfo.GetInvolvedObjects<T>(ObjectCategory, bool, bool)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObjects<T>(TinyLife.Objects.ObjectCategory, bool, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns a set of (distinct) objects of the given type <code class="typeparamref">T</code> that match the given <code class="paramref">category</code>.

    The objects considered are the <xref href="TinyLife.Actions.ActionInfo.actionObject" data-throw-if-not-resolved="false"></xref>, its <xref href="TinyLife.Objects.Furniture.ParentFurniture" data-throw-if-not-resolved="false"></xref>, its <xref href="TinyLife.Objects.Furniture.GetChildren%60%601" data-throw-if-not-resolved="false"></xref>, the <xref href="TinyLife.Actions.ActionInfo.Person" data-throw-if-not-resolved="false"></xref>'s <xref href="TinyLife.Objects.PersonLike.GetHeldObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref> and the auxiliary objects added using <xref href="TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject%2cTinyLife.Objects.ActionSpot)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IEnumerable<T> GetInvolvedObjects<T>(ObjectCategory category = null, bool includeIndirectly = true, bool allowFake = true)
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
      description: The category that the objects should have. Defaults to Nothing, meaning all categories are considered.
    - id: includeIndirectly
      type: System.Boolean
      description: Whether indirectly involved objects, like the <xref href="TinyLife.Objects.Furniture.ParentFurniture" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.Furniture.GetChildren%60%601" data-throw-if-not-resolved="false"></xref> of furniture, as well as the <xref href="TinyLife.Objects.MapObject.HoldingPerson" data-throw-if-not-resolved="false"></xref> of objects, should be included
    - id: allowFake
      type: System.Boolean
      description: Whether fake items held by players (see <xref href="TinyLife.Objects.PersonLike.SetHeldObject%60%601(TinyLife.Objects.FurnitureType%2cSystem.Int32%5b%5d%2cSystem.Nullable%7bSystem.Guid%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) should also be returned.
    typeParameters:
    - id: T
      description: The type that the objects returned should have
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A set of objects that match the above criteria
    content.vb: Public Function GetInvolvedObjects(Of T)(category As ObjectCategory = Nothing, includeIndirectly As Boolean = True, allowFake As Boolean = True) As IEnumerable(Of T)
  overload: TinyLife.Actions.ActionInfo.GetInvolvedObjects*
  nameWithType.vb: ActionInfo.GetInvolvedObjects(Of T)(ObjectCategory, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetInvolvedObjects(Of T)(TinyLife.Objects.ObjectCategory, Boolean, Boolean)
  name.vb: GetInvolvedObjects(Of T)(ObjectCategory, Boolean, Boolean)
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObject``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean,System.Func{``0,System.Boolean})
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObject``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean,System.Func{``0,System.Boolean})
  id: GetInvolvedObject``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean,System.Func{``0,System.Boolean})
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetInvolvedObject<T>(ObjectCategory, bool, bool, Func<T, bool>)
  nameWithType: ActionInfo.GetInvolvedObject<T>(ObjectCategory, bool, bool, Func<T, bool>)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObject<T>(TinyLife.Objects.ObjectCategory, bool, bool, System.Func<T, bool>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A helper method that returns the first available entry from <xref href="TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> or null if there is none
  example: []
  syntax:
    content: 'public T GetInvolvedObject<T>(ObjectCategory category = null, bool includeIndirectly = true, bool allowFake = true, Func<T, bool> predicate = null) where T : class'
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
      description: The category that the objects should have. Defaults to Nothing, meaning all categories are considered.
    - id: includeIndirectly
      type: System.Boolean
      description: Whether indirectly involved objects, like the <xref href="TinyLife.Objects.Furniture.ParentFurniture" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.Furniture.GetChildren%60%601" data-throw-if-not-resolved="false"></xref> of furniture, as well as the <xref href="TinyLife.Objects.MapObject.HoldingPerson" data-throw-if-not-resolved="false"></xref> of objects, should be included
    - id: allowFake
      type: System.Boolean
      description: Whether fake items held by players (see <xref href="TinyLife.Objects.PersonLike.SetHeldObject%60%601(TinyLife.Objects.FurnitureType%2cSystem.Int32%5b%5d%2cSystem.Nullable%7bSystem.Guid%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) should also be returned.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: A predicate to match against objects. If this is non-null, the first object that matches this predicate is returned.
    typeParameters:
    - id: T
      description: The type that the objects returned should have
    return:
      type: '{T}'
      description: The first object that matches the criteria described in <xref href="TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function GetInvolvedObject(Of T As Class)(category As ObjectCategory = Nothing, includeIndirectly As Boolean = True, allowFake As Boolean = True, predicate As Func(Of T, Boolean) = Nothing) As T
  overload: TinyLife.Actions.ActionInfo.GetInvolvedObject*
  nameWithType.vb: ActionInfo.GetInvolvedObject(Of T)(ObjectCategory, Boolean, Boolean, Func(Of T, Boolean))
  fullName.vb: TinyLife.Actions.ActionInfo.GetInvolvedObject(Of T)(TinyLife.Objects.ObjectCategory, Boolean, Boolean, System.Func(Of T, Boolean))
  name.vb: GetInvolvedObject(Of T)(ObjectCategory, Boolean, Boolean, Func(Of T, Boolean))
- uid: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  id: GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetInvolvedActionSpot(Furniture)
  nameWithType: ActionInfo.GetInvolvedActionSpot(Furniture)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns the involved action spot for the given involved <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref>.

    If the furniture passed is the <xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>, the <xref href="TinyLife.Actions.ActionInfo.ActionSpot" data-throw-if-not-resolved="false"></xref> will be returned.

    Otherwise, the action spot of the involved furniture stored using <xref href="TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject%2cTinyLife.Objects.ActionSpot)" data-throw-if-not-resolved="false"></xref> is returned.
  example: []
  syntax:
    content: public ActionSpot GetInvolvedActionSpot(Furniture involved)
    parameters:
    - id: involved
      type: TinyLife.Objects.Furniture
      description: The involved object whose action spot to return
    return:
      type: TinyLife.Objects.ActionSpot
      description: The involved action spot, or null if there is none
    content.vb: Public Function GetInvolvedActionSpot(involved As Furniture) As ActionSpot
  overload: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot*
- uid: TinyLife.Actions.ActionInfo.ToFreeActionSpots(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Actions.ActionInfo.ToFreeActionSpots(TinyLife.Objects.ObjectCategory)
  id: ToFreeActionSpots(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: ToFreeActionSpots(ObjectCategory)
  nameWithType: ActionInfo.ToFreeActionSpots(ObjectCategory)
  fullName: TinyLife.Actions.ActionInfo.ToFreeActionSpots(TinyLife.Objects.ObjectCategory)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Converts this action info into a set of free action spots that the <xref href="TinyLife.Actions.ActionInfo.Person" data-throw-if-not-resolved="false"></xref> can interact with, and returns the results.

    Depending on the <xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>, this method will return <xref href="TinyLife.Objects.MapObject.GetFreeActionSpotInfos(TinyLife.Objects.PersonLike%2cTinyLife.Objects.ObjectCategory)" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map%2cTinyLife.Objects.PersonLike)" data-throw-if-not-resolved="false"></xref>, or, for the <xref href="TinyLife.Objects.ObjectCategory.Ground" data-throw-if-not-resolved="false"></xref><code class="paramref">context</code>, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/this">this</a> action info is returned.
  example: []
  syntax:
    content: public IEnumerable<ActionInfo> ToFreeActionSpots(ObjectCategory context = null)
    parameters:
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The context for which to return free action spots, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to return action spots for any contexts.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
      description: The action infos.
    content.vb: Public Function ToFreeActionSpots(context As ObjectCategory = Nothing) As IEnumerable(Of ActionInfo)
  overload: TinyLife.Actions.ActionInfo.ToFreeActionSpots*
- uid: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  id: ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: ToFreeActionSpot(ObjectCategory)
  nameWithType: ActionInfo.ToFreeActionSpot(ObjectCategory)
  fullName: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Converts this action info into a set of free action spots that the <xref href="TinyLife.Actions.ActionInfo.Person" data-throw-if-not-resolved="false"></xref> can interact with, and returns the first result, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if there are none.

    Depending on the <xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>, this method will return the first entry of <xref href="TinyLife.Objects.MapObject.GetFreeActionSpotInfos(TinyLife.Objects.PersonLike%2cTinyLife.Objects.ObjectCategory)" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map%2cTinyLife.Objects.PersonLike)" data-throw-if-not-resolved="false"></xref>, or, for the <xref href="TinyLife.Objects.ObjectCategory.Ground" data-throw-if-not-resolved="false"></xref><code class="paramref">context</code>, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/this">this</a> action info is returned.
  example: []
  syntax:
    content: public ActionInfo ToFreeActionSpot(ObjectCategory context = null)
    parameters:
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The context for which to return free action spot, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to return an action spot for any contexts.
    return:
      type: TinyLife.Actions.ActionInfo
      description: The action info, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if there are none.
    content.vb: Public Function ToFreeActionSpot(context As ObjectCategory = Nothing) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.ToFreeActionSpot*
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjectIds
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjectIds
  id: GetInvolvedObjectIds
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetInvolvedObjectIds()
  nameWithType: ActionInfo.GetInvolvedObjectIds()
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObjectIds()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns a collection of all of the object <xref href="TinyLife.Objects.MapObject.Id" data-throw-if-not-resolved="false"></xref> values involved in this action info. Possible return values include the action object (<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>), as well as auxiliary objects (<xref href="TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject%2cTinyLife.Objects.ActionSpot)" data-throw-if-not-resolved="false"></xref>).
  example: []
  syntax:
    content: public IEnumerable<Guid> GetInvolvedObjectIds()
    return:
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The involved object ids.
    content.vb: Public Function GetInvolvedObjectIds() As IEnumerable(Of Guid)
  overload: TinyLife.Actions.ActionInfo.GetInvolvedObjectIds*
- uid: TinyLife.Actions.ActionInfo.Validate(TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.Actions.ActionInfo.Validate(TinyLife.Objects.PersonLike)
  id: Validate(TinyLife.Objects.PersonLike)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: Validate(PersonLike)
  nameWithType: ActionInfo.Validate(PersonLike)
  fullName: TinyLife.Actions.ActionInfo.Validate(TinyLife.Objects.PersonLike)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Validates this action info.

    This method should only be called when this action info is read from disk.
  example: []
  syntax:
    content: public bool Validate(PersonLike person)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that this action info belongs to
    return:
      type: System.Boolean
    content.vb: Public Function Validate(person As PersonLike) As Boolean
  overload: TinyLife.Actions.ActionInfo.Validate*
- uid: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  id: FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromLocation(PersonLike, Map, Vector2, float)
  nameWithType: ActionInfo.FromLocation(PersonLike, Map, Vector2, float)
  fullName: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns a new <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> based on the given location (and no objects)
  example: []
  syntax:
    content: public static ActionInfo FromLocation(PersonLike person, Map map, Vector2 location, float floor)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that this action info should be related to
    - id: map
      type: TinyLife.World.Map
      description: The <xref href="TinyLife.Actions.ActionInfo.GoalMap" data-throw-if-not-resolved="false"></xref> that this action info should have.
    - id: location
      type: Microsoft.Xna.Framework.Vector2
      description: The location that this action info should have
    - id: floor
      type: System.Single
      description: The floor the location is on.
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given data
    content.vb: Public Shared Function FromLocation(person As PersonLike, map As Map, location As Vector2, floor As Single) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromLocation*
  nameWithType.vb: ActionInfo.FromLocation(PersonLike, Map, Vector2, Single)
  fullName.vb: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Single)
  name.vb: FromLocation(PersonLike, Map, Vector2, Single)
- uid: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Single)
  commentId: M:TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Single)
  id: FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Single)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromLocation(PersonLike, Map, Point, float)
  nameWithType: ActionInfo.FromLocation(PersonLike, Map, Point, float)
  fullName: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Point, float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns a new <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> based on the given location (and no objects).

    This is a helper method that calls <xref href="TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike%2cTinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> with the center of the given <code class="paramref">location</code>.
  example: []
  syntax:
    content: public static ActionInfo FromLocation(PersonLike person, Map map, Point location, float floor)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that this action info should be related to
    - id: map
      type: TinyLife.World.Map
      description: The <xref href="TinyLife.Actions.ActionInfo.GoalMap" data-throw-if-not-resolved="false"></xref> that this action info should have.
    - id: location
      type: Microsoft.Xna.Framework.Point
      description: The location that this action info should have
    - id: floor
      type: System.Single
      description: The floor the location is on.
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given data
    content.vb: Public Shared Function FromLocation(person As PersonLike, map As Map, location As Point, floor As Single) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromLocation*
  nameWithType.vb: ActionInfo.FromLocation(PersonLike, Map, Point, Single)
  fullName.vb: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Point, Single)
  name.vb: FromLocation(PersonLike, Map, Point, Single)
- uid: TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Guid,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Guid,Microsoft.Xna.Framework.Vector2,System.Single)
  id: FromObjectGeneric(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Guid,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromObjectGeneric(PersonLike, Map, Guid, Vector2, float)
  nameWithType: ActionInfo.FromObjectGeneric(PersonLike, Map, Guid, Vector2, float)
  fullName: TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike, TinyLife.World.Map, System.Guid, Microsoft.Xna.Framework.Vector2, float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns a new <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> based on the given object's <xref href="TinyLife.Objects.MapObject.Id" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.MapObject.Position" data-throw-if-not-resolved="false"></xref>, but no object spot.
  example: []
  syntax:
    content: public static ActionInfo FromObjectGeneric(PersonLike person, Map map, Guid objectId, Vector2 objectPosition, float objectFloor)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that this action info should be related to.
    - id: map
      type: TinyLife.World.Map
      description: The <xref href="TinyLife.Actions.ActionInfo.GoalMap" data-throw-if-not-resolved="false"></xref> that this action info should have.
    - id: objectId
      type: System.Guid
      description: The <xref href="TinyLife.Objects.MapObject.Id" data-throw-if-not-resolved="false"></xref> of the object that this action info should have.
    - id: objectPosition
      type: Microsoft.Xna.Framework.Vector2
      description: The <xref href="TinyLife.Objects.MapObject.Position" data-throw-if-not-resolved="false"></xref> of the object that this action info should have.
    - id: objectFloor
      type: System.Single
      description: The floor the object is on.
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given data.
    content.vb: Public Shared Function FromObjectGeneric(person As PersonLike, map As Map, objectId As Guid, objectPosition As Vector2, objectFloor As Single) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromObjectGeneric*
  nameWithType.vb: ActionInfo.FromObjectGeneric(PersonLike, Map, Guid, Vector2, Single)
  fullName.vb: TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike, TinyLife.World.Map, System.Guid, Microsoft.Xna.Framework.Vector2, Single)
  name.vb: FromObjectGeneric(PersonLike, Map, Guid, Vector2, Single)
- uid: TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike,TinyLife.Objects.MapObject)
  commentId: M:TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike,TinyLife.Objects.MapObject)
  id: FromObjectGeneric(TinyLife.Objects.PersonLike,TinyLife.Objects.MapObject)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromObjectGeneric(PersonLike, MapObject)
  nameWithType: ActionInfo.FromObjectGeneric(PersonLike, MapObject)
  fullName: TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.PersonLike, TinyLife.Objects.MapObject)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns a new <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> based on the given object, but no object spot
  example: []
  syntax:
    content: public static ActionInfo FromObjectGeneric(PersonLike person, MapObject obj)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that this action info should be related to
    - id: obj
      type: TinyLife.Objects.MapObject
      description: The object that this action info should have
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given data
    content.vb: Public Shared Function FromObjectGeneric(person As PersonLike, obj As MapObject) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromObjectGeneric*
- uid: TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.PersonLike)
  id: FromSelf(TinyLife.Objects.PersonLike)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromSelf(PersonLike)
  nameWithType: ActionInfo.FromSelf(PersonLike)
  fullName: TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.PersonLike)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns a new <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> based on the given person, with the action object also being the person
  example: []
  syntax:
    content: public static ActionInfo FromSelf(PersonLike person)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person to create an action info from
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info based on the person
    content.vb: Public Shared Function FromSelf(person As PersonLike) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromSelf*
- uid: TinyLife.Actions.ActionInfo.FromActionInfo(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.FromActionInfo(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionInfo,System.Boolean)
  id: FromActionInfo(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromActionInfo(PersonLike, ActionInfo, bool)
  nameWithType: ActionInfo.FromActionInfo(PersonLike, ActionInfo, bool)
  fullName: TinyLife.Actions.ActionInfo.FromActionInfo(TinyLife.Objects.PersonLike, TinyLife.Actions.ActionInfo, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns a new <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> based on the given person, as well as the given original <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>, from which all data except the <xref href="TinyLife.Actions.ActionInfo.Person" data-throw-if-not-resolved="false"></xref> is copied.
  example: []
  syntax:
    content: public static ActionInfo FromActionInfo(PersonLike person, ActionInfo original, bool addOriginalPersonAsAuxiliary = false)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that this action info should be related to.
    - id: original
      type: TinyLife.Actions.ActionInfo
      description: The original action info to copy data from.
    - id: addOriginalPersonAsAuxiliary
      type: System.Boolean
      description: Whether the <code class="paramref">original</code>'s <xref href="TinyLife.Actions.ActionInfo.Person" data-throw-if-not-resolved="false"></xref> should be added as an auxiliary object to the returned <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given data.
    content.vb: Public Shared Function FromActionInfo(person As PersonLike, original As ActionInfo, addOriginalPersonAsAuxiliary As Boolean = False) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromActionInfo*
  nameWithType.vb: ActionInfo.FromActionInfo(PersonLike, ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.FromActionInfo(TinyLife.Objects.PersonLike, TinyLife.Actions.ActionInfo, Boolean)
  name.vb: FromActionInfo(PersonLike, ActionInfo, Boolean)
references:
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Actions.ActionInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<ActionInfo>(ActionInfo)
  nameWithType: Extensions.JsonCopy<ActionInfo>(ActionInfo)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionInfo>(TinyLife.Actions.ActionInfo)
  nameWithType.vb: Extensions.JsonCopy(Of ActionInfo)(ActionInfo)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionInfo)(TinyLife.Actions.ActionInfo)
  name.vb: JsonCopy(Of ActionInfo)(ActionInfo)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.ActionInfo)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.ActionInfo)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.Actions.ActionInfo.Person
  commentId: P:TinyLife.Actions.ActionInfo.Person
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_Person
  name: Person
  nameWithType: ActionInfo.Person
  fullName: TinyLife.Actions.ActionInfo.Person
- uid: TinyLife.Actions.ActionInfo.Person*
  commentId: Overload:TinyLife.Actions.ActionInfo.Person
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_Person
  name: Person
  nameWithType: ActionInfo.Person
  fullName: TinyLife.Actions.ActionInfo.Person
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: TinyLife.Actions.ActionInfo.GoalMap
  commentId: P:TinyLife.Actions.ActionInfo.GoalMap
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GoalMap
  name: GoalMap
  nameWithType: ActionInfo.GoalMap
  fullName: TinyLife.Actions.ActionInfo.GoalMap
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  isExternal: true
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  name: GetActionObject<T>(bool)
  nameWithType: ActionInfo.GetActionObject<T>(bool)
  fullName: TinyLife.Actions.ActionInfo.GetActionObject<T>(bool)
  nameWithType.vb: ActionInfo.GetActionObject(Of T)(Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetActionObject(Of T)(Boolean)
  name.vb: GetActionObject(Of T)(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionInfo.ActionSpot
  commentId: P:TinyLife.Actions.ActionInfo.ActionSpot
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_ActionSpot
  name: ActionSpot
  nameWithType: ActionInfo.ActionSpot
  fullName: TinyLife.Actions.ActionInfo.ActionSpot
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Actions.ActionInfo.ActionLocation
  commentId: F:TinyLife.Actions.ActionInfo.ActionLocation
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_ActionLocation
  name: ActionLocation
  nameWithType: ActionInfo.ActionLocation
  fullName: TinyLife.Actions.ActionInfo.ActionLocation
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Actions.ActionInfo.actionObject
  commentId: F:TinyLife.Actions.ActionInfo.actionObject
  name: actionObject
  nameWithType: ActionInfo.actionObject
  fullName: TinyLife.Actions.ActionInfo.actionObject
- uid: TinyLife.Actions.ActionInfo.ActionSpot*
  commentId: Overload:TinyLife.Actions.ActionInfo.ActionSpot
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_ActionSpot
  name: ActionSpot
  nameWithType: ActionInfo.ActionSpot
  fullName: TinyLife.Actions.ActionInfo.ActionSpot
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  href: TinyLife.Objects.ActionSpot.html
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.Objects.MapObject.Map
  commentId: P:TinyLife.Objects.MapObject.Map
  parent: TinyLife.Objects.MapObject
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_Map
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
- uid: TinyLife.Actions.ActionInfo.CurrentMap*
  commentId: Overload:TinyLife.Actions.ActionInfo.CurrentMap
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_CurrentMap
  name: CurrentMap
  nameWithType: ActionInfo.CurrentMap
  fullName: TinyLife.Actions.ActionInfo.CurrentMap
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.MapObject.html
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Actions.ActionInfo.CurrentMap
  commentId: P:TinyLife.Actions.ActionInfo.CurrentMap
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_CurrentMap
  name: CurrentMap
  nameWithType: ActionInfo.CurrentMap
  fullName: TinyLife.Actions.ActionInfo.CurrentMap
- uid: TinyLife.Actions.ActionInfo.GoalMap*
  commentId: Overload:TinyLife.Actions.ActionInfo.GoalMap
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GoalMap
  name: GoalMap
  nameWithType: ActionInfo.GoalMap
  fullName: TinyLife.Actions.ActionInfo.GoalMap
- uid: TinyLife.Actions.ActionInfo.Lot*
  commentId: Overload:TinyLife.Actions.ActionInfo.Lot
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_Lot
  name: Lot
  nameWithType: ActionInfo.Lot
  fullName: TinyLife.Actions.ActionInfo.Lot
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  href: TinyLife.World.Lot.html
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.WallLike.html
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  href: TinyLife.World.Wall.html
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Actions.ActionInfo.GetActionObject*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetActionObject
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  name: GetActionObject
  nameWithType: ActionInfo.GetActionObject
  fullName: TinyLife.Actions.ActionInfo.GetActionObject
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Actions.ActionInfo.GetInvolvedLocations
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedLocations
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedLocations
  name: GetInvolvedLocations()
  nameWithType: ActionInfo.GetInvolvedLocations()
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedLocations()
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetInvolvedLocations
    name: GetInvolvedLocations
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedLocations
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetInvolvedLocations
    name: GetInvolvedLocations
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedLocations
  - name: (
  - name: )
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation*
  commentId: Overload:TinyLife.Actions.ActionInfo.AddAuxiliaryLocation
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_AddAuxiliaryLocation_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_
  name: AddAuxiliaryLocation
  nameWithType: ActionInfo.AddAuxiliaryLocation
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  isExternal: true
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_AddAuxiliaryLocation_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_
  name: AddAuxiliaryLocation(Map, Vector2, float)
  nameWithType: ActionInfo.AddAuxiliaryLocation(Map, Vector2, float)
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, float)
  nameWithType.vb: ActionInfo.AddAuxiliaryLocation(Map, Vector2, Single)
  fullName.vb: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Single)
  name.vb: AddAuxiliaryLocation(Map, Vector2, Single)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
    name: AddAuxiliaryLocation
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_AddAuxiliaryLocation_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.AddAuxiliaryLocation(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
    name: AddAuxiliaryLocation
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_AddAuxiliaryLocation_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.ActionInfo.GetInvolvedLocations*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetInvolvedLocations
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedLocations
  name: GetInvolvedLocations
  nameWithType: ActionInfo.GetInvolvedLocations
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedLocations
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Map Map, Vector2 Pos, float Floor)>
  nameWithType: IEnumerable<(Map Map, Vector2 Pos, float Floor)>
  fullName: System.Collections.Generic.IEnumerable<(TinyLife.World.Map Map, Microsoft.Xna.Framework.Vector2 Pos, float Floor)>
  nameWithType.vb: IEnumerable(Of (Map As Map, Pos As Vector2, Floor As Single))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Map As TinyLife.World.Map, Pos As Microsoft.Xna.Framework.Vector2, Floor As Single))
  name.vb: IEnumerable(Of (Map As Map, Pos As Vector2, Floor As Single))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}.Map
    name: Map
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.map,microsoft.xna.framework.vector2,system.single-.map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}.Pos
    name: Pos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.map,microsoft.xna.framework.vector2,system.single-.pos
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}.Floor
    name: Floor
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.map,microsoft.xna.framework.vector2,system.single-.floor
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}.Map
    name: Map
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.map,microsoft.xna.framework.vector2,system.single-.map
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}.Pos
    name: Pos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.map,microsoft.xna.framework.vector2,system.single-.pos
  - name: " "
  - name: As
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single}.Floor
    name: Floor
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.map,microsoft.xna.framework.vector2,system.single-.floor
  - name: " "
  - name: As
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  isExternal: true
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedObjects__1_TinyLife_Objects_ObjectCategory_System_Boolean_System_Boolean_
  name: GetInvolvedObjects<T>(ObjectCategory, bool, bool)
  nameWithType: ActionInfo.GetInvolvedObjects<T>(ObjectCategory, bool, bool)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObjects<T>(TinyLife.Objects.ObjectCategory, bool, bool)
  nameWithType.vb: ActionInfo.GetInvolvedObjects(Of T)(ObjectCategory, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetInvolvedObjects(Of T)(TinyLife.Objects.ObjectCategory, Boolean, Boolean)
  name.vb: GetInvolvedObjects(Of T)(ObjectCategory, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
    name: GetInvolvedObjects
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedObjects__1_TinyLife_Objects_ObjectCategory_System_Boolean_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
    name: GetInvolvedObjects
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedObjects__1_TinyLife_Objects_ObjectCategory_System_Boolean_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_ActionUpdate_TinyLife_Actions_Action_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_System_Boolean_
  name: ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, float, bool)
  nameWithType.vb: MapObject.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single, Boolean)
  name.vb: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_ActionUpdate_TinyLife_Actions_Action_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_ActionUpdate_TinyLife_Actions_Action_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.World.Map.Neighborhood
  commentId: P:TinyLife.World.Map.Neighborhood
  href: TinyLife.World.Map.html#TinyLife_World_Map_Neighborhood
  name: Neighborhood
  nameWithType: Map.Neighborhood
  fullName: TinyLife.World.Map.Neighborhood
- uid: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedActionSpot_TinyLife_Objects_Furniture_
  name: GetInvolvedActionSpot(Furniture)
  nameWithType: ActionInfo.GetInvolvedActionSpot(Furniture)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
    name: GetInvolvedActionSpot
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedActionSpot_TinyLife_Objects_Furniture_
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
    name: GetInvolvedActionSpot
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedActionSpot_TinyLife_Objects_Furniture_
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: )
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryObject*
  commentId: Overload:TinyLife.Actions.ActionInfo.AddAuxiliaryObject
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_AddAuxiliaryObject_TinyLife_Objects_MapObject_TinyLife_Objects_ActionSpot_
  name: AddAuxiliaryObject
  nameWithType: ActionInfo.AddAuxiliaryObject
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryObject
- uid: TinyLife.Objects.Furniture.ParentFurniture
  commentId: P:TinyLife.Objects.Furniture.ParentFurniture
  parent: TinyLife.Objects.Furniture
  href: TinyLife.Objects.Furniture.html#TinyLife_Objects_Furniture_ParentFurniture
  name: ParentFurniture
  nameWithType: Furniture.ParentFurniture
  fullName: TinyLife.Objects.Furniture.ParentFurniture
- uid: TinyLife.Objects.Furniture.GetChildren``1
  commentId: M:TinyLife.Objects.Furniture.GetChildren``1
  parent: TinyLife.Objects.Furniture
  href: TinyLife.Objects.Furniture.html#TinyLife_Objects_Furniture_GetChildren__1
  name: GetChildren<T>()
  nameWithType: Furniture.GetChildren<T>()
  fullName: TinyLife.Objects.Furniture.GetChildren<T>()
  nameWithType.vb: Furniture.GetChildren(Of T)()
  fullName.vb: TinyLife.Objects.Furniture.GetChildren(Of T)()
  name.vb: GetChildren(Of T)()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren
    href: TinyLife.Objects.Furniture.html#TinyLife_Objects_Furniture_GetChildren__1
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren
    href: TinyLife.Objects.Furniture.html#TinyLife_Objects_Furniture_GetChildren__1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: TinyLife.Objects.PersonLike.GetHeldObject``1(System.Boolean)
  commentId: M:TinyLife.Objects.PersonLike.GetHeldObject``1(System.Boolean)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetHeldObject__1_System_Boolean_
  name: GetHeldObject<T>(bool)
  nameWithType: PersonLike.GetHeldObject<T>(bool)
  fullName: TinyLife.Objects.PersonLike.GetHeldObject<T>(bool)
  nameWithType.vb: PersonLike.GetHeldObject(Of T)(Boolean)
  fullName.vb: TinyLife.Objects.PersonLike.GetHeldObject(Of T)(Boolean)
  name.vb: GetHeldObject(Of T)(Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.GetHeldObject``1(System.Boolean)
    name: GetHeldObject
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetHeldObject__1_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.GetHeldObject``1(System.Boolean)
    name: GetHeldObject
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetHeldObject__1_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_AddAuxiliaryObject_TinyLife_Objects_MapObject_TinyLife_Objects_ActionSpot_
  name: AddAuxiliaryObject(MapObject, ActionSpot)
  nameWithType: ActionInfo.AddAuxiliaryObject(MapObject, ActionSpot)
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject, TinyLife.Objects.ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
    name: AddAuxiliaryObject
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_AddAuxiliaryObject_TinyLife_Objects_MapObject_TinyLife_Objects_ActionSpot_
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
    name: AddAuxiliaryObject
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_AddAuxiliaryObject_TinyLife_Objects_MapObject_TinyLife_Objects_ActionSpot_
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: )
- uid: TinyLife.Objects.MapObject.HoldingPerson
  commentId: P:TinyLife.Objects.MapObject.HoldingPerson
  parent: TinyLife.Objects.MapObject
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_HoldingPerson
  name: HoldingPerson
  nameWithType: MapObject.HoldingPerson
  fullName: TinyLife.Objects.MapObject.HoldingPerson
- uid: TinyLife.Objects.PersonLike.SetHeldObject``1(TinyLife.Objects.FurnitureType,System.Int32[],System.Nullable{System.Guid},System.Boolean)
  commentId: M:TinyLife.Objects.PersonLike.SetHeldObject``1(TinyLife.Objects.FurnitureType,System.Int32[],System.Nullable{System.Guid},System.Boolean)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_SetHeldObject__1_TinyLife_Objects_FurnitureType_System_Int32___System_Nullable_System_Guid__System_Boolean_
  name: SetHeldObject<T>(FurnitureType, int[], Guid?, bool)
  nameWithType: PersonLike.SetHeldObject<T>(FurnitureType, int[], Guid?, bool)
  fullName: TinyLife.Objects.PersonLike.SetHeldObject<T>(TinyLife.Objects.FurnitureType, int[], System.Guid?, bool)
  nameWithType.vb: PersonLike.SetHeldObject(Of T)(FurnitureType, Integer(), Guid?, Boolean)
  fullName.vb: TinyLife.Objects.PersonLike.SetHeldObject(Of T)(TinyLife.Objects.FurnitureType, Integer(), System.Guid?, Boolean)
  name.vb: SetHeldObject(Of T)(FurnitureType, Integer(), Guid?, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.SetHeldObject``1(TinyLife.Objects.FurnitureType,System.Int32[],System.Nullable{System.Guid},System.Boolean)
    name: SetHeldObject
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_SetHeldObject__1_TinyLife_Objects_FurnitureType_System_Int32___System_Nullable_System_Guid__System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    href: TinyLife.Objects.FurnitureType.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.SetHeldObject``1(TinyLife.Objects.FurnitureType,System.Int32[],System.Nullable{System.Guid},System.Boolean)
    name: SetHeldObject
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_SetHeldObject__1_TinyLife_Objects_FurnitureType_System_Int32___System_Nullable_System_Guid__System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    href: TinyLife.Objects.FurnitureType.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetInvolvedObjects
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedObjects__1_TinyLife_Objects_ObjectCategory_System_Boolean_System_Boolean_
  name: GetInvolvedObjects
  nameWithType: ActionInfo.GetInvolvedObjects
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObjects
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectCategory.html
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  href: TinyLife.Objects.Furniture.html
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObject*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetInvolvedObject
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedObject__1_TinyLife_Objects_ObjectCategory_System_Boolean_System_Boolean_System_Func___0_System_Boolean__
  name: GetInvolvedObject
  nameWithType: ActionInfo.GetInvolvedObject
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObject
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetInvolvedActionSpot
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedActionSpot_TinyLife_Objects_Furniture_
  name: GetInvolvedActionSpot
  nameWithType: ActionInfo.GetInvolvedActionSpot
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot
- uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfos(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetFreeActionSpotInfos(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_GetFreeActionSpotInfos_TinyLife_Objects_PersonLike_TinyLife_Objects_ObjectCategory_
  name: GetFreeActionSpotInfos(PersonLike, ObjectCategory)
  nameWithType: MapObject.GetFreeActionSpotInfos(PersonLike, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfos(TinyLife.Objects.PersonLike, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfos(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfos
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_GetFreeActionSpotInfos_TinyLife_Objects_PersonLike_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfos(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfos
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_GetFreeActionSpotInfos_TinyLife_Objects_PersonLike_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
- uid: TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map,TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map,TinyLife.Objects.PersonLike)
  parent: TinyLife.Objects.WallLike
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetFreeActionSpotInfos_TinyLife_World_Map_TinyLife_Objects_PersonLike_
  name: GetFreeActionSpotInfos(Map, PersonLike)
  nameWithType: WallLike.GetFreeActionSpotInfos(Map, PersonLike)
  fullName: TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map, TinyLife.Objects.PersonLike)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map,TinyLife.Objects.PersonLike)
    name: GetFreeActionSpotInfos
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetFreeActionSpotInfos_TinyLife_World_Map_TinyLife_Objects_PersonLike_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map,TinyLife.Objects.PersonLike)
    name: GetFreeActionSpotInfos
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetFreeActionSpotInfos_TinyLife_World_Map_TinyLife_Objects_PersonLike_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
- uid: TinyLife.Objects.ObjectCategory.Ground
  commentId: F:TinyLife.Objects.ObjectCategory.Ground
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Ground
  name: Ground
  nameWithType: ObjectCategory.Ground
  fullName: TinyLife.Objects.ObjectCategory.Ground
- uid: TinyLife.Actions.ActionInfo.ToFreeActionSpots*
  commentId: Overload:TinyLife.Actions.ActionInfo.ToFreeActionSpots
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_ToFreeActionSpots_TinyLife_Objects_ObjectCategory_
  name: ToFreeActionSpots
  nameWithType: ActionInfo.ToFreeActionSpots
  fullName: TinyLife.Actions.ActionInfo.ToFreeActionSpots
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ActionInfo>
  nameWithType: IEnumerable<ActionInfo>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionInfo>
  nameWithType.vb: IEnumerable(Of ActionInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionInfo)
  name.vb: IEnumerable(Of ActionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
- uid: TinyLife.Actions.ActionInfo.ToFreeActionSpot*
  commentId: Overload:TinyLife.Actions.ActionInfo.ToFreeActionSpot
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_ToFreeActionSpot_TinyLife_Objects_ObjectCategory_
  name: ToFreeActionSpot
  nameWithType: ActionInfo.ToFreeActionSpot
  fullName: TinyLife.Actions.ActionInfo.ToFreeActionSpot
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionInfo.html
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  parent: TinyLife.Objects.MapObject
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_Id
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjectIds*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetInvolvedObjectIds
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetInvolvedObjectIds
  name: GetInvolvedObjectIds
  nameWithType: ActionInfo.GetInvolvedObjectIds
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObjectIds
- uid: System.Collections.Generic.IEnumerable{System.Guid}
  commentId: T:System.Collections.Generic.IEnumerable{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Guid>
  nameWithType: IEnumerable<Guid>
  fullName: System.Collections.Generic.IEnumerable<System.Guid>
  nameWithType.vb: IEnumerable(Of Guid)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Guid)
  name.vb: IEnumerable(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
- uid: TinyLife.Actions.ActionInfo.Validate*
  commentId: Overload:TinyLife.Actions.ActionInfo.Validate
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_Validate_TinyLife_Objects_PersonLike_
  name: Validate
  nameWithType: ActionInfo.Validate
  fullName: TinyLife.Actions.ActionInfo.Validate
- uid: TinyLife.Actions.ActionInfo.FromLocation*
  commentId: Overload:TinyLife.Actions.ActionInfo.FromLocation
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_FromLocation_TinyLife_Objects_PersonLike_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_
  name: FromLocation
  nameWithType: ActionInfo.FromLocation
  fullName: TinyLife.Actions.ActionInfo.FromLocation
- uid: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
  isExternal: true
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_FromLocation_TinyLife_Objects_PersonLike_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_
  name: FromLocation(PersonLike, Map, Vector2, float)
  nameWithType: ActionInfo.FromLocation(PersonLike, Map, Vector2, float)
  fullName: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, float)
  nameWithType.vb: ActionInfo.FromLocation(PersonLike, Map, Vector2, Single)
  fullName.vb: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Single)
  name.vb: FromLocation(PersonLike, Map, Vector2, Single)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
    name: FromLocation
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_FromLocation_TinyLife_Objects_PersonLike_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.PersonLike,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single)
    name: FromLocation
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_FromLocation_TinyLife_Objects_PersonLike_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  parent: TinyLife.Objects.MapObject
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_Position
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: TinyLife.Actions.ActionInfo.FromObjectGeneric*
  commentId: Overload:TinyLife.Actions.ActionInfo.FromObjectGeneric
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_FromObjectGeneric_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Guid_Microsoft_Xna_Framework_Vector2_System_Single_
  name: FromObjectGeneric
  nameWithType: ActionInfo.FromObjectGeneric
  fullName: TinyLife.Actions.ActionInfo.FromObjectGeneric
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Actions.ActionInfo.FromSelf*
  commentId: Overload:TinyLife.Actions.ActionInfo.FromSelf
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_FromSelf_TinyLife_Objects_PersonLike_
  name: FromSelf
  nameWithType: ActionInfo.FromSelf
  fullName: TinyLife.Actions.ActionInfo.FromSelf
- uid: TinyLife.Actions.ActionInfo.FromActionInfo*
  commentId: Overload:TinyLife.Actions.ActionInfo.FromActionInfo
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_FromActionInfo_TinyLife_Objects_PersonLike_TinyLife_Actions_ActionInfo_System_Boolean_
  name: FromActionInfo
  nameWithType: ActionInfo.FromActionInfo
  fullName: TinyLife.Actions.ActionInfo.FromActionInfo
