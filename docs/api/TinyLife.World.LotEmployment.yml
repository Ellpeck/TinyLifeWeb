### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  id: LotEmployment
  parent: TinyLife.World
  children:
  - TinyLife.World.LotEmployment.#ctor(System.String,MLEM.Textures.TextureRegion,System.ValueTuple{System.Int32,System.Int32},System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}},System.Boolean,System.Int32)
  - TinyLife.World.LotEmployment.ActionPriorityMultiplier
  - TinyLife.World.LotEmployment.Actions
  - TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,TinyLife.Utilities.AppliedMigrations,System.Boolean,System.Boolean)
  - TinyLife.World.LotEmployment.AiPriorityMultiplier
  - TinyLife.World.LotEmployment.Babysitter
  - TinyLife.World.LotEmployment.Barista
  - TinyLife.World.LotEmployment.Bartender
  - TinyLife.World.LotEmployment.ForHireOnce
  - TinyLife.World.LotEmployment.GetCurrentPeople(TinyLife.World.Map,TinyLife.World.Lot)
  - TinyLife.World.LotEmployment.GymTrainer
  - TinyLife.World.LotEmployment.Hidden
  - TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot,System.Boolean)
  - TinyLife.World.LotEmployment.HourlyFee
  - TinyLife.World.LotEmployment.Icon
  - TinyLife.World.LotEmployment.IdleObjects
  - TinyLife.World.LotEmployment.IdleTime
  - TinyLife.World.LotEmployment.IsDuringWorkHours(TinyLife.World.Map)
  - TinyLife.World.LotEmployment.IsFinished
  - TinyLife.World.LotEmployment.IsRequired
  - TinyLife.World.LotEmployment.Librarian
  - TinyLife.World.LotEmployment.MailCarrier
  - TinyLife.World.LotEmployment.MapWideEmployments
  - TinyLife.World.LotEmployment.MaxAmount
  - TinyLife.World.LotEmployment.MuseumCurator
  - TinyLife.World.LotEmployment.Name
  - TinyLife.World.LotEmployment.OffWorkDays
  - TinyLife.World.LotEmployment.OnFinished
  - TinyLife.World.LotEmployment.RemoveCurrentPeople(TinyLife.World.Map,TinyLife.World.Lot,System.Func{TinyLife.Objects.Person,System.Boolean})
  - TinyLife.World.LotEmployment.TrashCollector
  - TinyLife.World.LotEmployment.WorkHours
  langs:
  - csharp
  - vb
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A lot employment is a job that a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> executes somewhat perpetually.

    A person with a <xref href="TinyLife.Objects.Person.LotEmployment" data-throw-if-not-resolved="false"></xref> does not live on a <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref> or in a <xref href="TinyLife.World.Household" data-throw-if-not-resolved="false"></xref>, but instead either works at their lot employment or "leaves the city" through an <xref href="TinyLife.Actions.BeAwayFromLotEmploymentAction" data-throw-if-not-resolved="false"></xref>.

    Lot employments can be added to lots using <xref href="TinyLife.World.LotType.Employments" data-throw-if-not-resolved="false"></xref> or to a map using <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public class LotEmployment
    content.vb: Public Class LotEmployment
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotEmployment.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.LotEmployment.MailCarrier
  commentId: F:TinyLife.World.LotEmployment.MailCarrier
  id: MailCarrier
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: MailCarrier
  nameWithType: LotEmployment.MailCarrier
  fullName: TinyLife.World.LotEmployment.MailCarrier
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotEmployment MailCarrier
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public Shared ReadOnly MailCarrier As LotEmployment
- uid: TinyLife.World.LotEmployment.TrashCollector
  commentId: F:TinyLife.World.LotEmployment.TrashCollector
  id: TrashCollector
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: TrashCollector
  nameWithType: LotEmployment.TrashCollector
  fullName: TinyLife.World.LotEmployment.TrashCollector
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotEmployment TrashCollector
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public Shared ReadOnly TrashCollector As LotEmployment
- uid: TinyLife.World.LotEmployment.Babysitter
  commentId: F:TinyLife.World.LotEmployment.Babysitter
  id: Babysitter
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Babysitter
  nameWithType: LotEmployment.Babysitter
  fullName: TinyLife.World.LotEmployment.Babysitter
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotEmployment Babysitter
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public Shared ReadOnly Babysitter As LotEmployment
- uid: TinyLife.World.LotEmployment.Barista
  commentId: F:TinyLife.World.LotEmployment.Barista
  id: Barista
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Barista
  nameWithType: LotEmployment.Barista
  fullName: TinyLife.World.LotEmployment.Barista
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotEmployment Barista
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public Shared ReadOnly Barista As LotEmployment
- uid: TinyLife.World.LotEmployment.Librarian
  commentId: F:TinyLife.World.LotEmployment.Librarian
  id: Librarian
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Librarian
  nameWithType: LotEmployment.Librarian
  fullName: TinyLife.World.LotEmployment.Librarian
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotEmployment Librarian
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public Shared ReadOnly Librarian As LotEmployment
- uid: TinyLife.World.LotEmployment.Bartender
  commentId: F:TinyLife.World.LotEmployment.Bartender
  id: Bartender
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Bartender
  nameWithType: LotEmployment.Bartender
  fullName: TinyLife.World.LotEmployment.Bartender
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotEmployment Bartender
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public Shared ReadOnly Bartender As LotEmployment
- uid: TinyLife.World.LotEmployment.GymTrainer
  commentId: F:TinyLife.World.LotEmployment.GymTrainer
  id: GymTrainer
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: GymTrainer
  nameWithType: LotEmployment.GymTrainer
  fullName: TinyLife.World.LotEmployment.GymTrainer
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotEmployment GymTrainer
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public Shared ReadOnly GymTrainer As LotEmployment
- uid: TinyLife.World.LotEmployment.MuseumCurator
  commentId: F:TinyLife.World.LotEmployment.MuseumCurator
  id: MuseumCurator
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: MuseumCurator
  nameWithType: LotEmployment.MuseumCurator
  fullName: TinyLife.World.LotEmployment.MuseumCurator
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotEmployment MuseumCurator
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public Shared ReadOnly MuseumCurator As LotEmployment
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  id: MapWideEmployments
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: MapWideEmployments
  nameWithType: LotEmployment.MapWideEmployments
  fullName: TinyLife.World.LotEmployment.MapWideEmployments
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A list of lot employments that are map-wide, that is, that aren't bound to a <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref>.

    To add more map-wide lot employments, just add additional entries to this list.
  example: []
  syntax:
    content: public static readonly List<LotEmployment> MapWideEmployments
    return:
      type: System.Collections.Generic.List{TinyLife.World.LotEmployment}
    content.vb: Public Shared ReadOnly MapWideEmployments As List(Of LotEmployment)
- uid: TinyLife.World.LotEmployment.Name
  commentId: F:TinyLife.World.LotEmployment.Name
  id: Name
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LotEmployment.Name
  fullName: TinyLife.World.LotEmployment.Name
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The name of this lot employment
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
- uid: TinyLife.World.LotEmployment.Icon
  commentId: F:TinyLife.World.LotEmployment.Icon
  id: Icon
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: LotEmployment.Icon
  fullName: TinyLife.World.LotEmployment.Icon
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The icon of this lot employment.
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
- uid: TinyLife.World.LotEmployment.Actions
  commentId: F:TinyLife.World.LotEmployment.Actions
  id: Actions
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Actions
  nameWithType: LotEmployment.Actions
  fullName: TinyLife.World.LotEmployment.Actions
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A set of <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref> instances that a person working in this employment should choose to randomly execute very often.

    Using actions with the <xref href="TinyLife.Objects.ObjectCategory.Nothing" data-throw-if-not-resolved="false"></xref> category will cause any instances of the action to act as if they had the <xref href="TinyLife.Objects.ObjectCategory.Self" data-throw-if-not-resolved="false"></xref> category instead.

    Note that, for an <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref> returned by this function to have an effect, its <xref href="TinyLife.Actions.ActionType.AiSettings.PassivePriority" data-throw-if-not-resolved="false"></xref> needs to be greater than 0.
  example: []
  syntax:
    content: public readonly Func<IEnumerable<ActionType>> Actions
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
    content.vb: Public ReadOnly Actions As Func(Of IEnumerable(Of ActionType))
- uid: TinyLife.World.LotEmployment.WorkHours
  commentId: F:TinyLife.World.LotEmployment.WorkHours
  id: WorkHours
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: WorkHours
  nameWithType: LotEmployment.WorkHours
  fullName: TinyLife.World.LotEmployment.WorkHours
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The range of hours that this lot employment is active in.

    During times outside of these hours, people with this employment will automatically enqueue and execute a <xref href="TinyLife.Actions.BeAwayFromLotEmploymentAction" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly (int Start, int End) WorkHours
    return:
      type: System.ValueTuple{System.Int32,System.Int32}
    content.vb: Public ReadOnly WorkHours As (Start As Integer, [End] As Integer)
- uid: TinyLife.World.LotEmployment.ForHireOnce
  commentId: F:TinyLife.World.LotEmployment.ForHireOnce
  id: ForHireOnce
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: ForHireOnce
  nameWithType: LotEmployment.ForHireOnce
  fullName: TinyLife.World.LotEmployment.ForHireOnce
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    Whether this lot employment is intended for one-off hires.

    If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, the person will never autonomously start work, and has to be hired for a lot using <xref href="TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.

    Additionally, employments that are for hire once won't automatically have members assigned or generated in <xref href="TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection%7bTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly bool ForHireOnce
    return:
      type: System.Boolean
    content.vb: Public ReadOnly ForHireOnce As Boolean
- uid: TinyLife.World.LotEmployment.MaxAmount
  commentId: F:TinyLife.World.LotEmployment.MaxAmount
  id: MaxAmount
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: MaxAmount
  nameWithType: LotEmployment.MaxAmount
  fullName: TinyLife.World.LotEmployment.MaxAmount
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The maximum amount of people that can simultaneously be employed in this position.

    By default, this only has an effect in <xref href="TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> and when manually invoking <xref href="TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map%2cTinyLife.World.Lot%2cTinyLife.Objects.Person%2cTinyLife.Utilities.AppliedMigrations%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly int MaxAmount
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxAmount As Integer
- uid: TinyLife.World.LotEmployment.IsFinished
  commentId: P:TinyLife.World.LotEmployment.IsFinished
  id: IsFinished
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IsFinished
  nameWithType: LotEmployment.IsFinished
  fullName: TinyLife.World.LotEmployment.IsFinished
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A function that can be used to finish the lot employment's work hours before the current time is outside of <xref href="TinyLife.World.LotEmployment.WorkHours" data-throw-if-not-resolved="false"></xref>.

    This is used by the mail carrier to make them stop working once all mail is delivered.
  example: []
  syntax:
    content: public Func<LotEmployment.Instance, Person, bool> IsFinished { get; init; }
    parameters: []
    return:
      type: System.Func{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person,System.Boolean}
    content.vb: Public Property IsFinished As Func(Of LotEmployment.Instance, Person, Boolean)
  overload: TinyLife.World.LotEmployment.IsFinished*
- uid: TinyLife.World.LotEmployment.IdleObjects
  commentId: P:TinyLife.World.LotEmployment.IdleObjects
  id: IdleObjects
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IdleObjects
  nameWithType: LotEmployment.IdleObjects
  fullName: TinyLife.World.LotEmployment.IdleObjects
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A set of <xref href="TinyLife.Objects.ObjectCategory" data-throw-if-not-resolved="false"></xref> flags that represent the item types that a person with this lot employment will idle around if they have nothing else to do.

    If this is set to a non-<xref href="TinyLife.Objects.ObjectCategory.Nothing" data-throw-if-not-resolved="false"></xref> category, people with this lot employment will automatically enqueue the <xref href="TinyLife.Actions.ActionType.LotEmploymentIdle" data-throw-if-not-resolved="false"></xref> action if there is nothing else to do currently.
  example: []
  syntax:
    content: public ObjectCategory IdleObjects { get; init; }
    parameters: []
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Property IdleObjects As ObjectCategory
  overload: TinyLife.World.LotEmployment.IdleObjects*
- uid: TinyLife.World.LotEmployment.IdleTime
  commentId: P:TinyLife.World.LotEmployment.IdleTime
  id: IdleTime
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IdleTime
  nameWithType: LotEmployment.IdleTime
  fullName: TinyLife.World.LotEmployment.IdleTime
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The amount of in-game time that a person with this lot employment will idle at one of their <xref href="TinyLife.World.LotEmployment.IdleObjects" data-throw-if-not-resolved="false"></xref> for.

    Defaults to 5 minutes.
  example: []
  syntax:
    content: public TimeSpan IdleTime { get; init; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property IdleTime As TimeSpan
  overload: TinyLife.World.LotEmployment.IdleTime*
- uid: TinyLife.World.LotEmployment.ActionPriorityMultiplier
  commentId: P:TinyLife.World.LotEmployment.ActionPriorityMultiplier
  id: ActionPriorityMultiplier
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: ActionPriorityMultiplier
  nameWithType: LotEmployment.ActionPriorityMultiplier
  fullName: TinyLife.World.LotEmployment.ActionPriorityMultiplier
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A function that can optionally be used to make certain actions have a higher priority for people with this lot employment.

    The returned <xref href="System.Single" data-throw-if-not-resolved="false"></xref> will be multiplied with the default priority for the given <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Func<Person, ActionType, float> ActionPriorityMultiplier { get; init; }
    parameters: []
    return:
      type: System.Func{TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Single}
    content.vb: Public Property ActionPriorityMultiplier As Func(Of Person, ActionType, Single)
  overload: TinyLife.World.LotEmployment.ActionPriorityMultiplier*
- uid: TinyLife.World.LotEmployment.AiPriorityMultiplier
  commentId: P:TinyLife.World.LotEmployment.AiPriorityMultiplier
  id: AiPriorityMultiplier
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: AiPriorityMultiplier
  nameWithType: LotEmployment.AiPriorityMultiplier
  fullName: TinyLife.World.LotEmployment.AiPriorityMultiplier
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A function that can optionally be used to make certain objects have a higher priority for usage with a given action.

    The returned <xref href="System.Single" data-throw-if-not-resolved="false"></xref> will be multiplied with the default priority for the given <xref href="TinyLife.Objects.MapObject" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Func<Person, MapObject, ObjectCategory, float> AiPriorityMultiplier { get; init; }
    parameters: []
    return:
      type: System.Func{TinyLife.Objects.Person,TinyLife.Objects.MapObject,TinyLife.Objects.ObjectCategory,System.Single}
    content.vb: Public Property AiPriorityMultiplier As Func(Of Person, MapObject, ObjectCategory, Single)
  overload: TinyLife.World.LotEmployment.AiPriorityMultiplier*
- uid: TinyLife.World.LotEmployment.OnFinished
  commentId: P:TinyLife.World.LotEmployment.OnFinished
  id: OnFinished
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: OnFinished
  nameWithType: LotEmployment.OnFinished
  fullName: TinyLife.World.LotEmployment.OnFinished
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: An action that is invoked when this lot employment's work is finished in <xref href="TinyLife.World.LotEmployment.Instance.FinishWork(System.Boolean)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Action<LotEmployment.Instance, Person> OnFinished { get; init; }
    parameters: []
    return:
      type: System.Action{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person}
    content.vb: Public Property OnFinished As Action(Of LotEmployment.Instance, Person)
  overload: TinyLife.World.LotEmployment.OnFinished*
- uid: TinyLife.World.LotEmployment.OffWorkDays
  commentId: P:TinyLife.World.LotEmployment.OffWorkDays
  id: OffWorkDays
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: OffWorkDays
  nameWithType: LotEmployment.OffWorkDays
  fullName: TinyLife.World.LotEmployment.OffWorkDays
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: A set of weekdays where work should not be done.
  example: []
  syntax:
    content: public DayOfWeek[] OffWorkDays { get; init; }
    parameters: []
    return:
      type: System.DayOfWeek[]
    content.vb: Public Property OffWorkDays As DayOfWeek()
  overload: TinyLife.World.LotEmployment.OffWorkDays*
- uid: TinyLife.World.LotEmployment.HourlyFee
  commentId: P:TinyLife.World.LotEmployment.HourlyFee
  id: HourlyFee
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: HourlyFee
  nameWithType: LotEmployment.HourlyFee
  fullName: TinyLife.World.LotEmployment.HourlyFee
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The amount of tiny bucks that a person with this lot employment will earn per hour if hired once using <xref href="TinyLife.World.LotEmployment.ForHireOnce" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float HourlyFee { get; init; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property HourlyFee As Single
  overload: TinyLife.World.LotEmployment.HourlyFee*
- uid: TinyLife.World.LotEmployment.Hidden
  commentId: P:TinyLife.World.LotEmployment.Hidden
  id: Hidden
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Hidden
  nameWithType: LotEmployment.Hidden
  fullName: TinyLife.World.LotEmployment.Hidden
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: A property that determines whether instances of this lot employment should be hidden from the player in the household selection and build mode UIs. This defaults to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
  example: []
  syntax:
    content: public bool Hidden { get; init; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Hidden As Boolean
  overload: TinyLife.World.LotEmployment.Hidden*
- uid: TinyLife.World.LotEmployment.IsRequired
  commentId: P:TinyLife.World.LotEmployment.IsRequired
  id: IsRequired
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IsRequired
  nameWithType: LotEmployment.IsRequired
  fullName: TinyLife.World.LotEmployment.IsRequired
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: A function that optionally returns whether this lot employment type is actualy required on the given <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref>. If this is nonnull and returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, the lot employment is not displayed, and a person is not added to it.
  example: []
  syntax:
    content: public Func<Map, Lot, bool> IsRequired { get; init; }
    parameters: []
    return:
      type: System.Func{TinyLife.World.Map,TinyLife.World.Lot,System.Boolean}
    content.vb: Public Property IsRequired As Func(Of Map, Lot, Boolean)
  overload: TinyLife.World.LotEmployment.IsRequired*
- uid: TinyLife.World.LotEmployment.#ctor(System.String,MLEM.Textures.TextureRegion,System.ValueTuple{System.Int32,System.Int32},System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}},System.Boolean,System.Int32)
  commentId: M:TinyLife.World.LotEmployment.#ctor(System.String,MLEM.Textures.TextureRegion,System.ValueTuple{System.Int32,System.Int32},System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}},System.Boolean,System.Int32)
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,System.ValueTuple{System.Int32,System.Int32},System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}},System.Boolean,System.Int32)'
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: LotEmployment(string, TextureRegion, (int Start, int End), Func<IEnumerable<ActionType>>, bool, int)
  nameWithType: LotEmployment.LotEmployment(string, TextureRegion, (int Start, int End), Func<IEnumerable<ActionType>>, bool, int)
  fullName: TinyLife.World.LotEmployment.LotEmployment(string, MLEM.Textures.TextureRegion, (int Start, int End), System.Func<System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionType>>, bool, int)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new lot employment with the given settings
  example: []
  syntax:
    content: public LotEmployment(string name, TextureRegion icon, (int Start, int End) workHours, Func<IEnumerable<ActionType>> actions, bool forHireOnce = false, int maxAmount = 1)
    parameters:
    - id: name
      type: System.String
      description: The lot employment's name
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The icon to use for this lot employment.
    - id: workHours
      type: System.ValueTuple{System.Int32,System.Int32}
      description: The lot employment's work hours.
    - id: actions
      type: System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
      description: The <xref href="TinyLife.World.LotEmployment.Actions" data-throw-if-not-resolved="false"></xref> that lot employees should execute. Using actions with the <xref href="TinyLife.Objects.ObjectCategory.Nothing" data-throw-if-not-resolved="false"></xref> category will cause any instances of the action to act as if they had the <xref href="TinyLife.Objects.ObjectCategory.Self" data-throw-if-not-resolved="false"></xref> category instead. Note that, for an <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref> returned by this function to have an effect, its <xref href="TinyLife.Actions.ActionType.AiSettings.PassivePriority" data-throw-if-not-resolved="false"></xref> needs to be greater than 0.
    - id: forHireOnce
      type: System.Boolean
      description: Whether this lot employment is intended for one-off hires. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, the person will never autonomously start work, and has to be hired for a lot using <xref href="TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
    - id: maxAmount
      type: System.Int32
      description: The maximum amount of people that can simultaneously be employed in this position. By default, this only has an effect in <xref href="TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> and when manually invoking <xref href="TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map%2cTinyLife.World.Lot%2cTinyLife.Objects.Person%2cTinyLife.Utilities.AppliedMigrations%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(name As String, icon As TextureRegion, workHours As (Start As Integer, [End] As Integer), actions As Func(Of IEnumerable(Of ActionType)), forHireOnce As Boolean = False, maxAmount As Integer = 1)
  overload: TinyLife.World.LotEmployment.#ctor*
  nameWithType.vb: LotEmployment.New(String, TextureRegion, (Start As Integer, End As Integer), Func(Of IEnumerable(Of ActionType)), Boolean, Integer)
  fullName.vb: TinyLife.World.LotEmployment.New(String, MLEM.Textures.TextureRegion, (Start As Integer, End As Integer), System.Func(Of System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionType)), Boolean, Integer)
  name.vb: New(String, TextureRegion, (Start As Integer, End As Integer), Func(Of IEnumerable(Of ActionType)), Boolean, Integer)
- uid: TinyLife.World.LotEmployment.GetCurrentPeople(TinyLife.World.Map,TinyLife.World.Lot)
  commentId: M:TinyLife.World.LotEmployment.GetCurrentPeople(TinyLife.World.Map,TinyLife.World.Lot)
  id: GetCurrentPeople(TinyLife.World.Map,TinyLife.World.Lot)
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: GetCurrentPeople(Map, Lot)
  nameWithType: LotEmployment.GetCurrentPeople(Map, Lot)
  fullName: TinyLife.World.LotEmployment.GetCurrentPeople(TinyLife.World.Map, TinyLife.World.Lot)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    Returns the <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> that is currently in charge of this lot employment.

    To check for <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref>, a null lot can be passed.
  example: []
  syntax:
    content: public IEnumerable<Person> GetCurrentPeople(Map map, Lot employmentLot)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that the employment is on.
    - id: employmentLot
      type: TinyLife.World.Lot
      description: The lot, or null for a <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref> entry. Please note that this parameter does not check the <xref href="TinyLife.World.LotEmployment.Instance.WorkLot" data-throw-if-not-resolved="false"></xref>, only the <xref href="TinyLife.World.LotEmployment.Instance.EmploymentLot" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: The person that currently works in this lot employment, or null if there is none
    content.vb: Public Function GetCurrentPeople(map As Map, employmentLot As Lot) As IEnumerable(Of Person)
  overload: TinyLife.World.LotEmployment.GetCurrentPeople*
- uid: TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,TinyLife.Utilities.AppliedMigrations,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,TinyLife.Utilities.AppliedMigrations,System.Boolean,System.Boolean)
  id: AddCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,TinyLife.Utilities.AppliedMigrations,System.Boolean,System.Boolean)
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: AddCurrentPerson(Map, Lot, Person, AppliedMigrations, bool, bool)
  nameWithType: LotEmployment.AddCurrentPerson(Map, Lot, Person, AppliedMigrations, bool, bool)
  fullName: TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot, TinyLife.Objects.Person, TinyLife.Utilities.AppliedMigrations, bool, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    Sets the current person for this lot employment on the given <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref>.

    If this employment is a <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref> entry, the <code class="paramref">employmentLot</code> should be null.
  example: []
  syntax:
    content: public bool AddCurrentPerson(Map map, Lot employmentLot, Person person, AppliedMigrations appliedMigrations, bool manual = true, bool enqueueAwayAction = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: employmentLot
      type: TinyLife.World.Lot
      description: The lot, or null if this is a map wide employment
    - id: person
      type: TinyLife.Objects.Person
      description: The person to set, or null to remove the currently employed person.
    - id: appliedMigrations
      type: TinyLife.Utilities.AppliedMigrations
      description: The set of migrations that have already been applied on the given <code class="paramref">person</code>.
    - id: manual
      type: System.Boolean
      description: Whether this person was set manually (by a user) or automatically (using <xref href="TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection%7bTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref>
    - id: enqueueAwayAction
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Actions.ActionType.BeAwayFromLotEmployment" data-throw-if-not-resolved="false"></xref> action should be immediately enqueued.
    return:
      type: System.Boolean
    content.vb: Public Function AddCurrentPerson(map As Map, employmentLot As Lot, person As Person, appliedMigrations As AppliedMigrations, manual As Boolean = True, enqueueAwayAction As Boolean = True) As Boolean
  overload: TinyLife.World.LotEmployment.AddCurrentPerson*
  nameWithType.vb: LotEmployment.AddCurrentPerson(Map, Lot, Person, AppliedMigrations, Boolean, Boolean)
  fullName.vb: TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot, TinyLife.Objects.Person, TinyLife.Utilities.AppliedMigrations, Boolean, Boolean)
  name.vb: AddCurrentPerson(Map, Lot, Person, AppliedMigrations, Boolean, Boolean)
- uid: TinyLife.World.LotEmployment.RemoveCurrentPeople(TinyLife.World.Map,TinyLife.World.Lot,System.Func{TinyLife.Objects.Person,System.Boolean})
  commentId: M:TinyLife.World.LotEmployment.RemoveCurrentPeople(TinyLife.World.Map,TinyLife.World.Lot,System.Func{TinyLife.Objects.Person,System.Boolean})
  id: RemoveCurrentPeople(TinyLife.World.Map,TinyLife.World.Lot,System.Func{TinyLife.Objects.Person,System.Boolean})
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: RemoveCurrentPeople(Map, Lot, Func<Person, bool>)
  nameWithType: LotEmployment.RemoveCurrentPeople(Map, Lot, Func<Person, bool>)
  fullName: TinyLife.World.LotEmployment.RemoveCurrentPeople(TinyLife.World.Map, TinyLife.World.Lot, System.Func<TinyLife.Objects.Person, bool>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Removes all people that match the given predicate (or all people, if <code class="paramref">shouldRemove</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>), from this lot employment.
  example: []
  syntax:
    content: public void RemoveCurrentPeople(Map map, Lot employmentLot, Func<Person, bool> shouldRemove = null)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to remove people from.
    - id: employmentLot
      type: TinyLife.World.Lot
      description: The lot, or null if this is a map wide employment
    - id: shouldRemove
      type: System.Func{TinyLife.Objects.Person,System.Boolean}
      description: A predicate that checks whether a given person should be removed. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, all people will be removed.
    content.vb: Public Sub RemoveCurrentPeople(map As Map, employmentLot As Lot, shouldRemove As Func(Of Person, Boolean) = Nothing)
  overload: TinyLife.World.LotEmployment.RemoveCurrentPeople*
  nameWithType.vb: LotEmployment.RemoveCurrentPeople(Map, Lot, Func(Of Person, Boolean))
  fullName.vb: TinyLife.World.LotEmployment.RemoveCurrentPeople(TinyLife.World.Map, TinyLife.World.Lot, System.Func(Of TinyLife.Objects.Person, Boolean))
  name.vb: RemoveCurrentPeople(Map, Lot, Func(Of Person, Boolean))
- uid: TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot,System.Boolean)
  id: HireOnceForLot(TinyLife.World.Lot,System.Boolean)
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: HireOnceForLot(Lot, bool)
  nameWithType: LotEmployment.HireOnceForLot(Lot, bool)
  fullName: TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    Causes a person that works at this lot employment to be hired as a one-off laborer at the given <code class="paramref">workLot</code>.

    If <code class="paramref">generateAdditional</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, and there is no lot employee currently free, a new one will be generated if <xref href="TinyLife.World.LotEmployment.MaxAmount" data-throw-if-not-resolved="false"></xref> has not been reached yet.
  example: []
  syntax:
    content: public Person HireOnceForLot(Lot workLot, bool generateAdditional = true)
    parameters:
    - id: workLot
      type: TinyLife.World.Lot
      description: The lot to work at.
    - id: generateAdditional
      type: System.Boolean
      description: Whether additional employees should be generated if none are free.
    return:
      type: TinyLife.Objects.Person
      description: The hired person, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if no person could be hired.
    content.vb: Public Function HireOnceForLot(workLot As Lot, generateAdditional As Boolean = True) As Person
  overload: TinyLife.World.LotEmployment.HireOnceForLot*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if this lot employment is not <xref href="TinyLife.World.LotEmployment.ForHireOnce" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: LotEmployment.HireOnceForLot(Lot, Boolean)
  fullName.vb: TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot, Boolean)
  name.vb: HireOnceForLot(Lot, Boolean)
- uid: TinyLife.World.LotEmployment.IsDuringWorkHours(TinyLife.World.Map)
  commentId: M:TinyLife.World.LotEmployment.IsDuringWorkHours(TinyLife.World.Map)
  id: IsDuringWorkHours(TinyLife.World.Map)
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IsDuringWorkHours(Map)
  nameWithType: LotEmployment.IsDuringWorkHours(Map)
  fullName: TinyLife.World.LotEmployment.IsDuringWorkHours(TinyLife.World.Map)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Whether the given map's <xref href="TinyLife.World.Map.Time" data-throw-if-not-resolved="false"></xref> is during <xref href="TinyLife.World.LotEmployment.WorkHours" data-throw-if-not-resolved="false"></xref>, and not during <xref href="TinyLife.World.LotEmployment.OffWorkDays" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsDuringWorkHours(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map whose time to use.
    return:
      type: System.Boolean
      description: Whether the map's time is during work hours.
    content.vb: Public Function IsDuringWorkHours(map As Map) As Boolean
  overload: TinyLife.World.LotEmployment.IsDuringWorkHours*
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  href: TinyLife.Objects.Person.html
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  href: TinyLife.Objects.Person.html#TinyLife_Objects_Person_LotEmployment
  name: LotEmployment
  nameWithType: Person.LotEmployment
  fullName: TinyLife.Objects.Person.LotEmployment
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  href: TinyLife.World.Lot.html
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  href: TinyLife.World.Household.html
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.Actions.BeAwayFromLotEmploymentAction
  commentId: T:TinyLife.Actions.BeAwayFromLotEmploymentAction
  name: BeAwayFromLotEmploymentAction
  nameWithType: BeAwayFromLotEmploymentAction
  fullName: TinyLife.Actions.BeAwayFromLotEmploymentAction
- uid: TinyLife.World.LotType.Employments
  commentId: P:TinyLife.World.LotType.Employments
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_Employments
  name: Employments
  nameWithType: LotType.Employments
  fullName: TinyLife.World.LotType.Employments
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_MapWideEmployments
  name: MapWideEmployments
  nameWithType: LotEmployment.MapWideEmployments
  fullName: TinyLife.World.LotEmployment.MapWideEmployments
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.LotEmployment.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<LotEmployment>(LotEmployment)
  nameWithType: Extensions.JsonCopy<LotEmployment>(LotEmployment)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotEmployment>(TinyLife.World.LotEmployment)
  nameWithType.vb: Extensions.JsonCopy(Of LotEmployment)(LotEmployment)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotEmployment)(TinyLife.World.LotEmployment)
  name.vb: JsonCopy(Of LotEmployment)(LotEmployment)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotEmployment)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotEmployment)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: )
  - name: (
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  href: TinyLife.World.LotEmployment.html
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: System.Collections.Generic.List{TinyLife.World.LotEmployment}
  commentId: T:System.Collections.Generic.List{TinyLife.World.LotEmployment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<LotEmployment>
  nameWithType: List<LotEmployment>
  fullName: System.Collections.Generic.List<TinyLife.World.LotEmployment>
  nameWithType.vb: List(Of LotEmployment)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.LotEmployment)
  name.vb: List(Of LotEmployment)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Objects.ObjectCategory.Nothing
  commentId: F:TinyLife.Objects.ObjectCategory.Nothing
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Nothing
  name: Nothing
  nameWithType: ObjectCategory.Nothing
  fullName: TinyLife.Objects.ObjectCategory.Nothing
- uid: TinyLife.Objects.ObjectCategory.Self
  commentId: F:TinyLife.Objects.ObjectCategory.Self
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Self
  name: Self
  nameWithType: ObjectCategory.Self
  fullName: TinyLife.Objects.ObjectCategory.Self
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  href: TinyLife.Actions.Action.html
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  commentId: F:TinyLife.Actions.ActionType.AiSettings.PassivePriority
  href: TinyLife.Actions.ActionType.AiSettings.html#TinyLife_Actions_ActionType_AiSettings_PassivePriority
  name: PassivePriority
  nameWithType: ActionType.AiSettings.PassivePriority
  fullName: TinyLife.Actions.ActionType.AiSettings.PassivePriority
- uid: System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<IEnumerable<ActionType>>
  nameWithType: Func<IEnumerable<ActionType>>
  fullName: System.Func<System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionType>>
  nameWithType.vb: Func(Of IEnumerable(Of ActionType))
  fullName.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionType))
  name.vb: Func(Of IEnumerable(Of ActionType))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: )
  - name: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: (int Start, int End)
  nameWithType: (int Start, int End)
  fullName: (int Start, int End)
  nameWithType.vb: (Start As Integer, End As Integer)
  fullName.vb: (Start As Integer, End As Integer)
  name.vb: (Start As Integer, End As Integer)
  spec.csharp:
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Start
    name: Start
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.start
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.End
    name: End
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.end
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Int32,System.Int32}.Start
    name: Start
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.start
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.End
    name: End
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.end
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot,System.Boolean)
  isExternal: true
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_HireOnceForLot_TinyLife_World_Lot_System_Boolean_
  name: HireOnceForLot(Lot, bool)
  nameWithType: LotEmployment.HireOnceForLot(Lot, bool)
  fullName: TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot, bool)
  nameWithType.vb: LotEmployment.HireOnceForLot(Lot, Boolean)
  fullName.vb: TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot, Boolean)
  name.vb: HireOnceForLot(Lot, Boolean)
  spec.csharp:
  - uid: TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot,System.Boolean)
    name: HireOnceForLot
    href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_HireOnceForLot_TinyLife_World_Lot_System_Boolean_
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.World.LotEmployment.HireOnceForLot(TinyLife.World.Lot,System.Boolean)
    name: HireOnceForLot
    href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_HireOnceForLot_TinyLife_World_Lot_System_Boolean_
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  isExternal: true
  href: TinyLife.World.Map.html#TinyLife_World_Map_UpdateExternalPeople_System_Collections_Generic_ICollection_TinyLife_World_Map__System_Action_System_String__System_Action_System_Single__
  name: UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  nameWithType: Map.UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection<TinyLife.World.Map>, System.Action<string>, System.Action<float>)
  nameWithType.vb: Map.UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection(Of TinyLife.World.Map), System.Action(Of String), System.Action(Of Single))
  name.vb: UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  spec.csharp:
  - uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: UpdateExternalPeople
    href: TinyLife.World.Map.html#TinyLife_World_Map_UpdateExternalPeople_System_Collections_Generic_ICollection_TinyLife_World_Map__System_Action_System_String__System_Action_System_Single__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: UpdateExternalPeople
    href: TinyLife.World.Map.html#TinyLife_World_Map_UpdateExternalPeople_System_Collections_Generic_ICollection_TinyLife_World_Map__System_Action_System_String__System_Action_System_Single__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,TinyLife.Utilities.AppliedMigrations,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,TinyLife.Utilities.AppliedMigrations,System.Boolean,System.Boolean)
  isExternal: true
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_AddCurrentPerson_TinyLife_World_Map_TinyLife_World_Lot_TinyLife_Objects_Person_TinyLife_Utilities_AppliedMigrations_System_Boolean_System_Boolean_
  name: AddCurrentPerson(Map, Lot, Person, AppliedMigrations, bool, bool)
  nameWithType: LotEmployment.AddCurrentPerson(Map, Lot, Person, AppliedMigrations, bool, bool)
  fullName: TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot, TinyLife.Objects.Person, TinyLife.Utilities.AppliedMigrations, bool, bool)
  nameWithType.vb: LotEmployment.AddCurrentPerson(Map, Lot, Person, AppliedMigrations, Boolean, Boolean)
  fullName.vb: TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot, TinyLife.Objects.Person, TinyLife.Utilities.AppliedMigrations, Boolean, Boolean)
  name.vb: AddCurrentPerson(Map, Lot, Person, AppliedMigrations, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,TinyLife.Utilities.AppliedMigrations,System.Boolean,System.Boolean)
    name: AddCurrentPerson
    href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_AddCurrentPerson_TinyLife_World_Map_TinyLife_World_Lot_TinyLife_Objects_Person_TinyLife_Utilities_AppliedMigrations_System_Boolean_System_Boolean_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: TinyLife.Utilities.AppliedMigrations
    name: AppliedMigrations
    href: TinyLife.Utilities.AppliedMigrations.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.World.LotEmployment.AddCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,TinyLife.Utilities.AppliedMigrations,System.Boolean,System.Boolean)
    name: AddCurrentPerson
    href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_AddCurrentPerson_TinyLife_World_Map_TinyLife_World_Lot_TinyLife_Objects_Person_TinyLife_Utilities_AppliedMigrations_System_Boolean_System_Boolean_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: TinyLife.Utilities.AppliedMigrations
    name: AppliedMigrations
    href: TinyLife.Utilities.AppliedMigrations.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.World.LotEmployment.WorkHours
  commentId: F:TinyLife.World.LotEmployment.WorkHours
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_WorkHours
  name: WorkHours
  nameWithType: LotEmployment.WorkHours
  fullName: TinyLife.World.LotEmployment.WorkHours
- uid: TinyLife.World.LotEmployment.IsFinished*
  commentId: Overload:TinyLife.World.LotEmployment.IsFinished
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_IsFinished
  name: IsFinished
  nameWithType: LotEmployment.IsFinished
  fullName: TinyLife.World.LotEmployment.IsFinished
- uid: System.Func{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person,System.Boolean}
  commentId: T:System.Func{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<LotEmployment.Instance, Person, bool>
  nameWithType: Func<LotEmployment.Instance, Person, bool>
  fullName: System.Func<TinyLife.World.LotEmployment.Instance, TinyLife.Objects.Person, bool>
  nameWithType.vb: Func(Of LotEmployment.Instance, Person, Boolean)
  fullName.vb: System.Func(Of TinyLife.World.LotEmployment.Instance, TinyLife.Objects.Person, Boolean)
  name.vb: Func(Of LotEmployment.Instance, Person, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: .
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
    href: TinyLife.World.LotEmployment.Instance.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: .
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
    href: TinyLife.World.LotEmployment.Instance.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectCategory.html
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Actions.ActionType.LotEmploymentIdle
  commentId: F:TinyLife.Actions.ActionType.LotEmploymentIdle
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_LotEmploymentIdle
  name: LotEmploymentIdle
  nameWithType: ActionType.LotEmploymentIdle
  fullName: TinyLife.Actions.ActionType.LotEmploymentIdle
- uid: TinyLife.World.LotEmployment.IdleObjects*
  commentId: Overload:TinyLife.World.LotEmployment.IdleObjects
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_IdleObjects
  name: IdleObjects
  nameWithType: LotEmployment.IdleObjects
  fullName: TinyLife.World.LotEmployment.IdleObjects
- uid: TinyLife.World.LotEmployment.IdleObjects
  commentId: P:TinyLife.World.LotEmployment.IdleObjects
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_IdleObjects
  name: IdleObjects
  nameWithType: LotEmployment.IdleObjects
  fullName: TinyLife.World.LotEmployment.IdleObjects
- uid: TinyLife.World.LotEmployment.IdleTime*
  commentId: Overload:TinyLife.World.LotEmployment.IdleTime
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_IdleTime
  name: IdleTime
  nameWithType: LotEmployment.IdleTime
  fullName: TinyLife.World.LotEmployment.IdleTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.World.LotEmployment.ActionPriorityMultiplier*
  commentId: Overload:TinyLife.World.LotEmployment.ActionPriorityMultiplier
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_ActionPriorityMultiplier
  name: ActionPriorityMultiplier
  nameWithType: LotEmployment.ActionPriorityMultiplier
  fullName: TinyLife.World.LotEmployment.ActionPriorityMultiplier
- uid: System.Func{TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Single}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<Person, ActionType, float>
  nameWithType: Func<Person, ActionType, float>
  fullName: System.Func<TinyLife.Objects.Person, TinyLife.Actions.ActionType, float>
  nameWithType.vb: Func(Of Person, ActionType, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Person, TinyLife.Actions.ActionType, Single)
  name.vb: Func(Of Person, ActionType, Single)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.MapObject.html
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World.LotEmployment.AiPriorityMultiplier*
  commentId: Overload:TinyLife.World.LotEmployment.AiPriorityMultiplier
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_AiPriorityMultiplier
  name: AiPriorityMultiplier
  nameWithType: LotEmployment.AiPriorityMultiplier
  fullName: TinyLife.World.LotEmployment.AiPriorityMultiplier
- uid: System.Func{TinyLife.Objects.Person,TinyLife.Objects.MapObject,TinyLife.Objects.ObjectCategory,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Person,TinyLife.Objects.MapObject,TinyLife.Objects.ObjectCategory,System.Single}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<Person, MapObject, ObjectCategory, float>
  nameWithType: Func<Person, MapObject, ObjectCategory, float>
  fullName: System.Func<TinyLife.Objects.Person, TinyLife.Objects.MapObject, TinyLife.Objects.ObjectCategory, float>
  nameWithType.vb: Func(Of Person, MapObject, ObjectCategory, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Person, TinyLife.Objects.MapObject, TinyLife.Objects.ObjectCategory, Single)
  name.vb: Func(Of Person, MapObject, ObjectCategory, Single)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.LotEmployment.Instance.FinishWork(System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.Instance.FinishWork(System.Boolean)
  isExternal: true
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_FinishWork_System_Boolean_
  name: FinishWork(bool)
  nameWithType: LotEmployment.Instance.FinishWork(bool)
  fullName: TinyLife.World.LotEmployment.Instance.FinishWork(bool)
  nameWithType.vb: LotEmployment.Instance.FinishWork(Boolean)
  fullName.vb: TinyLife.World.LotEmployment.Instance.FinishWork(Boolean)
  name.vb: FinishWork(Boolean)
  spec.csharp:
  - uid: TinyLife.World.LotEmployment.Instance.FinishWork(System.Boolean)
    name: FinishWork
    href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_FinishWork_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.World.LotEmployment.Instance.FinishWork(System.Boolean)
    name: FinishWork
    href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_FinishWork_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.World.LotEmployment.OnFinished*
  commentId: Overload:TinyLife.World.LotEmployment.OnFinished
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_OnFinished
  name: OnFinished
  nameWithType: LotEmployment.OnFinished
  fullName: TinyLife.World.LotEmployment.OnFinished
- uid: System.Action{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person}
  commentId: T:System.Action{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<LotEmployment.Instance, Person>
  nameWithType: Action<LotEmployment.Instance, Person>
  fullName: System.Action<TinyLife.World.LotEmployment.Instance, TinyLife.Objects.Person>
  nameWithType.vb: Action(Of LotEmployment.Instance, Person)
  fullName.vb: System.Action(Of TinyLife.World.LotEmployment.Instance, TinyLife.Objects.Person)
  name.vb: Action(Of LotEmployment.Instance, Person)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: .
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
    href: TinyLife.World.LotEmployment.Instance.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: .
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
    href: TinyLife.World.LotEmployment.Instance.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.World.LotEmployment.OffWorkDays*
  commentId: Overload:TinyLife.World.LotEmployment.OffWorkDays
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_OffWorkDays
  name: OffWorkDays
  nameWithType: LotEmployment.OffWorkDays
  fullName: TinyLife.World.LotEmployment.OffWorkDays
- uid: System.DayOfWeek[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.dayofweek
  name: DayOfWeek[]
  nameWithType: DayOfWeek[]
  fullName: System.DayOfWeek[]
  nameWithType.vb: DayOfWeek()
  fullName.vb: System.DayOfWeek()
  name.vb: DayOfWeek()
  spec.csharp:
  - uid: System.DayOfWeek
    name: DayOfWeek
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.dayofweek
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.DayOfWeek
    name: DayOfWeek
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.dayofweek
  - name: (
  - name: )
- uid: TinyLife.World.LotEmployment.ForHireOnce
  commentId: F:TinyLife.World.LotEmployment.ForHireOnce
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_ForHireOnce
  name: ForHireOnce
  nameWithType: LotEmployment.ForHireOnce
  fullName: TinyLife.World.LotEmployment.ForHireOnce
- uid: TinyLife.World.LotEmployment.HourlyFee*
  commentId: Overload:TinyLife.World.LotEmployment.HourlyFee
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_HourlyFee
  name: HourlyFee
  nameWithType: LotEmployment.HourlyFee
  fullName: TinyLife.World.LotEmployment.HourlyFee
- uid: TinyLife.World.LotEmployment.Hidden*
  commentId: Overload:TinyLife.World.LotEmployment.Hidden
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_Hidden
  name: Hidden
  nameWithType: LotEmployment.Hidden
  fullName: TinyLife.World.LotEmployment.Hidden
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.LotEmployment.IsRequired*
  commentId: Overload:TinyLife.World.LotEmployment.IsRequired
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_IsRequired
  name: IsRequired
  nameWithType: LotEmployment.IsRequired
  fullName: TinyLife.World.LotEmployment.IsRequired
- uid: System.Func{TinyLife.World.Map,TinyLife.World.Lot,System.Boolean}
  commentId: T:System.Func{TinyLife.World.Map,TinyLife.World.Lot,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<Map, Lot, bool>
  nameWithType: Func<Map, Lot, bool>
  fullName: System.Func<TinyLife.World.Map, TinyLife.World.Lot, bool>
  nameWithType.vb: Func(Of Map, Lot, Boolean)
  fullName.vb: System.Func(Of TinyLife.World.Map, TinyLife.World.Lot, Boolean)
  name.vb: Func(Of Map, Lot, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.World.LotEmployment.Actions
  commentId: F:TinyLife.World.LotEmployment.Actions
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_Actions
  name: Actions
  nameWithType: LotEmployment.Actions
  fullName: TinyLife.World.LotEmployment.Actions
- uid: TinyLife.World.LotEmployment.#ctor*
  commentId: Overload:TinyLife.World.LotEmployment.#ctor
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment__ctor_System_String_MLEM_Textures_TextureRegion_System_ValueTuple_System_Int32_System_Int32__System_Func_System_Collections_Generic_IEnumerable_TinyLife_Actions_ActionType___System_Boolean_System_Int32_
  name: LotEmployment
  nameWithType: LotEmployment.LotEmployment
  fullName: TinyLife.World.LotEmployment.LotEmployment
  nameWithType.vb: LotEmployment.New
  fullName.vb: TinyLife.World.LotEmployment.New
  name.vb: New
- uid: TinyLife.World.LotEmployment.Instance.WorkLot
  commentId: P:TinyLife.World.LotEmployment.Instance.WorkLot
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_WorkLot
  name: WorkLot
  nameWithType: LotEmployment.Instance.WorkLot
  fullName: TinyLife.World.LotEmployment.Instance.WorkLot
- uid: TinyLife.World.LotEmployment.Instance.EmploymentLot
  commentId: P:TinyLife.World.LotEmployment.Instance.EmploymentLot
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_EmploymentLot
  name: EmploymentLot
  nameWithType: LotEmployment.Instance.EmploymentLot
  fullName: TinyLife.World.LotEmployment.Instance.EmploymentLot
- uid: TinyLife.World.LotEmployment.GetCurrentPeople*
  commentId: Overload:TinyLife.World.LotEmployment.GetCurrentPeople
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_GetCurrentPeople_TinyLife_World_Map_TinyLife_World_Lot_
  name: GetCurrentPeople
  nameWithType: LotEmployment.GetCurrentPeople
  fullName: TinyLife.World.LotEmployment.GetCurrentPeople
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Actions.ActionType.BeAwayFromLotEmployment
  commentId: F:TinyLife.Actions.ActionType.BeAwayFromLotEmployment
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_BeAwayFromLotEmployment
  name: BeAwayFromLotEmployment
  nameWithType: ActionType.BeAwayFromLotEmployment
  fullName: TinyLife.Actions.ActionType.BeAwayFromLotEmployment
- uid: TinyLife.World.LotEmployment.AddCurrentPerson*
  commentId: Overload:TinyLife.World.LotEmployment.AddCurrentPerson
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_AddCurrentPerson_TinyLife_World_Map_TinyLife_World_Lot_TinyLife_Objects_Person_TinyLife_Utilities_AppliedMigrations_System_Boolean_System_Boolean_
  name: AddCurrentPerson
  nameWithType: LotEmployment.AddCurrentPerson
  fullName: TinyLife.World.LotEmployment.AddCurrentPerson
- uid: TinyLife.Utilities.AppliedMigrations
  commentId: T:TinyLife.Utilities.AppliedMigrations
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.AppliedMigrations.html
  name: AppliedMigrations
  nameWithType: AppliedMigrations
  fullName: TinyLife.Utilities.AppliedMigrations
- uid: TinyLife.World.LotEmployment.RemoveCurrentPeople*
  commentId: Overload:TinyLife.World.LotEmployment.RemoveCurrentPeople
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_RemoveCurrentPeople_TinyLife_World_Map_TinyLife_World_Lot_System_Func_TinyLife_Objects_Person_System_Boolean__
  name: RemoveCurrentPeople
  nameWithType: LotEmployment.RemoveCurrentPeople
  fullName: TinyLife.World.LotEmployment.RemoveCurrentPeople
- uid: System.Func{TinyLife.Objects.Person,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.Person,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Person, bool>
  nameWithType: Func<Person, bool>
  fullName: System.Func<TinyLife.Objects.Person, bool>
  nameWithType.vb: Func(Of Person, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.Person, Boolean)
  name.vb: Func(Of Person, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
    href: TinyLife.Objects.Person.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.LotEmployment.MaxAmount
  commentId: F:TinyLife.World.LotEmployment.MaxAmount
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_MaxAmount
  name: MaxAmount
  nameWithType: LotEmployment.MaxAmount
  fullName: TinyLife.World.LotEmployment.MaxAmount
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: TinyLife.World.LotEmployment.HireOnceForLot*
  commentId: Overload:TinyLife.World.LotEmployment.HireOnceForLot
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_HireOnceForLot_TinyLife_World_Lot_System_Boolean_
  name: HireOnceForLot
  nameWithType: LotEmployment.HireOnceForLot
  fullName: TinyLife.World.LotEmployment.HireOnceForLot
- uid: TinyLife.World.Map.Time
  commentId: P:TinyLife.World.Map.Time
  href: TinyLife.World.Map.html#TinyLife_World_Map_Time
  name: Time
  nameWithType: Map.Time
  fullName: TinyLife.World.Map.Time
- uid: TinyLife.World.LotEmployment.OffWorkDays
  commentId: P:TinyLife.World.LotEmployment.OffWorkDays
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_OffWorkDays
  name: OffWorkDays
  nameWithType: LotEmployment.OffWorkDays
  fullName: TinyLife.World.LotEmployment.OffWorkDays
- uid: TinyLife.World.LotEmployment.IsDuringWorkHours*
  commentId: Overload:TinyLife.World.LotEmployment.IsDuringWorkHours
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_IsDuringWorkHours_TinyLife_World_Map_
  name: IsDuringWorkHours
  nameWithType: LotEmployment.IsDuringWorkHours
  fullName: TinyLife.World.LotEmployment.IsDuringWorkHours
