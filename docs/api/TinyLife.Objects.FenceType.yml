### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.FenceType
  commentId: T:TinyLife.Objects.FenceType
  id: FenceType
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.FenceType.#ctor(System.String,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[])
  - TinyLife.Objects.FenceType.#ctor(System.String,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorSettings)
  - TinyLife.Objects.FenceType.Colors
  - TinyLife.Objects.FenceType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Boolean,System.Boolean,System.Int32[],MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.Objects.FenceType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,TinyLife.World.Map,System.Int32[],System.Single)
  - TinyLife.Objects.FenceType.Icon
  - TinyLife.Objects.FenceType.Name
  - TinyLife.Objects.FenceType.Price
  - TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
  - TinyLife.Objects.FenceType.TextureRegion
  - TinyLife.Objects.FenceType.Textures
  - TinyLife.Objects.FenceType.Types
  langs:
  - csharp
  - vb
  name: FenceType
  nameWithType: FenceType
  fullName: TinyLife.Objects.FenceType
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: A fence type is a set of underlying, unchanging settinsg for a <xref href="TinyLife.Objects.FenceWall" data-throw-if-not-resolved="false"></xref> object. Fence types can be registered using <xref href="TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(MigratingStaticJsonConverter<FenceType>), new object[] { typeof(FenceType), "PrivateTypes", true })]

      public class FenceType
    content.vb: >-
      <JsonConverter(GetType(MigratingStaticJsonConverter(Of FenceType)), New Object() { GetType(FenceType), "PrivateTypes", True })>

      Public Class FenceType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.FenceType.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Objects.FenceType.Types
  commentId: F:TinyLife.Objects.FenceType.Types
  id: Types
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: FenceType.Types
  fullName: TinyLife.Objects.FenceType.Types
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The set of all registered fence types, including vanilla and modded ones.
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, FenceType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Objects.FenceType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, FenceType)
- uid: TinyLife.Objects.FenceType.Name
  commentId: F:TinyLife.Objects.FenceType.Name
  id: Name
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FenceType.Name
  fullName: TinyLife.Objects.FenceType.Name
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The name of this fence type.
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
- uid: TinyLife.Objects.FenceType.Price
  commentId: F:TinyLife.Objects.FenceType.Price
  id: Price
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: FenceType.Price
  fullName: TinyLife.Objects.FenceType.Price
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The price of a single element of this fence type.
  example: []
  syntax:
    content: public readonly float Price
    return:
      type: System.Single
    content.vb: Public ReadOnly Price As Single
- uid: TinyLife.Objects.FenceType.Icon
  commentId: F:TinyLife.Objects.FenceType.Icon
  id: Icon
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: FenceType.Icon
  fullName: TinyLife.Objects.FenceType.Icon
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The build mode icon that this fence type optionally uses.
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
- uid: TinyLife.Objects.FenceType.Colors
  commentId: F:TinyLife.Objects.FenceType.Colors
  id: Colors
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: FenceType.Colors
  fullName: TinyLife.Objects.FenceType.Colors
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The color settings to use for this fence wall.
  example: []
  syntax:
    content: public readonly ColorSettings Colors
    return:
      type: TinyLife.Utilities.ColorSettings
    content.vb: Public ReadOnly Colors As ColorSettings
- uid: TinyLife.Objects.FenceType.Textures
  commentId: F:TinyLife.Objects.FenceType.Textures
  id: Textures
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: Textures
  nameWithType: FenceType.Textures
  fullName: TinyLife.Objects.FenceType.Textures
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The texture atlas that this fence type's <xref href="TinyLife.Objects.FenceType.TextureRegion" data-throw-if-not-resolved="false"></xref> is on.
  example: []
  syntax:
    content: public readonly Dictionary<Point, TextureRegion> Textures
    return:
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
    content.vb: Public ReadOnly Textures As Dictionary(Of Point, TextureRegion)
- uid: TinyLife.Objects.FenceType.TextureRegion
  commentId: F:TinyLife.Objects.FenceType.TextureRegion
  id: TextureRegion
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: TextureRegion
  nameWithType: FenceType.TextureRegion
  fullName: TinyLife.Objects.FenceType.TextureRegion
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    The texture region on this fence's type <xref href="TinyLife.Objects.FenceType.Textures" data-throw-if-not-resolved="false"></xref> that marks the base region for this fence type.

    Additional regions are gathered to the right of this region.
  example: []
  syntax:
    content: public readonly Point TextureRegion
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly TextureRegion As Point
- uid: TinyLife.Objects.FenceType.#ctor(System.String,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[])
  commentId: M:TinyLife.Objects.FenceType.#ctor(System.String,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[])
  id: '#ctor(System.String,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[])'
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: FenceType(string, float, TextureRegion, Dictionary<Point, TextureRegion>, Point, params ColorScheme[])
  nameWithType: FenceType.FenceType(string, float, TextureRegion, Dictionary<Point, TextureRegion>, Point, params ColorScheme[])
  fullName: TinyLife.Objects.FenceType.FenceType(string, float, MLEM.Textures.TextureRegion, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, params TinyLife.Utilities.ColorScheme[])
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Creates a new fence type with the given settings.
  example: []
  syntax:
    content: public FenceType(string name, float price, TextureRegion icon, Dictionary<Point, TextureRegion> textures, Point textureRegion, params ColorScheme[] colorSchemes)
    parameters:
    - id: name
      type: System.String
      description: The name of this fence type.
    - id: price
      type: System.Single
      description: The price of a single element of this fence type.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode icon that this fence type optionally uses.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas that this fence type's &lt;see cref="TextureRegion"/&gt; is on.
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
      description: The texture region on this fence's type &lt;see cref="Textures"/&gt; that marks the base region for this fence type.
    - id: colorSchemes
      type: TinyLife.Utilities.ColorScheme[]
      description: The color schemes that each layer of this fence type uses.
    content.vb: Public Sub New(name As String, price As Single, icon As TextureRegion, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, ParamArray colorSchemes As ColorScheme())
  overload: TinyLife.Objects.FenceType.#ctor*
  nameWithType.vb: FenceType.New(String, Single, TextureRegion, Dictionary(Of Point, TextureRegion), Point, ParamArray ColorScheme())
  fullName.vb: TinyLife.Objects.FenceType.New(String, Single, MLEM.Textures.TextureRegion, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, ParamArray TinyLife.Utilities.ColorScheme())
  name.vb: New(String, Single, TextureRegion, Dictionary(Of Point, TextureRegion), Point, ParamArray ColorScheme())
- uid: TinyLife.Objects.FenceType.#ctor(System.String,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorSettings)
  commentId: M:TinyLife.Objects.FenceType.#ctor(System.String,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorSettings)
  id: '#ctor(System.String,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorSettings)'
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: FenceType(string, float, TextureRegion, Dictionary<Point, TextureRegion>, Point, ColorSettings)
  nameWithType: FenceType.FenceType(string, float, TextureRegion, Dictionary<Point, TextureRegion>, Point, ColorSettings)
  fullName: TinyLife.Objects.FenceType.FenceType(string, float, MLEM.Textures.TextureRegion, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorSettings)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Creates a new fence type with the given settings.
  example: []
  syntax:
    content: public FenceType(string name, float price, TextureRegion icon, Dictionary<Point, TextureRegion> textures, Point textureRegion, ColorSettings colors)
    parameters:
    - id: name
      type: System.String
      description: The name of this fence type.
    - id: price
      type: System.Single
      description: The price of a single element of this fence type.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode icon that this fence type optionally uses.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas that this fence type's &lt;see cref="TextureRegion"/&gt; is on.
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
      description: The texture region on this fence's type &lt;see cref="Textures"/&gt; that marks the base region for this fence type.
    - id: colors
      type: TinyLife.Utilities.ColorSettings
      description: The color settings that this fence type uses.
    content.vb: Public Sub New(name As String, price As Single, icon As TextureRegion, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, colors As ColorSettings)
  overload: TinyLife.Objects.FenceType.#ctor*
  nameWithType.vb: FenceType.New(String, Single, TextureRegion, Dictionary(Of Point, TextureRegion), Point, ColorSettings)
  fullName.vb: TinyLife.Objects.FenceType.New(String, Single, MLEM.Textures.TextureRegion, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorSettings)
  name.vb: New(String, Single, TextureRegion, Dictionary(Of Point, TextureRegion), Point, ColorSettings)
- uid: TinyLife.Objects.FenceType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Boolean,System.Boolean,System.Int32[],MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.Objects.FenceType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Boolean,System.Boolean,System.Int32[],MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Boolean,System.Boolean,System.Int32[],MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Map, Point, Point, int, Vector2, bool, float, bool, bool, int[], Direction2, Color?)
  nameWithType: FenceType.Draw(GameTime, SpriteBatch, Map, Point, Point, int, Vector2, bool, float, bool, bool, int[], Direction2, Color?)
  fullName: TinyLife.Objects.FenceType.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, int, Microsoft.Xna.Framework.Vector2, bool, float, bool, bool, int[], MLEM.Maths.Direction2, Microsoft.Xna.Framework.Color?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Draws this fence type at the given location with the given settings.
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch, Map map, Point pos1, Point pos2, int floor, Vector2 drawPos, bool vertical, float scale, bool hasPoleNeg, bool hasPolePos, int[] colors, Direction2 cameraRotation, Color? overrideColor = null)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time.
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing.
    - id: map
      type: TinyLife.World.Map
      description: The map this fence wall is on.
    - id: pos1
      type: Microsoft.Xna.Framework.Point
      description: The first position in the <xref href="TinyLife.Objects.WallLike.Positions" data-throw-if-not-resolved="false"></xref> array.
    - id: pos2
      type: Microsoft.Xna.Framework.Point
      description: The second position in the <xref href="TinyLife.Objects.WallLike.Positions" data-throw-if-not-resolved="false"></xref> array.
    - id: floor
      type: System.Int32
      description: The floor.
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw at.
    - id: vertical
      type: System.Boolean
      description: Whether the fence wall is vertical.
    - id: scale
      type: System.Single
      description: The scale to draw with.
    - id: hasPoleNeg
      type: System.Boolean
      description: Whether the fence drawn has a pole in the negative direction.
    - id: hasPolePos
      type: System.Boolean
      description: Whether the fence drawn has a pole in the positive direction.
    - id: colors
      type: System.Int32[]
      description: The color indices in this fence type's <xref href="TinyLife.Objects.FenceType.Colors" data-throw-if-not-resolved="false"></xref> to draw with.
    - id: cameraRotation
      type: MLEM.Maths.Direction2
      description: The camera rotation to draw with.
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: An optional override color to use instead of this fence type's <xref href="TinyLife.Objects.FenceType.Colors" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch, map As Map, pos1 As Point, pos2 As Point, floor As Integer, drawPos As Vector2, vertical As Boolean, scale As Single, hasPoleNeg As Boolean, hasPolePos As Boolean, colors As Integer(), cameraRotation As Direction2, overrideColor As Color? = Nothing)
  overload: TinyLife.Objects.FenceType.Draw*
  nameWithType.vb: FenceType.Draw(GameTime, SpriteBatch, Map, Point, Point, Integer, Vector2, Boolean, Single, Boolean, Boolean, Integer(), Direction2, Color?)
  fullName.vb: TinyLife.Objects.FenceType.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, Integer, Microsoft.Xna.Framework.Vector2, Boolean, Single, Boolean, Boolean, Integer(), MLEM.Maths.Direction2, Microsoft.Xna.Framework.Color?)
  name.vb: Draw(GameTime, SpriteBatch, Map, Point, Point, Integer, Vector2, Boolean, Single, Boolean, Boolean, Integer(), Direction2, Color?)
- uid: TinyLife.Objects.FenceType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,TinyLife.World.Map,System.Int32[],System.Single)
  commentId: M:TinyLife.Objects.FenceType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,TinyLife.World.Map,System.Int32[],System.Single)
  id: DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,TinyLife.World.Map,System.Int32[],System.Single)
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: DrawUi(Element, SpriteBatch, GameTime, Map, int[], float)
  nameWithType: FenceType.DrawUi(Element, SpriteBatch, GameTime, Map, int[], float)
  fullName: TinyLife.Objects.FenceType.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.GameTime, TinyLife.World.Map, int[], float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Draws this fence in UI space, based on the position and size of the given <xref href="MLEM.Ui.Elements.Element" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual void DrawUi(Element e, SpriteBatch batch, GameTime time, Map map, int[] colors, float drawScale)
    parameters:
    - id: e
      type: MLEM.Ui.Elements.Element
      description: The element to base position and size on.
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing.
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time.
    - id: map
      type: TinyLife.World.Map
      description: The map.
    - id: colors
      type: System.Int32[]
      description: The color indices in this fence type's <xref href="TinyLife.Objects.FenceType.Colors" data-throw-if-not-resolved="false"></xref> to draw with.
    - id: drawScale
      type: System.Single
      description: The scale to draw with.
    content.vb: Public Overridable Sub DrawUi(e As Element, batch As SpriteBatch, time As GameTime, map As Map, colors As Integer(), drawScale As Single)
  overload: TinyLife.Objects.FenceType.DrawUi*
  nameWithType.vb: FenceType.DrawUi(Element, SpriteBatch, GameTime, Map, Integer(), Single)
  fullName.vb: TinyLife.Objects.FenceType.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.GameTime, TinyLife.World.Map, Integer(), Single)
  name.vb: DrawUi(Element, SpriteBatch, GameTime, Map, Integer(), Single)
- uid: TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
  commentId: M:TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
  id: Register(TinyLife.Objects.FenceType)
  parent: TinyLife.Objects.FenceType
  langs:
  - csharp
  - vb
  name: Register(FenceType)
  nameWithType: FenceType.Register(FenceType)
  fullName: TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Registers the given fence type into the <xref href="TinyLife.Objects.FenceType.Types" data-throw-if-not-resolved="false"></xref> registry and returns it.
  example: []
  syntax:
    content: public static FenceType Register(FenceType type)
    parameters:
    - id: type
      type: TinyLife.Objects.FenceType
      description: The fence type to register.
    return:
      type: TinyLife.Objects.FenceType
      description: The registered fence type <code class="paramref">type</code>.
    content.vb: Public Shared Function Register(type As FenceType) As FenceType
  overload: TinyLife.Objects.FenceType.Register*
references:
- uid: TinyLife.Objects.FenceWall
  commentId: T:TinyLife.Objects.FenceWall
  href: TinyLife.Objects.FenceWall.html
  name: FenceWall
  nameWithType: FenceWall
  fullName: TinyLife.Objects.FenceWall
- uid: TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
  commentId: M:TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_Register_TinyLife_Objects_FenceType_
  name: Register(FenceType)
  nameWithType: FenceType.Register(FenceType)
  fullName: TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
  spec.csharp:
  - uid: TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
    name: Register
    href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_Register_TinyLife_Objects_FenceType_
  - name: (
  - uid: TinyLife.Objects.FenceType
    name: FenceType
    href: TinyLife.Objects.FenceType.html
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FenceType.Register(TinyLife.Objects.FenceType)
    name: Register
    href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_Register_TinyLife_Objects_FenceType_
  - name: (
  - uid: TinyLife.Objects.FenceType
    name: FenceType
    href: TinyLife.Objects.FenceType.html
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Objects.FenceType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<FenceType>(FenceType)
  nameWithType: Extensions.JsonCopy<FenceType>(FenceType)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.FenceType>(TinyLife.Objects.FenceType)
  nameWithType.vb: Extensions.JsonCopy(Of FenceType)(FenceType)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.FenceType)(TinyLife.Objects.FenceType)
  name.vb: JsonCopy(Of FenceType)(FenceType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.FenceType)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Objects.FenceType
    name: FenceType
    href: TinyLife.Objects.FenceType.html
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.FenceType
    name: FenceType
    href: TinyLife.Objects.FenceType.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.FenceType)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.FenceType
    name: FenceType
    href: TinyLife.Objects.FenceType.html
  - name: )
  - name: (
  - uid: TinyLife.Objects.FenceType
    name: FenceType
    href: TinyLife.Objects.FenceType.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Objects.FenceType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Objects.FenceType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<string, FenceType>
  nameWithType: ReadOnlyDictionary<string, FenceType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<string, TinyLife.Objects.FenceType>
  nameWithType.vb: ReadOnlyDictionary(Of String, FenceType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of String, TinyLife.Objects.FenceType)
  name.vb: ReadOnlyDictionary(Of String, FenceType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FenceType
    name: FenceType
    href: TinyLife.Objects.FenceType.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FenceType
    name: FenceType
    href: TinyLife.Objects.FenceType.html
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.Utilities.ColorSettings
  commentId: T:TinyLife.Utilities.ColorSettings
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.ColorSettings.html
  name: ColorSettings
  nameWithType: ColorSettings
  fullName: TinyLife.Utilities.ColorSettings
- uid: TinyLife.Objects.FenceType.TextureRegion
  commentId: F:TinyLife.Objects.FenceType.TextureRegion
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_TextureRegion
  name: TextureRegion
  nameWithType: FenceType.TextureRegion
  fullName: TinyLife.Objects.FenceType.TextureRegion
- uid: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
  commentId: T:System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<Point, TextureRegion>
  nameWithType: Dictionary<Point, TextureRegion>
  fullName: System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>
  nameWithType.vb: Dictionary(Of Point, TextureRegion)
  fullName.vb: System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion)
  name.vb: Dictionary(Of Point, TextureRegion)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Objects.FenceType.Textures
  commentId: F:TinyLife.Objects.FenceType.Textures
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_Textures
  name: Textures
  nameWithType: FenceType.Textures
  fullName: TinyLife.Objects.FenceType.Textures
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Objects.FenceType.#ctor*
  commentId: Overload:TinyLife.Objects.FenceType.#ctor
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType__ctor_System_String_System_Single_MLEM_Textures_TextureRegion_System_Collections_Generic_Dictionary_Microsoft_Xna_Framework_Point_MLEM_Textures_TextureRegion__Microsoft_Xna_Framework_Point_TinyLife_Utilities_ColorScheme___
  name: FenceType
  nameWithType: FenceType.FenceType
  fullName: TinyLife.Objects.FenceType.FenceType
  nameWithType.vb: FenceType.New
  fullName.vb: TinyLife.Objects.FenceType.New
  name.vb: New
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  href: TinyLife.Utilities.ColorScheme.html
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    href: TinyLife.Utilities.ColorScheme.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    href: TinyLife.Utilities.ColorScheme.html
  - name: (
  - name: )
- uid: TinyLife.Objects.FenceType.Colors
  commentId: F:TinyLife.Objects.FenceType.Colors
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_Colors
  name: Colors
  nameWithType: FenceType.Colors
  fullName: TinyLife.Objects.FenceType.Colors
- uid: TinyLife.Objects.WallLike.Positions
  commentId: F:TinyLife.Objects.WallLike.Positions
  parent: TinyLife.Objects.WallLike
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_Positions
  name: Positions
  nameWithType: WallLike.Positions
  fullName: TinyLife.Objects.WallLike.Positions
- uid: TinyLife.Objects.FenceType.Draw*
  commentId: Overload:TinyLife.Objects.FenceType.Draw
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_Draw_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_TinyLife_World_Map_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_System_Int32_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Single_System_Boolean_System_Boolean_System_Int32___MLEM_Maths_Direction2_System_Nullable_Microsoft_Xna_Framework_Color__
  name: Draw
  nameWithType: FenceType.Draw
  fullName: TinyLife.Objects.FenceType.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: MLEM.Maths.Direction2
  commentId: T:MLEM.Maths.Direction2
  parent: MLEM.Maths
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Maths.Direction2
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.WallLike.html
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: MLEM.Maths
  commentId: N:MLEM.Maths
  isExternal: true
  name: MLEM.Maths
  nameWithType: MLEM.Maths
  fullName: MLEM.Maths
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: TinyLife.Objects.FenceType.DrawUi*
  commentId: Overload:TinyLife.Objects.FenceType.DrawUi
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_DrawUi_MLEM_Ui_Elements_Element_Microsoft_Xna_Framework_Graphics_SpriteBatch_Microsoft_Xna_Framework_GameTime_TinyLife_World_Map_System_Int32___System_Single_
  name: DrawUi
  nameWithType: FenceType.DrawUi
  fullName: TinyLife.Objects.FenceType.DrawUi
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.Objects.FenceType.Types
  commentId: F:TinyLife.Objects.FenceType.Types
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_Types
  name: Types
  nameWithType: FenceType.Types
  fullName: TinyLife.Objects.FenceType.Types
- uid: TinyLife.Objects.FenceType.Register*
  commentId: Overload:TinyLife.Objects.FenceType.Register
  href: TinyLife.Objects.FenceType.html#TinyLife_Objects_FenceType_Register_TinyLife_Objects_FenceType_
  name: Register
  nameWithType: FenceType.Register
  fullName: TinyLife.Objects.FenceType.Register
- uid: TinyLife.Objects.FenceType
  commentId: T:TinyLife.Objects.FenceType
  parent: TinyLife.Objects
  href: TinyLife.Objects.FenceType.html
  name: FenceType
  nameWithType: FenceType
  fullName: TinyLife.Objects.FenceType
