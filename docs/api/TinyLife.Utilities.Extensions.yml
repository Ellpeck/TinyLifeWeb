### YamlMime:ManagedReference
items:
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  id: Extensions
  parent: TinyLife.Utilities
  children:
  - TinyLife.Utilities.Extensions.AddGamepadScrolling(MLEM.Ui.Elements.Panel)
  - TinyLife.Utilities.Extensions.AddHoverAnimation(MLEM.Ui.Elements.Button)
  - TinyLife.Utilities.Extensions.AddProgressArrows(MLEM.Ui.Elements.Element,System.Func{System.Single},System.Func{System.Single},System.Func{System.Single},System.Func{Microsoft.Xna.Framework.Color})
  - TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  - TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType,TinyLife.Actions.CompletionType)
  - TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  - TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType,TinyLife.Actions.CompletionType)
  - TinyLife.Utilities.Extensions.AppendIfAny``1(System.Collections.Generic.IEnumerable{``0},``0)
  - TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  - TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  - TinyLife.Utilities.Extensions.ConcatIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Maths.RectangleF,System.Single,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Func{Microsoft.Xna.Framework.Vector2,System.Single,System.Single},System.Nullable{System.Single})
  - TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Maths.RectangleF,System.Single,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Single)
  - TinyLife.Utilities.Extensions.Get(TinyLife.Utilities.DefaultSound)
  - TinyLife.Utilities.Extensions.GetBedCategories(TinyLife.Objects.AgeGroup)
  - TinyLife.Utilities.Extensions.GetChanceModifier(TinyLife.Skills.Quality)
  - TinyLife.Utilities.Extensions.GetDaysBeforeAging(TinyLife.Objects.AgeGroup,TinyLife.Objects.LifeSpan)
  - TinyLife.Utilities.Extensions.GetDecorativeRating(TinyLife.Skills.Quality)
  - TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  - TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  - TinyLife.Utilities.Extensions.GetDescription(TinyLife.Objects.ClothesIntention,System.Nullable{TinyLife.Objects.AgeGroup})
  - TinyLife.Utilities.Extensions.GetMostFittingStyle(TinyLife.Objects.PregnancyAbility)
  - TinyLife.Utilities.Extensions.GetMostFittingStyle(TinyLife.Objects.VoiceStyle)
  - TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  - TinyLife.Utilities.Extensions.GetPersonality(TinyLife.Skills.FoodType.FoodRestriction,TinyLife.Objects.PersonLike)
  - TinyLife.Utilities.Extensions.GetPregnancyHours(TinyLife.Objects.LifeSpan)
  - TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  - TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  - TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  - TinyLife.Utilities.Extensions.Icon(MLEM.Input.MouseButton)
  - TinyLife.Utilities.Extensions.Icon(Microsoft.Xna.Framework.Input.Buttons)
  - TinyLife.Utilities.Extensions.IsActiveRoot(MLEM.Ui.Elements.Element)
  - TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup,TinyLife.Objects.AgeGroup)
  - TinyLife.Utilities.Extensions.IsAvailableForAge(TinyLife.Objects.ClothesIntention,TinyLife.Objects.AgeGroup)
  - TinyLife.Utilities.Extensions.IsBetween(System.ValueTuple{System.Int32,System.Int32},System.Int32)
  - TinyLife.Utilities.Extensions.IsHorizontal(MLEM.Maths.Direction2)
  - TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.PersonLike,TinyLife.World.Lot)
  - TinyLife.Utilities.Extensions.IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  - TinyLife.Utilities.Extensions.IsTextFieldSelected(MLEM.Ui.UiSystem)
  - TinyLife.Utilities.Extensions.IsVertical(MLEM.Maths.Direction2)
  - TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  - TinyLife.Utilities.Extensions.Length(System.ValueTuple{System.Int32,System.Int32})
  - TinyLife.Utilities.Extensions.Multiplier(TinyLife.Objects.LifeSpan)
  - TinyLife.Utilities.Extensions.ObjectBindingFlags
  - TinyLife.Utilities.Extensions.PrependIfAny``1(System.Collections.Generic.IEnumerable{``0},``0)
  - TinyLife.Utilities.Extensions.ScreenContent(TinyLife.Objects.Television.Channel)
  - TinyLife.Utilities.Extensions.SetInWorldSnapping(MLEM.Ui.Elements.Tooltip)
  - TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement,System.Boolean)
  - TinyLife.Utilities.Extensions.Slugify(System.String)
  - TinyLife.Utilities.Extensions.ToLocalizedString(TinyLife.Skills.Quality)
  - TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Utilities.Extensions.ToSellingPriceString(System.Single)
  - TinyLife.Utilities.Extensions.ToSimpleLocalizedString(System.TimeSpan)
  - TinyLife.Utilities.Extensions.ToTimestampString(System.TimeSpan)
  - TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  - TinyLife.Utilities.Extensions.ToWorking(TinyLife.Objects.Pose)
  - TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean)
  - TinyLife.Utilities.Extensions.Weekday(System.TimeSpan)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
  type: Class
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: A set of extensions for dealing with various things required by Tiny Life.
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: TinyLife.Utilities.Extensions.ObjectBindingFlags
  commentId: F:TinyLife.Utilities.Extensions.ObjectBindingFlags
  id: ObjectBindingFlags
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ObjectBindingFlags
  nameWithType: Extensions.ObjectBindingFlags
  fullName: TinyLife.Utilities.Extensions.ObjectBindingFlags
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: The default bindings flags that are used when creating new instances of object types like <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref> etc.
  example: []
  syntax:
    content: public const BindingFlags ObjectBindingFlags = Instance | Public | NonPublic | CreateInstance | OptionalParamBinding
    return:
      type: System.Reflection.BindingFlags
    content.vb: Public Const ObjectBindingFlags As BindingFlags = Instance Or Public Or NonPublic Or CreateInstance Or OptionalParamBinding
- uid: TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Boolean)
  id: ToScreenPos(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToScreenPos(Vector2, float, bool, bool, bool)
  nameWithType: Extensions.ToScreenPos(Vector2, float, bool, bool, bool)
  fullName: TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2, float, bool, bool, bool)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Converts the given world-space position into a draw-space position
  example: []
  syntax:
    content: public static Vector2 ToScreenPos(this Vector2 position, float floor, bool center = false, bool applyCameraRotation = true, bool borderOffset = false)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position to convert
    - id: floor
      type: System.Single
      description: The floor that the position is on.
    - id: center
      type: System.Boolean
      description: If this is true, the position will be offset by half a tile, centering it on the screen
    - id: applyCameraRotation
      type: System.Boolean
      description: Whether the game's current <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref> should be applied using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Maths.Direction2%7d)" data-throw-if-not-resolved="false"></xref>
    - id: borderOffset
      type: System.Boolean
      description: Whether the map border offset should be applied to the camera rotation using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Maths.Direction2%7d)" data-throw-if-not-resolved="false"></xref>. This value only has an effect if <code class="paramref">applyCameraRotation</code> is true
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The draw-space position
    content.vb: Public Shared Function ToScreenPos(position As Vector2, floor As Single, center As Boolean = False, applyCameraRotation As Boolean = True, borderOffset As Boolean = False) As Vector2
  overload: TinyLife.Utilities.Extensions.ToScreenPos*
  nameWithType.vb: Extensions.ToScreenPos(Vector2, Single, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2, Single, Boolean, Boolean, Boolean)
  name.vb: ToScreenPos(Vector2, Single, Boolean, Boolean, Boolean)
- uid: TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean)
  commentId: M:TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean)
  id: ToWorldPos(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToWorldPos(Vector2, float, bool)
  nameWithType: Extensions.ToWorldPos(Vector2, float, bool)
  fullName: TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2, float, bool)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Converts the given draw-space position into a world-space position
  example: []
  syntax:
    content: public static Vector2 ToWorldPos(this Vector2 position, float floor, bool applyCameraRotation = true)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position to convert
    - id: floor
      type: System.Single
      description: The floor that the position is on.
    - id: applyCameraRotation
      type: System.Boolean
      description: Whether the game's current <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref> should be applied using <xref href="TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMLEM.Maths.Direction2%7d)" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The world-space position
    content.vb: Public Shared Function ToWorldPos(position As Vector2, floor As Single, applyCameraRotation As Boolean = True) As Vector2
  overload: TinyLife.Utilities.Extensions.ToWorldPos*
  nameWithType.vb: Extensions.ToWorldPos(Vector2, Single, Boolean)
  fullName.vb: TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2, Single, Boolean)
  name.vb: ToWorldPos(Vector2, Single, Boolean)
- uid: TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  id: ToVisualY(Microsoft.Xna.Framework.Vector2)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToVisualY(Vector2)
  nameWithType: Extensions.ToVisualY(Vector2)
  fullName: TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns the given offset, but translated based on the game's current <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref>.

    For any vector that is passed to this method, the translation that it represents will not be based on cardinal directions, but on directions related to the screen's orientation.
  example: []
  syntax:
    content: public static Vector2 ToVisualY(this Vector2 pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to turn into a visual y position
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The given position translated into virtual y space
    content.vb: Public Shared Function ToVisualY(pos As Vector2) As Vector2
  overload: TinyLife.Utilities.Extensions.ToVisualY*
- uid: TinyLife.Utilities.Extensions.IsVertical(MLEM.Maths.Direction2)
  commentId: M:TinyLife.Utilities.Extensions.IsVertical(MLEM.Maths.Direction2)
  id: IsVertical(MLEM.Maths.Direction2)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsVertical(Direction2)
  nameWithType: Extensions.IsVertical(Direction2)
  fullName: TinyLife.Utilities.Extensions.IsVertical(MLEM.Maths.Direction2)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns whether the passed direction is considered vertical.

    A vertical direction is <xref href="MLEM.Maths.Direction2.Up" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Maths.Direction2.Down" data-throw-if-not-resolved="false"></xref>. All other directions return false.
  example: []
  syntax:
    content: public static bool IsVertical(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Maths.Direction2
      description: The direction to check verticalness for
    return:
      type: System.Boolean
      description: Whether or not the direction is vertical
    content.vb: Public Shared Function IsVertical(dir As Direction2) As Boolean
  overload: TinyLife.Utilities.Extensions.IsVertical*
- uid: TinyLife.Utilities.Extensions.IsHorizontal(MLEM.Maths.Direction2)
  commentId: M:TinyLife.Utilities.Extensions.IsHorizontal(MLEM.Maths.Direction2)
  id: IsHorizontal(MLEM.Maths.Direction2)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsHorizontal(Direction2)
  nameWithType: Extensions.IsHorizontal(Direction2)
  fullName: TinyLife.Utilities.Extensions.IsHorizontal(MLEM.Maths.Direction2)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns whether the passed direction is considered horizontal.

    A horizontal direction is <xref href="MLEM.Maths.Direction2.Left" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Maths.Direction2.Right" data-throw-if-not-resolved="false"></xref>. All other directions return false.
  example: []
  syntax:
    content: public static bool IsHorizontal(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Maths.Direction2
      description: The direction to check horizontalness for
    return:
      type: System.Boolean
      description: Whether or not the direction is horizontal
    content.vb: Public Shared Function IsHorizontal(dir As Direction2) As Boolean
  overload: TinyLife.Utilities.Extensions.IsHorizontal*
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  id: JsonCopy``1(``0)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Copies the given object using a <xref href="Newtonsoft.Json.JsonSerializer" data-throw-if-not-resolved="false"></xref> created using <xref href="TinyLife.SaveHandler.CreateSerializerSettings(TinyLife.SerializerContext%2cTinyLife.SerializerUsage%2cSystem.EventHandler%7bNewtonsoft.Json.Serialization.ErrorEventArgs%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static T JsonCopy<T>(this T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: The object to copy
    typeParameters:
    - id: T
      description: The type of the object
    return:
      type: '{T}'
      description: A copy of the object
    content.vb: Public Shared Function JsonCopy(Of T)(obj As T) As T
  overload: TinyLife.Utilities.Extensions.JsonCopy*
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
- uid: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  id: GetPriceModifier(TinyLife.Skills.Quality)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetPriceModifier(Quality)
  nameWithType: Extensions.GetPriceModifier(Quality)
  fullName: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns a multiplier that an object's price should be multiplied with based on the given <xref href="TinyLife.Skills.Quality" data-throw-if-not-resolved="false"></xref>.

    The returned values are as follows:

    <xref href="TinyLife.Skills.Quality.Terrible" data-throw-if-not-resolved="false"></xref>: 0.5,

    <xref href="TinyLife.Skills.Quality.Good" data-throw-if-not-resolved="false"></xref>: 1.5,

    <xref href="TinyLife.Skills.Quality.Great" data-throw-if-not-resolved="false"></xref>: 2,

    <xref href="TinyLife.Skills.Quality.Perfect" data-throw-if-not-resolved="false"></xref>: 3,

    <xref href="TinyLife.Skills.Quality.Masterpiece" data-throw-if-not-resolved="false"></xref>: 5,

    Else: 1.
  example: []
  syntax:
    content: public static float GetPriceModifier(this Quality quality)
    parameters:
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality to query
    return:
      type: System.Single
      description: The price modifier for the object
    content.vb: Public Shared Function GetPriceModifier(quality As Quality) As Single
  overload: TinyLife.Utilities.Extensions.GetPriceModifier*
- uid: TinyLife.Utilities.Extensions.GetDecorativeRating(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.GetDecorativeRating(TinyLife.Skills.Quality)
  id: GetDecorativeRating(TinyLife.Skills.Quality)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDecorativeRating(Quality)
  nameWithType: Extensions.GetDecorativeRating(Quality)
  fullName: TinyLife.Utilities.Extensions.GetDecorativeRating(TinyLife.Skills.Quality)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns the decorative rating of an object with the given <xref href="TinyLife.Skills.Quality" data-throw-if-not-resolved="false"></xref>.

    The returned values are as follows:

    <xref href="TinyLife.Skills.Quality.Terrible" data-throw-if-not-resolved="false"></xref>: -2,

    <xref href="TinyLife.Skills.Quality.Good" data-throw-if-not-resolved="false"></xref>: 1,

    <xref href="TinyLife.Skills.Quality.Great" data-throw-if-not-resolved="false"></xref>: 1,

    <xref href="TinyLife.Skills.Quality.Perfect" data-throw-if-not-resolved="false"></xref>: 2,

    <xref href="TinyLife.Skills.Quality.Masterpiece" data-throw-if-not-resolved="false"></xref>: 3,

    Else: 0.
  example: []
  syntax:
    content: public static int GetDecorativeRating(this Quality quality)
    parameters:
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality to query
    return:
      type: System.Int32
      description: The decorative rating for this quality
    content.vb: Public Shared Function GetDecorativeRating(quality As Quality) As Integer
  overload: TinyLife.Utilities.Extensions.GetDecorativeRating*
- uid: TinyLife.Utilities.Extensions.GetChanceModifier(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.GetChanceModifier(TinyLife.Skills.Quality)
  id: GetChanceModifier(TinyLife.Skills.Quality)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetChanceModifier(Quality)
  nameWithType: Extensions.GetChanceModifier(Quality)
  fullName: TinyLife.Utilities.Extensions.GetChanceModifier(TinyLife.Skills.Quality)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns a chance modifier for the given <xref href="TinyLife.Skills.Quality" data-throw-if-not-resolved="false"></xref>, which is always greater than 0 and less than or equal to 1.

    This is useful for calculating the chance of something happening based on the quality of an object.

    The returned values are as follows:

    <xref href="TinyLife.Skills.Quality.Terrible" data-throw-if-not-resolved="false"></xref>: 0.05,

    <xref href="TinyLife.Skills.Quality.Good" data-throw-if-not-resolved="false"></xref>: 0.55,

    <xref href="TinyLife.Skills.Quality.Great" data-throw-if-not-resolved="false"></xref>: 0.75,

    <xref href="TinyLife.Skills.Quality.Perfect" data-throw-if-not-resolved="false"></xref>: 0.9,

    <xref href="TinyLife.Skills.Quality.Masterpiece" data-throw-if-not-resolved="false"></xref>: 1,

    Else: 0.4.
  example: []
  syntax:
    content: public static float GetChanceModifier(this Quality quality)
    parameters:
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality to query
    return:
      type: System.Single
      description: The chance modifier for this quality
    content.vb: Public Shared Function GetChanceModifier(quality As Quality) As Single
  overload: TinyLife.Utilities.Extensions.GetChanceModifier*
- uid: TinyLife.Utilities.Extensions.ToLocalizedString(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.ToLocalizedString(TinyLife.Skills.Quality)
  id: ToLocalizedString(TinyLife.Skills.Quality)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToLocalizedString(Quality)
  nameWithType: Extensions.ToLocalizedString(Quality)
  fullName: TinyLife.Utilities.Extensions.ToLocalizedString(TinyLife.Skills.Quality)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns a localized string for the given <xref href="TinyLife.Skills.Quality" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static string ToLocalizedString(this Quality quality)
    parameters:
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality
    return:
      type: System.String
      description: A localized string representing the quality
    content.vb: Public Shared Function ToLocalizedString(quality As Quality) As String
  overload: TinyLife.Utilities.Extensions.ToLocalizedString*
- uid: TinyLife.Utilities.Extensions.ToSellingPriceString(System.Single)
  commentId: M:TinyLife.Utilities.Extensions.ToSellingPriceString(System.Single)
  id: ToSellingPriceString(System.Single)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToSellingPriceString(float)
  nameWithType: Extensions.ToSellingPriceString(float)
  fullName: TinyLife.Utilities.Extensions.ToSellingPriceString(float)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns a localized string that says "Sells for", followed by the passed <code class="paramref">value</code> in tiny bucks
  example: []
  syntax:
    content: public static string ToSellingPriceString(this float value)
    parameters:
    - id: value
      type: System.Single
      description: The value to display
    return:
      type: System.String
      description: A selling price string that contains the value, in tiny bucks
    content.vb: Public Shared Function ToSellingPriceString(value As Single) As String
  overload: TinyLife.Utilities.Extensions.ToSellingPriceString*
  nameWithType.vb: Extensions.ToSellingPriceString(Single)
  fullName.vb: TinyLife.Utilities.Extensions.ToSellingPriceString(Single)
  name.vb: ToSellingPriceString(Single)
- uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  commentId: M:TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  id: BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: BothValid(CanExecuteResult, Func<CanExecuteResult>)
  nameWithType: Extensions.BothValid(CanExecuteResult, Func<CanExecuteResult>)
  fullName: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult, System.Func<TinyLife.Actions.CanExecuteResult>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    A helper method to return <xref href="TinyLife.Actions.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> only if both passed <xref href="TinyLife.Actions.CanExecuteResult" data-throw-if-not-resolved="false"></xref> values are <xref href="TinyLife.Actions.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref>.

    If this is not the case, the validity of the <code class="paramref">result</code> is returned if it is not <xref href="TinyLife.Actions.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref>, and otherwise, the validity of the <code class="paramref">other</code> is returned.
  example: []
  syntax:
    content: public static CanExecuteResult BothValid(this CanExecuteResult result, Func<CanExecuteResult> other)
    parameters:
    - id: result
      type: TinyLife.Actions.CanExecuteResult
      description: The first result
    - id: other
      type: System.Func{TinyLife.Actions.CanExecuteResult}
      description: The second result
    return:
      type: TinyLife.Actions.CanExecuteResult
      description: The validity of both results
    content.vb: Public Shared Function BothValid(result As CanExecuteResult, other As Func(Of CanExecuteResult)) As CanExecuteResult
  overload: TinyLife.Utilities.Extensions.BothValid*
  nameWithType.vb: Extensions.BothValid(CanExecuteResult, Func(Of CanExecuteResult))
  fullName.vb: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult, System.Func(Of TinyLife.Actions.CanExecuteResult))
  name.vb: BothValid(CanExecuteResult, Func(Of CanExecuteResult))
- uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  commentId: M:TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  id: BothValid(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: BothValid(CanExecuteResult, CanExecuteResult)
  nameWithType: Extensions.BothValid(CanExecuteResult, CanExecuteResult)
  fullName: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult, TinyLife.Actions.CanExecuteResult)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    A helper method to return <xref href="TinyLife.Actions.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> only if both passed <xref href="TinyLife.Actions.CanExecuteResult" data-throw-if-not-resolved="false"></xref> values are <xref href="TinyLife.Actions.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref>.

    If this is not the case, the validity of the <code class="paramref">result</code> is returned if it is not <xref href="TinyLife.Actions.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref>, and otherwise, the validity of the <code class="paramref">other</code> is returned.
  example: []
  syntax:
    content: public static CanExecuteResult BothValid(this CanExecuteResult result, CanExecuteResult other)
    parameters:
    - id: result
      type: TinyLife.Actions.CanExecuteResult
      description: The first result
    - id: other
      type: TinyLife.Actions.CanExecuteResult
      description: The second result
    return:
      type: TinyLife.Actions.CanExecuteResult
      description: The validity of both results
    content.vb: Public Shared Function BothValid(result As CanExecuteResult, other As CanExecuteResult) As CanExecuteResult
  overload: TinyLife.Utilities.Extensions.BothValid*
- uid: TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  commentId: M:TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  id: AnyActive(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AnyActive(CompletionType, Func<CompletionType>)
  nameWithType: Extensions.AnyActive(CompletionType, Func<CompletionType>)
  fullName: TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType, System.Func<TinyLife.Actions.CompletionType>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    A helper method to return <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if one of the completion types is <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.

    If this is not the case, the first completion type that is different is returned.
  example: []
  syntax:
    content: public static CompletionType AnyActive(this CompletionType type, Func<CompletionType> other)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The first completion type
    - id: other
      type: System.Func{TinyLife.Actions.CompletionType}
      description: A function to gather the second completion type
    return:
      type: TinyLife.Actions.CompletionType
      description: <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if one of the completion types is <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>, or the <code class="paramref">other</code>'s completion type
    content.vb: Public Shared Function AnyActive(type As CompletionType, other As Func(Of CompletionType)) As CompletionType
  overload: TinyLife.Utilities.Extensions.AnyActive*
  nameWithType.vb: Extensions.AnyActive(CompletionType, Func(Of CompletionType))
  fullName.vb: TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType, System.Func(Of TinyLife.Actions.CompletionType))
  name.vb: AnyActive(CompletionType, Func(Of CompletionType))
- uid: TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType,TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType,TinyLife.Actions.CompletionType)
  id: AnyActive(TinyLife.Actions.CompletionType,TinyLife.Actions.CompletionType)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AnyActive(CompletionType, CompletionType)
  nameWithType: Extensions.AnyActive(CompletionType, CompletionType)
  fullName: TinyLife.Utilities.Extensions.AnyActive(TinyLife.Actions.CompletionType, TinyLife.Actions.CompletionType)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    A helper method to return <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if one of the completion types is <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.

    If this is not the case, the first completion type that is different is returned.
  example: []
  syntax:
    content: public static CompletionType AnyActive(this CompletionType type, CompletionType other)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The first completion type
    - id: other
      type: TinyLife.Actions.CompletionType
      description: A function to gather the second completion type
    return:
      type: TinyLife.Actions.CompletionType
      description: <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if one of the completion types is <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>, or the <code class="paramref">other</code>'s completion type
    content.vb: Public Shared Function AnyActive(type As CompletionType, other As CompletionType) As CompletionType
  overload: TinyLife.Utilities.Extensions.AnyActive*
- uid: TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  commentId: M:TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  id: AnyInactive(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AnyInactive(CompletionType, Func<CompletionType>)
  nameWithType: Extensions.AnyInactive(CompletionType, Func<CompletionType>)
  fullName: TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType, System.Func<TinyLife.Actions.CompletionType>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    A helper method to return <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if both of the completion types are <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.

    If this is not the case, the first completion type that is different is returned.
  example: []
  syntax:
    content: public static CompletionType AnyInactive(this CompletionType type, Func<CompletionType> other)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The first completion type
    - id: other
      type: System.Func{TinyLife.Actions.CompletionType}
      description: A function to gather the second completion type
    return:
      type: TinyLife.Actions.CompletionType
      description: The first non-active completion type, or <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if there is none
    content.vb: Public Shared Function AnyInactive(type As CompletionType, other As Func(Of CompletionType)) As CompletionType
  overload: TinyLife.Utilities.Extensions.AnyInactive*
  nameWithType.vb: Extensions.AnyInactive(CompletionType, Func(Of CompletionType))
  fullName.vb: TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType, System.Func(Of TinyLife.Actions.CompletionType))
  name.vb: AnyInactive(CompletionType, Func(Of CompletionType))
- uid: TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType,TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType,TinyLife.Actions.CompletionType)
  id: AnyInactive(TinyLife.Actions.CompletionType,TinyLife.Actions.CompletionType)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AnyInactive(CompletionType, CompletionType)
  nameWithType: Extensions.AnyInactive(CompletionType, CompletionType)
  fullName: TinyLife.Utilities.Extensions.AnyInactive(TinyLife.Actions.CompletionType, TinyLife.Actions.CompletionType)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    A helper method to return <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if both of the completion types are <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.

    If this is not the case, the first completion type that is different is returned.
  example: []
  syntax:
    content: public static CompletionType AnyInactive(this CompletionType type, CompletionType other)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The first completion type
    - id: other
      type: TinyLife.Actions.CompletionType
      description: A function to gather the second completion type
    return:
      type: TinyLife.Actions.CompletionType
      description: The first non-active completion type, or <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if there is none
    content.vb: Public Shared Function AnyInactive(type As CompletionType, other As CompletionType) As CompletionType
  overload: TinyLife.Utilities.Extensions.AnyInactive*
- uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  commentId: M:TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  id: GetOpposite(TinyLife.GenealogyType)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetOpposite(GenealogyType)
  nameWithType: Extensions.GetOpposite(GenealogyType)
  fullName: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns the opposite of the given <xref href="TinyLife.GenealogyType" data-throw-if-not-resolved="false"></xref>.

    The "opposite" is the relationship that the other partner of this <xref href="TinyLife.GenealogyType" data-throw-if-not-resolved="false"></xref> will have.

    For example, the opposite of <xref href="TinyLife.GenealogyType.Parent" data-throw-if-not-resolved="false"></xref> is <xref href="TinyLife.GenealogyType.Child" data-throw-if-not-resolved="false"></xref> and vice versa.
  example: []
  syntax:
    content: public static GenealogyType GetOpposite(this GenealogyType type)
    parameters:
    - id: type
      type: TinyLife.GenealogyType
      description: The genealogy type
    return:
      type: TinyLife.GenealogyType
      description: The genealogy type's opposite
    content.vb: Public Shared Function GetOpposite(type As GenealogyType) As GenealogyType
  overload: TinyLife.Utilities.Extensions.GetOpposite*
- uid: TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  commentId: M:TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  id: GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetTransitive(GenealogyType, GenealogyType)
  nameWithType: Extensions.GetTransitive(GenealogyType, GenealogyType)
  fullName: TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType, TinyLife.GenealogyType)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Given the <xref href="TinyLife.GenealogyType" data-throw-if-not-resolved="false"></xref> of two relationships, returns the transitive genealogy that results from the two given genealogies.

    The given genealogies are the ones in relationships between <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> A and B, and B and C, respectively. The returned <xref href="TinyLife.GenealogyType" data-throw-if-not-resolved="false"></xref> is the genealogy between <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> A and C.

    If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> is returned, the transitive genealogy cannot reliably be gathered from the given information.
  example: []
  syntax:
    content: public static GenealogyType? GetTransitive(this GenealogyType aToB, GenealogyType bToC)
    parameters:
    - id: aToB
      type: TinyLife.GenealogyType
      description: The genealogy between A and B.
    - id: bToC
      type: TinyLife.GenealogyType
      description: The genealogy between B and C.
    return:
      type: System.Nullable{TinyLife.GenealogyType}
      description: The genealogy between A and C, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if the genealogy cannot be reliably gathered.
    content.vb: Public Shared Function GetTransitive(aToB As GenealogyType, bToC As GenealogyType) As GenealogyType?
  overload: TinyLife.Utilities.Extensions.GetTransitive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If any undefined <xref href="TinyLife.GenealogyType" data-throw-if-not-resolved="false"></xref> is passed as a parameter.
- uid: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup,TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup,TinyLife.Objects.AgeGroup)
  id: IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup,TinyLife.Objects.AgeGroup)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsAgeAppropriate(GenealogyType, AgeGroup, AgeGroup)
  nameWithType: Extensions.IsAgeAppropriate(GenealogyType, AgeGroup, AgeGroup)
  fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType, TinyLife.Objects.AgeGroup, TinyLife.Objects.AgeGroup)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns whether the given <xref href="TinyLife.GenealogyType" data-throw-if-not-resolved="false"></xref> is appropriate for a relationship between the given <xref href="TinyLife.Objects.AgeGroup" data-throw-if-not-resolved="false"></xref> values.
  example: []
  syntax:
    content: public static bool IsAgeAppropriate(this GenealogyType type, AgeGroup myAge, AgeGroup otherAge)
    parameters:
    - id: type
      type: TinyLife.GenealogyType
      description: The genealogy type in question
    - id: myAge
      type: TinyLife.Objects.AgeGroup
      description: The age group of the person that should have the <code class="paramref">type</code>.
    - id: otherAge
      type: TinyLife.Objects.AgeGroup
      description: The age group of the other person.
    return:
      type: System.Boolean
      description: Whether the given genealogy type is appropriate for the given age
    content.vb: Public Shared Function IsAgeAppropriate(type As GenealogyType, myAge As AgeGroup, otherAge As AgeGroup) As Boolean
  overload: TinyLife.Utilities.Extensions.IsAgeAppropriate*
- uid: TinyLife.Utilities.Extensions.ToWorking(TinyLife.Objects.Pose)
  commentId: M:TinyLife.Utilities.Extensions.ToWorking(TinyLife.Objects.Pose)
  id: ToWorking(TinyLife.Objects.Pose)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToWorking(Pose)
  nameWithType: Extensions.ToWorking(Pose)
  fullName: TinyLife.Utilities.Extensions.ToWorking(TinyLife.Objects.Pose)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Converts the given <xref href="TinyLife.Objects.Pose" data-throw-if-not-resolved="false"></xref> to a version in which a person is looking as if they were working on something.

    For all standing poses, this returns <xref href="TinyLife.Objects.Pose.WorkingStanding" data-throw-if-not-resolved="false"></xref>, and for all sitting poses, <xref href="TinyLife.Objects.Pose.WorkingSitting" data-throw-if-not-resolved="false"></xref> is returned.

    If a pose has no working variant, the pose itself is returned.
  example: []
  syntax:
    content: public static Pose ToWorking(this Pose pose)
    parameters:
    - id: pose
      type: TinyLife.Objects.Pose
      description: The pose to convert to a working pose
    return:
      type: TinyLife.Objects.Pose
      description: The working version of the given pose
    content.vb: Public Shared Function ToWorking(pose As Pose) As Pose
  overload: TinyLife.Utilities.Extensions.ToWorking*
- uid: TinyLife.Utilities.Extensions.AddHoverAnimation(MLEM.Ui.Elements.Button)
  commentId: M:TinyLife.Utilities.Extensions.AddHoverAnimation(MLEM.Ui.Elements.Button)
  id: AddHoverAnimation(MLEM.Ui.Elements.Button)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AddHoverAnimation(Button)
  nameWithType: Extensions.AddHoverAnimation(Button)
  fullName: TinyLife.Utilities.Extensions.AddHoverAnimation(MLEM.Ui.Elements.Button)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Adds a hover animation to the given <xref href="MLEM.Ui.Elements.Button" data-throw-if-not-resolved="false"></xref>.

    The hover animation will automatically start playing when the mouse enters the button.
  example: []
  syntax:
    content: public static Button AddHoverAnimation(this Button button)
    parameters:
    - id: button
      type: MLEM.Ui.Elements.Button
      description: The button to add the hover animation to
    return:
      type: MLEM.Ui.Elements.Button
      description: The button, for chaining
    content.vb: Public Shared Function AddHoverAnimation(button As Button) As Button
  overload: TinyLife.Utilities.Extensions.AddHoverAnimation*
- uid: TinyLife.Utilities.Extensions.ToSimpleLocalizedString(System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.ToSimpleLocalizedString(System.TimeSpan)
  id: ToSimpleLocalizedString(System.TimeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToSimpleLocalizedString(TimeSpan)
  nameWithType: Extensions.ToSimpleLocalizedString(TimeSpan)
  fullName: TinyLife.Utilities.Extensions.ToSimpleLocalizedString(System.TimeSpan)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns a string, localized using <xref href="TinyLife.Localization" data-throw-if-not-resolved="false"></xref>, that represents the largest value of the time span.

    If the time span includes multiple days, a string representing just days is returned. Otherwise, the full hours are returned, and otherwise, the full minutes are returned.
  example: []
  syntax:
    content: public static string ToSimpleLocalizedString(this TimeSpan time)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The time to localize
    return:
      type: System.String
      description: A simple localized string for the time span
    content.vb: Public Shared Function ToSimpleLocalizedString(time As TimeSpan) As String
  overload: TinyLife.Utilities.Extensions.ToSimpleLocalizedString*
- uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  id: GetDefaultTab(TinyLife.Objects.ObjectCategory)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDefaultTab(ObjectCategory)
  nameWithType: Extensions.GetDefaultTab(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns the default <xref href="TinyLife.Tools.FurnitureTool.Tab" data-throw-if-not-resolved="false"></xref> flags that the given <xref href="TinyLife.Objects.ObjectCategory" data-throw-if-not-resolved="false"></xref> flag combination should be sorted into
  example: []
  syntax:
    content: public static FurnitureTool.Tab GetDefaultTab(this ObjectCategory categories)
    parameters:
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that an object has
    return:
      type: TinyLife.Tools.FurnitureTool.Tab
      description: The tabs most fitting for the object
    content.vb: Public Shared Function GetDefaultTab(categories As ObjectCategory) As FurnitureTool.Tab
  overload: TinyLife.Utilities.Extensions.GetDefaultTab*
- uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  id: GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDefaultDirtyOverlayTextureName(ObjectCategory)
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns the default <xref href="TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName" data-throw-if-not-resolved="false"></xref> to use for the given set of <xref href="TinyLife.Objects.ObjectCategory" data-throw-if-not-resolved="false"></xref> flags.

    If none of the flags match a default overlay texture, this method will return null.
  example: []
  syntax:
    content: public static string GetDefaultDirtyOverlayTextureName(this ObjectCategory category)
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
      description: The categories to get the default texture for
    return:
      type: System.String
      description: The default texture
    content.vb: Public Shared Function GetDefaultDirtyOverlayTextureName(category As ObjectCategory) As String
  overload: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName*
- uid: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.PersonLike,TinyLife.World.Lot)
  commentId: M:TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.PersonLike,TinyLife.World.Lot)
  id: IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.PersonLike,TinyLife.World.Lot)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsLockedFor(LockType, PersonLike, Lot)
  nameWithType: Extensions.IsLockedFor(LockType, PersonLike, Lot)
  fullName: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType, TinyLife.Objects.PersonLike, TinyLife.World.Lot)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns whether the given <xref href="TinyLife.World.LockType" data-throw-if-not-resolved="false"></xref> is considered "locked" for the given <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> on the given <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static bool IsLockedFor(this LockType type, PersonLike person, Lot lot)
    parameters:
    - id: type
      type: TinyLife.World.LockType
      description: The lock type to query
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person to query
    - id: lot
      type: TinyLife.World.Lot
      description: The lot that the object locked with the given <code class="paramref">type</code> is on
    return:
      type: System.Boolean
      description: Whether the lock type is considered locked for the person
    content.vb: Public Shared Function IsLockedFor(type As LockType, person As PersonLike, lot As Lot) As Boolean
  overload: TinyLife.Utilities.Extensions.IsLockedFor*
- uid: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Maths.RectangleF,System.Single,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Maths.RectangleF,System.Single,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Single)
  id: DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Maths.RectangleF,System.Single,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Single)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: DrawIsoArea(SpriteBatch, RectangleF, float, Color, int, bool, float)
  nameWithType: Extensions.DrawIsoArea(SpriteBatch, RectangleF, float, Color, int, bool, float)
  fullName: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Maths.RectangleF, float, Microsoft.Xna.Framework.Color, int, bool, float)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Draws an isometric rectangle with the given data using a pixelated tile texture.
  example: []
  syntax:
    content: public static void DrawIsoArea(this SpriteBatch batch, RectangleF area, float floor, Color color, int thickness, bool showSize, float depth)
    parameters:
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: area
      type: MLEM.Maths.RectangleF
      description: The area, in world space, to draw a rectangle around
    - id: floor
      type: System.Single
      description: The floor the area is on.
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color that the rectangle should have
    - id: thickness
      type: System.Int32
      description: The thickness of the line to draw, in pixels.
    - id: showSize
      type: System.Boolean
      description: Whether the rectangle's size in world tiles should be displayed on the screen as a string in the center of the drawn rectangle
    - id: depth
      type: System.Single
      description: The depth that the area should have.
    content.vb: Public Shared Sub DrawIsoArea(batch As SpriteBatch, area As RectangleF, floor As Single, color As Color, thickness As Integer, showSize As Boolean, depth As Single)
  overload: TinyLife.Utilities.Extensions.DrawIsoArea*
  nameWithType.vb: Extensions.DrawIsoArea(SpriteBatch, RectangleF, Single, Color, Integer, Boolean, Single)
  fullName.vb: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Maths.RectangleF, Single, Microsoft.Xna.Framework.Color, Integer, Boolean, Single)
  name.vb: DrawIsoArea(SpriteBatch, RectangleF, Single, Color, Integer, Boolean, Single)
- uid: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Maths.RectangleF,System.Single,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Func{Microsoft.Xna.Framework.Vector2,System.Single,System.Single},System.Nullable{System.Single})
  commentId: M:TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Maths.RectangleF,System.Single,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Func{Microsoft.Xna.Framework.Vector2,System.Single,System.Single},System.Nullable{System.Single})
  id: DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Maths.RectangleF,System.Single,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Func{Microsoft.Xna.Framework.Vector2,System.Single,System.Single},System.Nullable{System.Single})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: DrawIsoArea(SpriteBatch, RectangleF, float, Color, int, bool, Func<Vector2, float, float>, float?)
  nameWithType: Extensions.DrawIsoArea(SpriteBatch, RectangleF, float, Color, int, bool, Func<Vector2, float, float>, float?)
  fullName: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Maths.RectangleF, float, Microsoft.Xna.Framework.Color, int, bool, System.Func<Microsoft.Xna.Framework.Vector2, float, float>, float?)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Draws an isometric rectangle with the given data using a pixelated tile texture.
  example: []
  syntax:
    content: public static void DrawIsoArea(this SpriteBatch batch, RectangleF area, float floor, Color color, int thickness, bool showSize = false, Func<Vector2, float, float> depth = null, float? defaultDepth = null)
    parameters:
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: area
      type: MLEM.Maths.RectangleF
      description: The area, in world space, to draw a rectangle around
    - id: floor
      type: System.Single
      description: The floor the area is on.
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color that the rectangle should have
    - id: thickness
      type: System.Int32
      description: The thickness of the line to draw, in pixels.
    - id: showSize
      type: System.Boolean
      description: Whether the rectangle's size in world tiles should be displayed on the screen as a string in the center of the drawn rectangle
    - id: depth
      type: System.Func{Microsoft.Xna.Framework.Vector2,System.Single,System.Single}
      description: An optional function that returns depth that each position should have.
    - id: defaultDepth
      type: System.Nullable{System.Single}
      description: The default depth to use if <code class="paramref">depth</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public Shared Sub DrawIsoArea(batch As SpriteBatch, area As RectangleF, floor As Single, color As Color, thickness As Integer, showSize As Boolean = False, depth As Func(Of Vector2, Single, Single) = Nothing, defaultDepth As Single? = Nothing)
  overload: TinyLife.Utilities.Extensions.DrawIsoArea*
  nameWithType.vb: Extensions.DrawIsoArea(SpriteBatch, RectangleF, Single, Color, Integer, Boolean, Func(Of Vector2, Single, Single), Single?)
  fullName.vb: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Maths.RectangleF, Single, Microsoft.Xna.Framework.Color, Integer, Boolean, System.Func(Of Microsoft.Xna.Framework.Vector2, Single, Single), Single?)
  name.vb: DrawIsoArea(SpriteBatch, RectangleF, Single, Color, Integer, Boolean, Func(Of Vector2, Single, Single), Single?)
- uid: TinyLife.Utilities.Extensions.IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  commentId: M:TinyLife.Utilities.Extensions.IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  id: IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsPartOfPerson(ClothesLayer)
  nameWithType: Extensions.IsPartOfPerson(ClothesLayer)
  fullName: TinyLife.Utilities.Extensions.IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns whether the given <xref href="TinyLife.Objects.ClothesLayer" data-throw-if-not-resolved="false"></xref> is part of a person physically.

    This methdo returns true for <xref href="TinyLife.Objects.ClothesLayer.Body" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.ClothesLayer.Eyes" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool IsPartOfPerson(this ClothesLayer layer)
    parameters:
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The clothes layer
    return:
      type: System.Boolean
      description: Whether the clothes layer is part of the person
    content.vb: Public Shared Function IsPartOfPerson(layer As ClothesLayer) As Boolean
  overload: TinyLife.Utilities.Extensions.IsPartOfPerson*
- uid: TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement,System.Boolean)
  commentId: M:TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement,System.Boolean)
  id: SetPauseGame(MLEM.Ui.RootElement,System.Boolean)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: SetPauseGame(RootElement, bool)
  nameWithType: Extensions.SetPauseGame(RootElement, bool)
  fullName: TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement, bool)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Sets a flag for a <xref href="MLEM.Ui.RootElement" data-throw-if-not-resolved="false"></xref> that causes it to pause the game if it is displayed
  example: []
  syntax:
    content: public static RootElement SetPauseGame(this RootElement root, bool value = true)
    parameters:
    - id: root
      type: MLEM.Ui.RootElement
      description: The root element that should pause the game
    - id: value
      type: System.Boolean
      description: Whether the element should pause the game
    return:
      type: MLEM.Ui.RootElement
      description: The root element passed, for chaining
    content.vb: Public Shared Function SetPauseGame(root As RootElement, value As Boolean = True) As RootElement
  overload: TinyLife.Utilities.Extensions.SetPauseGame*
  nameWithType.vb: Extensions.SetPauseGame(RootElement, Boolean)
  fullName.vb: TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement, Boolean)
  name.vb: SetPauseGame(RootElement, Boolean)
- uid: TinyLife.Utilities.Extensions.IsActiveRoot(MLEM.Ui.Elements.Element)
  commentId: M:TinyLife.Utilities.Extensions.IsActiveRoot(MLEM.Ui.Elements.Element)
  id: IsActiveRoot(MLEM.Ui.Elements.Element)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsActiveRoot(Element)
  nameWithType: Extensions.IsActiveRoot(Element)
  fullName: TinyLife.Utilities.Extensions.IsActiveRoot(MLEM.Ui.Elements.Element)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns whether the given <xref href="MLEM.Ui.Elements.Element" data-throw-if-not-resolved="false"></xref> is currently considered to be part of the active <xref href="MLEM.Ui.RootElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool IsActiveRoot(this Element element)
    parameters:
    - id: element
      type: MLEM.Ui.Elements.Element
      description: The element to query.
    return:
      type: System.Boolean
      description: Whether the element is part of the active root.
    content.vb: Public Shared Function IsActiveRoot(element As Element) As Boolean
  overload: TinyLife.Utilities.Extensions.IsActiveRoot*
- uid: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  id: GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetRequiredMatchPercentage(ClothesIntention)
  nameWithType: Extensions.GetRequiredMatchPercentage(ClothesIntention)
  fullName: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns the percentage that an <xref href="TinyLife.Objects.Outfit" data-throw-if-not-resolved="false"></xref> has to match the given <xref href="TinyLife.Objects.ClothesIntention" data-throw-if-not-resolved="false"></xref> for it to be allowed to be used for an outfit.

    To find the current percentage of an <xref href="TinyLife.Objects.Outfit" data-throw-if-not-resolved="false"></xref>, use <xref href="TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static float GetRequiredMatchPercentage(this ClothesIntention intention)
    parameters:
    - id: intention
      type: TinyLife.Objects.ClothesIntention
      description: The intention to query.
    return:
      type: System.Single
      description: The percentage that the intention needs to match for it to be allowed.
    content.vb: Public Shared Function GetRequiredMatchPercentage(intention As ClothesIntention) As Single
  overload: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage*
- uid: TinyLife.Utilities.Extensions.IsAvailableForAge(TinyLife.Objects.ClothesIntention,TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Utilities.Extensions.IsAvailableForAge(TinyLife.Objects.ClothesIntention,TinyLife.Objects.AgeGroup)
  id: IsAvailableForAge(TinyLife.Objects.ClothesIntention,TinyLife.Objects.AgeGroup)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsAvailableForAge(ClothesIntention, AgeGroup)
  nameWithType: Extensions.IsAvailableForAge(ClothesIntention, AgeGroup)
  fullName: TinyLife.Utilities.Extensions.IsAvailableForAge(TinyLife.Objects.ClothesIntention, TinyLife.Objects.AgeGroup)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns whether the given <xref href="TinyLife.Objects.ClothesIntention" data-throw-if-not-resolved="false"></xref> is avilable for the given <xref href="TinyLife.Objects.AgeGroup" data-throw-if-not-resolved="false"></xref>.

    This method only returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> for certain intentions for the baby age group.
  example: []
  syntax:
    content: public static bool IsAvailableForAge(this ClothesIntention intention, AgeGroup age)
    parameters:
    - id: intention
      type: TinyLife.Objects.ClothesIntention
      description: The intention.
    - id: age
      type: TinyLife.Objects.AgeGroup
      description: The age group.
    return:
      type: System.Boolean
      description: Whether the given <code class="paramref">intention</code> is avilable for the given <code class="paramref">age</code>.
    content.vb: Public Shared Function IsAvailableForAge(intention As ClothesIntention, age As AgeGroup) As Boolean
  overload: TinyLife.Utilities.Extensions.IsAvailableForAge*
- uid: TinyLife.Utilities.Extensions.Weekday(System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.Weekday(System.TimeSpan)
  id: Weekday(System.TimeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Weekday(TimeSpan)
  nameWithType: Extensions.Weekday(TimeSpan)
  fullName: TinyLife.Utilities.Extensions.Weekday(System.TimeSpan)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns the <xref href="System.DayOfWeek" data-throw-if-not-resolved="false"></xref> that the given in-game time represents.
  example: []
  syntax:
    content: public static DayOfWeek Weekday(this TimeSpan time)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The in-game time to query.
    return:
      type: System.DayOfWeek
      description: The weekday.
    content.vb: Public Shared Function Weekday(time As TimeSpan) As DayOfWeek
  overload: TinyLife.Utilities.Extensions.Weekday*
- uid: TinyLife.Utilities.Extensions.Icon(Microsoft.Xna.Framework.Input.Buttons)
  commentId: M:TinyLife.Utilities.Extensions.Icon(Microsoft.Xna.Framework.Input.Buttons)
  id: Icon(Microsoft.Xna.Framework.Input.Buttons)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Icon(Buttons)
  nameWithType: Extensions.Icon(Buttons)
  fullName: TinyLife.Utilities.Extensions.Icon(Microsoft.Xna.Framework.Input.Buttons)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns a texture region that contains the icon that the given <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> should display.

    This method is used by <xref href="TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor%2cSystem.Func%7bTinyLife.Options%2cMicrosoft.Xna.Framework.Input.Buttons%7d%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Func%7bSystem.Boolean%7d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static TextureRegion Icon(this Buttons button)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
      description: The button whose icon to return.
    return:
      type: MLEM.Textures.TextureRegion
      description: The button's icon, or null if the button is invalid or has no icon.
    content.vb: Public Shared Function Icon(button As Buttons) As TextureRegion
  overload: TinyLife.Utilities.Extensions.Icon*
- uid: TinyLife.Utilities.Extensions.Icon(MLEM.Input.MouseButton)
  commentId: M:TinyLife.Utilities.Extensions.Icon(MLEM.Input.MouseButton)
  id: Icon(MLEM.Input.MouseButton)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Icon(MouseButton)
  nameWithType: Extensions.Icon(MouseButton)
  fullName: TinyLife.Utilities.Extensions.Icon(MLEM.Input.MouseButton)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns a texture region that contains the icon that the given <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref> should display.
  example: []
  syntax:
    content: public static TextureRegion Icon(this MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button whose icon to return.
    return:
      type: MLEM.Textures.TextureRegion
      description: The button's icon, or null if the button is invalid or has no icon.
    content.vb: Public Shared Function Icon(button As MouseButton) As TextureRegion
  overload: TinyLife.Utilities.Extensions.Icon*
- uid: TinyLife.Utilities.Extensions.GetPersonality(TinyLife.Skills.FoodType.FoodRestriction,TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.Utilities.Extensions.GetPersonality(TinyLife.Skills.FoodType.FoodRestriction,TinyLife.Objects.PersonLike)
  id: GetPersonality(TinyLife.Skills.FoodType.FoodRestriction,TinyLife.Objects.PersonLike)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetPersonality(FoodRestriction, PersonLike)
  nameWithType: Extensions.GetPersonality(FoodType.FoodRestriction, PersonLike)
  fullName: TinyLife.Utilities.Extensions.GetPersonality(TinyLife.Skills.FoodType.FoodRestriction, TinyLife.Objects.PersonLike)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns the <xref href="TinyLife.PersonalityType" data-throw-if-not-resolved="false"></xref> that matches the given <xref href="TinyLife.Skills.FoodType.FoodRestriction" data-throw-if-not-resolved="false"></xref> flag. If multiple values are set, the personality that is considered most important is returned.

    If the <code class="paramref">person</code> is set, a personality will only be returned if the person has it.
  example: []
  syntax:
    content: public static PersonalityType GetPersonality(this FoodType.FoodRestriction restriction, PersonLike person = null)
    parameters:
    - id: restriction
      type: TinyLife.Skills.FoodType.FoodRestriction
      description: The restriction whose personality to return.
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person who needs to have the personality for it to be returned. If this is null, the most important personality is always returned.
    return:
      type: TinyLife.PersonalityType
      description: The matching personality for the given food restriction flag.
    content.vb: Public Shared Function GetPersonality(restriction As FoodType.FoodRestriction, person As PersonLike = Nothing) As PersonalityType
  overload: TinyLife.Utilities.Extensions.GetPersonality*
- uid: TinyLife.Utilities.Extensions.GetDescription(TinyLife.Objects.ClothesIntention,System.Nullable{TinyLife.Objects.AgeGroup})
  commentId: M:TinyLife.Utilities.Extensions.GetDescription(TinyLife.Objects.ClothesIntention,System.Nullable{TinyLife.Objects.AgeGroup})
  id: GetDescription(TinyLife.Objects.ClothesIntention,System.Nullable{TinyLife.Objects.AgeGroup})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDescription(ClothesIntention, AgeGroup?)
  nameWithType: Extensions.GetDescription(ClothesIntention, AgeGroup?)
  fullName: TinyLife.Utilities.Extensions.GetDescription(TinyLife.Objects.ClothesIntention, TinyLife.Objects.AgeGroup?)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns a set of strings (split into multiple lines) that describes the given <xref href="TinyLife.Objects.ClothesIntention" data-throw-if-not-resolved="false"></xref> flags in a localized fashion.
  example: []
  syntax:
    content: public static IEnumerable<string> GetDescription(this ClothesIntention intentions, AgeGroup? age = null)
    parameters:
    - id: intentions
      type: TinyLife.Objects.ClothesIntention
    - id: age
      type: System.Nullable{TinyLife.Objects.AgeGroup}
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: This clothes item's intention description
    content.vb: Public Shared Function GetDescription(intentions As ClothesIntention, age As AgeGroup? = Nothing) As IEnumerable(Of String)
  overload: TinyLife.Utilities.Extensions.GetDescription*
- uid: TinyLife.Utilities.Extensions.Multiplier(TinyLife.Objects.LifeSpan)
  commentId: M:TinyLife.Utilities.Extensions.Multiplier(TinyLife.Objects.LifeSpan)
  id: Multiplier(TinyLife.Objects.LifeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Multiplier(LifeSpan)
  nameWithType: Extensions.Multiplier(LifeSpan)
  fullName: TinyLife.Utilities.Extensions.Multiplier(TinyLife.Objects.LifeSpan)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns the multiplier that the given <xref href="TinyLife.Objects.LifeSpan" data-throw-if-not-resolved="false"></xref> applies to a person's life span.
  example: []
  syntax:
    content: public static float Multiplier(this LifeSpan lifeSpan)
    parameters:
    - id: lifeSpan
      type: TinyLife.Objects.LifeSpan
      description: The life span whose multiplier to retrieve.
    return:
      type: System.Single
      description: The life span's multiplier.
    content.vb: Public Shared Function Multiplier(lifeSpan As LifeSpan) As Single
  overload: TinyLife.Utilities.Extensions.Multiplier*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the given <code class="paramref">lifeSpan</code> is not defined, or <xref href="TinyLife.Objects.LifeSpan.Infinite" data-throw-if-not-resolved="false"></xref>.
- uid: TinyLife.Utilities.Extensions.GetPregnancyHours(TinyLife.Objects.LifeSpan)
  commentId: M:TinyLife.Utilities.Extensions.GetPregnancyHours(TinyLife.Objects.LifeSpan)
  id: GetPregnancyHours(TinyLife.Objects.LifeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetPregnancyHours(LifeSpan)
  nameWithType: Extensions.GetPregnancyHours(LifeSpan)
  fullName: TinyLife.Utilities.Extensions.GetPregnancyHours(TinyLife.Objects.LifeSpan)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns the amount of hours that a person should be pregnant for based on the given <code class="paramref">lifeSpan</code>.
  example: []
  syntax:
    content: public static int GetPregnancyHours(this LifeSpan lifeSpan)
    parameters:
    - id: lifeSpan
      type: TinyLife.Objects.LifeSpan
      description: The life span.
    return:
      type: System.Int32
      description: The amount of hours that a pregnancy should last.
    content.vb: Public Shared Function GetPregnancyHours(lifeSpan As LifeSpan) As Integer
  overload: TinyLife.Utilities.Extensions.GetPregnancyHours*
- uid: TinyLife.Utilities.Extensions.GetDaysBeforeAging(TinyLife.Objects.AgeGroup,TinyLife.Objects.LifeSpan)
  commentId: M:TinyLife.Utilities.Extensions.GetDaysBeforeAging(TinyLife.Objects.AgeGroup,TinyLife.Objects.LifeSpan)
  id: GetDaysBeforeAging(TinyLife.Objects.AgeGroup,TinyLife.Objects.LifeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDaysBeforeAging(AgeGroup, LifeSpan)
  nameWithType: Extensions.GetDaysBeforeAging(AgeGroup, LifeSpan)
  fullName: TinyLife.Utilities.Extensions.GetDaysBeforeAging(TinyLife.Objects.AgeGroup, TinyLife.Objects.LifeSpan)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns the amount of days that have to pass until a person in the given <xref href="TinyLife.Objects.AgeGroup" data-throw-if-not-resolved="false"></xref> with the given <xref href="TinyLife.Objects.LifeSpan" data-throw-if-not-resolved="false"></xref> ages up (or dies of old age in the case of <xref href="TinyLife.Objects.AgeGroup.Elder" data-throw-if-not-resolved="false"></xref>).
  example: []
  syntax:
    content: public static int GetDaysBeforeAging(this AgeGroup group, LifeSpan lifeSpan)
    parameters:
    - id: group
      type: TinyLife.Objects.AgeGroup
      description: The age group whose days before aging to retrieve.
    - id: lifeSpan
      type: TinyLife.Objects.LifeSpan
      description: The life span whose multiplier to use.
    return:
      type: System.Int32
      description: The amount of days before a person ages up.
    content.vb: Public Shared Function GetDaysBeforeAging(group As AgeGroup, lifeSpan As LifeSpan) As Integer
  overload: TinyLife.Utilities.Extensions.GetDaysBeforeAging*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the given <code class="paramref">lifeSpan</code> is not a valid non-combined flag.
- uid: TinyLife.Utilities.Extensions.AddGamepadScrolling(MLEM.Ui.Elements.Panel)
  commentId: M:TinyLife.Utilities.Extensions.AddGamepadScrolling(MLEM.Ui.Elements.Panel)
  id: AddGamepadScrolling(MLEM.Ui.Elements.Panel)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AddGamepadScrolling(Panel)
  nameWithType: Extensions.AddGamepadScrolling(Panel)
  fullName: TinyLife.Utilities.Extensions.AddGamepadScrolling(MLEM.Ui.Elements.Panel)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Adds the ability to use a gamepad to scroll to the given <xref href="MLEM.Ui.Elements.Panel" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void AddGamepadScrolling(this Panel panel)
    parameters:
    - id: panel
      type: MLEM.Ui.Elements.Panel
      description: The panel to add gamepad scrolling to.
    content.vb: Public Shared Sub AddGamepadScrolling(panel As Panel)
  overload: TinyLife.Utilities.Extensions.AddGamepadScrolling*
- uid: TinyLife.Utilities.Extensions.AddProgressArrows(MLEM.Ui.Elements.Element,System.Func{System.Single},System.Func{System.Single},System.Func{System.Single},System.Func{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.Utilities.Extensions.AddProgressArrows(MLEM.Ui.Elements.Element,System.Func{System.Single},System.Func{System.Single},System.Func{System.Single},System.Func{Microsoft.Xna.Framework.Color})
  id: AddProgressArrows(MLEM.Ui.Elements.Element,System.Func{System.Single},System.Func{System.Single},System.Func{System.Single},System.Func{Microsoft.Xna.Framework.Color})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AddProgressArrows(Element, Func<float>, Func<float>, Func<float>, Func<Color>)
  nameWithType: Extensions.AddProgressArrows(Element, Func<float>, Func<float>, Func<float>, Func<Color>)
  fullName: TinyLife.Utilities.Extensions.AddProgressArrows(MLEM.Ui.Elements.Element, System.Func<float>, System.Func<float>, System.Func<float>, System.Func<Microsoft.Xna.Framework.Color>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Adds a set of three progress arrows as an overlay to the passed <code class="paramref">element</code> and displays a varying number of them based on additional parameters. This method is used for the skill, need and relationship bars.
  example: []
  syntax:
    content: public static (Group, Image[]) AddProgressArrows(this Element element, Func<float> getValue, Func<float> minDelta, Func<float> deltaPerArrow, Func<Color> color)
    parameters:
    - id: element
      type: MLEM.Ui.Elements.Element
      description: The element to add the progress arrows to.
    - id: getValue
      type: System.Func{System.Single}
      description: A function that returns a current value.
    - id: minDelta
      type: System.Func{System.Single}
      description: A function that determines how much the value returned by <code class="paramref">getValue</code> needs to change every update frame for an arrow to display.
    - id: deltaPerArrow
      type: System.Func{System.Single}
      description: A function that determines how much the value returned by <code class="paramref">getValue</code> needs to change every update frame to display additional arrows beyond the first one.
    - id: color
      type: System.Func{Microsoft.Xna.Framework.Color}
      description: A function that returns the color the arrows should have.
    return:
      type: System.ValueTuple{MLEM.Ui.Elements.Group,MLEM.Ui.Elements.Image[]}
    content.vb: Public Shared Function AddProgressArrows(element As Element, getValue As Func(Of Single), minDelta As Func(Of Single), deltaPerArrow As Func(Of Single), color As Func(Of Color)) As (Group, Image())
  overload: TinyLife.Utilities.Extensions.AddProgressArrows*
  nameWithType.vb: Extensions.AddProgressArrows(Element, Func(Of Single), Func(Of Single), Func(Of Single), Func(Of Color))
  fullName.vb: TinyLife.Utilities.Extensions.AddProgressArrows(MLEM.Ui.Elements.Element, System.Func(Of Single), System.Func(Of Single), System.Func(Of Single), System.Func(Of Microsoft.Xna.Framework.Color))
  name.vb: AddProgressArrows(Element, Func(Of Single), Func(Of Single), Func(Of Single), Func(Of Color))
- uid: TinyLife.Utilities.Extensions.ToTimestampString(System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.ToTimestampString(System.TimeSpan)
  id: ToTimestampString(System.TimeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToTimestampString(TimeSpan)
  nameWithType: Extensions.ToTimestampString(TimeSpan)
  fullName: TinyLife.Utilities.Extensions.ToTimestampString(System.TimeSpan)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Turns the given <code class="paramref">timeSpan</code> into a nicely displayed timestamp in 12- or 24-hour format, based on the currently selected <xref href="TinyLife.Localization" data-throw-if-not-resolved="false"></xref> language.
  example: []
  syntax:
    content: public static string ToTimestampString(this TimeSpan timeSpan)
    parameters:
    - id: timeSpan
      type: System.TimeSpan
      description: The time span to display.
    return:
      type: System.String
      description: The displayed timestamp.
    content.vb: Public Shared Function ToTimestampString(timeSpan As TimeSpan) As String
  overload: TinyLife.Utilities.Extensions.ToTimestampString*
- uid: TinyLife.Utilities.Extensions.IsBetween(System.ValueTuple{System.Int32,System.Int32},System.Int32)
  commentId: M:TinyLife.Utilities.Extensions.IsBetween(System.ValueTuple{System.Int32,System.Int32},System.Int32)
  id: IsBetween(System.ValueTuple{System.Int32,System.Int32},System.Int32)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsBetween((int Start, int End), int)
  nameWithType: Extensions.IsBetween((int Start, int End), int)
  fullName: TinyLife.Utilities.Extensions.IsBetween((int Start, int End), int)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns whether the given time range is between the given time.

    If the time range ranges into the next day, the correct value is still calculated.
  example: []
  syntax:
    content: public static bool IsBetween(this (int Start, int End) schedule, int time)
    parameters:
    - id: schedule
      type: System.ValueTuple{System.Int32,System.Int32}
      description: The schedule with its start and end time. Can be between two days.
    - id: time
      type: System.Int32
      description: The current time.
    return:
      type: System.Boolean
      description: Whether the <code class="paramref">time</code> is within the <code class="paramref">schedule</code>.
    content.vb: Public Shared Function IsBetween(schedule As (Start As Integer, [End] As Integer), time As Integer) As Boolean
  overload: TinyLife.Utilities.Extensions.IsBetween*
  nameWithType.vb: Extensions.IsBetween((Start As Integer, End As Integer), Integer)
  fullName.vb: TinyLife.Utilities.Extensions.IsBetween((Start As Integer, End As Integer), Integer)
  name.vb: IsBetween((Start As Integer, End As Integer), Integer)
- uid: TinyLife.Utilities.Extensions.Length(System.ValueTuple{System.Int32,System.Int32})
  commentId: M:TinyLife.Utilities.Extensions.Length(System.ValueTuple{System.Int32,System.Int32})
  id: Length(System.ValueTuple{System.Int32,System.Int32})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Length((int Start, int End))
  nameWithType: Extensions.Length((int Start, int End))
  fullName: TinyLife.Utilities.Extensions.Length((int Start, int End))
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    Returns the length of the given <code class="paramref">schedule</code>.

    If the time range ranges into the next day, the correct value is still calculated.
  example: []
  syntax:
    content: public static int Length(this (int Start, int End) schedule)
    parameters:
    - id: schedule
      type: System.ValueTuple{System.Int32,System.Int32}
      description: The schedule.
    return:
      type: System.Int32
      description: The length of the given <code class="paramref">schedule</code>.
    content.vb: Public Shared Function Length(schedule As (Start As Integer, [End] As Integer)) As Integer
  overload: TinyLife.Utilities.Extensions.Length*
  nameWithType.vb: Extensions.Length((Start As Integer, End As Integer))
  fullName.vb: TinyLife.Utilities.Extensions.Length((Start As Integer, End As Integer))
  name.vb: Length((Start As Integer, End As Integer))
- uid: TinyLife.Utilities.Extensions.GetMostFittingStyle(TinyLife.Objects.PregnancyAbility)
  commentId: M:TinyLife.Utilities.Extensions.GetMostFittingStyle(TinyLife.Objects.PregnancyAbility)
  id: GetMostFittingStyle(TinyLife.Objects.PregnancyAbility)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetMostFittingStyle(PregnancyAbility)
  nameWithType: Extensions.GetMostFittingStyle(PregnancyAbility)
  fullName: TinyLife.Utilities.Extensions.GetMostFittingStyle(TinyLife.Objects.PregnancyAbility)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns the most fitting <xref href="TinyLife.Objects.StylePreference" data-throw-if-not-resolved="false"></xref> for the given <xref href="TinyLife.Objects.PregnancyAbility" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static StylePreference GetMostFittingStyle(this PregnancyAbility ability)
    parameters:
    - id: ability
      type: TinyLife.Objects.PregnancyAbility
      description: The pregnancy ability.
    return:
      type: TinyLife.Objects.StylePreference
      description: The most fitting style preference.
    content.vb: Public Shared Function GetMostFittingStyle(ability As PregnancyAbility) As StylePreference
  overload: TinyLife.Utilities.Extensions.GetMostFittingStyle*
- uid: TinyLife.Utilities.Extensions.GetMostFittingStyle(TinyLife.Objects.VoiceStyle)
  commentId: M:TinyLife.Utilities.Extensions.GetMostFittingStyle(TinyLife.Objects.VoiceStyle)
  id: GetMostFittingStyle(TinyLife.Objects.VoiceStyle)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetMostFittingStyle(VoiceStyle)
  nameWithType: Extensions.GetMostFittingStyle(VoiceStyle)
  fullName: TinyLife.Utilities.Extensions.GetMostFittingStyle(TinyLife.Objects.VoiceStyle)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns the most fitting <xref href="TinyLife.Objects.StylePreference" data-throw-if-not-resolved="false"></xref> for the given <xref href="TinyLife.Objects.VoiceStyle" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static StylePreference GetMostFittingStyle(this VoiceStyle voice)
    parameters:
    - id: voice
      type: TinyLife.Objects.VoiceStyle
      description: The voice style.
    return:
      type: TinyLife.Objects.StylePreference
      description: The most fitting style preference.
    content.vb: Public Shared Function GetMostFittingStyle(voice As VoiceStyle) As StylePreference
  overload: TinyLife.Utilities.Extensions.GetMostFittingStyle*
- uid: TinyLife.Utilities.Extensions.GetBedCategories(TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Utilities.Extensions.GetBedCategories(TinyLife.Objects.AgeGroup)
  id: GetBedCategories(TinyLife.Objects.AgeGroup)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetBedCategories(AgeGroup)
  nameWithType: Extensions.GetBedCategories(AgeGroup)
  fullName: TinyLife.Utilities.Extensions.GetBedCategories(TinyLife.Objects.AgeGroup)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns a <xref href="TinyLife.Objects.ObjectCategory" data-throw-if-not-resolved="false"></xref> combined flag for a sleeping spot for the given <code class="paramref">age</code>.
  example: []
  syntax:
    content: public static ObjectCategory GetBedCategories(this AgeGroup age)
    parameters:
    - id: age
      type: TinyLife.Objects.AgeGroup
      description: The age.
    return:
      type: TinyLife.Objects.ObjectCategory
      description: The sleeping spots.
    content.vb: Public Shared Function GetBedCategories(age As AgeGroup) As ObjectCategory
  overload: TinyLife.Utilities.Extensions.GetBedCategories*
- uid: TinyLife.Utilities.Extensions.SetInWorldSnapping(MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Utilities.Extensions.SetInWorldSnapping(MLEM.Ui.Elements.Tooltip)
  id: SetInWorldSnapping(MLEM.Ui.Elements.Tooltip)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: SetInWorldSnapping(Tooltip)
  nameWithType: Extensions.SetInWorldSnapping(Tooltip)
  fullName: TinyLife.Utilities.Extensions.SetInWorldSnapping(MLEM.Ui.Elements.Tooltip)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Causes the given <code class="paramref">tooltip</code> to snap to the in-world cursor automatically.
  example: []
  syntax:
    content: public static void SetInWorldSnapping(this Tooltip tooltip)
    parameters:
    - id: tooltip
      type: MLEM.Ui.Elements.Tooltip
      description: The tooltip.
    content.vb: Public Shared Sub SetInWorldSnapping(tooltip As Tooltip)
  overload: TinyLife.Utilities.Extensions.SetInWorldSnapping*
- uid: TinyLife.Utilities.Extensions.ScreenContent(TinyLife.Objects.Television.Channel)
  commentId: M:TinyLife.Utilities.Extensions.ScreenContent(TinyLife.Objects.Television.Channel)
  id: ScreenContent(TinyLife.Objects.Television.Channel)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ScreenContent(Channel)
  nameWithType: Extensions.ScreenContent(Television.Channel)
  fullName: TinyLife.Utilities.Extensions.ScreenContent(TinyLife.Objects.Television.Channel)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: An extension method that returns a string representing the screen content for the given <code class="paramref">channel</code>, which can be passed to <xref href="TinyLife.Objects.ScreenObject.TurnOn(System.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static string ScreenContent(this Television.Channel channel)
    parameters:
    - id: channel
      type: TinyLife.Objects.Television.Channel
      description: The channel whose screen content to return.
    return:
      type: System.String
      description: The channel's screen content.
    content.vb: Public Shared Function ScreenContent(channel As Television.Channel) As String
  overload: TinyLife.Utilities.Extensions.ScreenContent*
- uid: TinyLife.Utilities.Extensions.IsTextFieldSelected(MLEM.Ui.UiSystem)
  commentId: M:TinyLife.Utilities.Extensions.IsTextFieldSelected(MLEM.Ui.UiSystem)
  id: IsTextFieldSelected(MLEM.Ui.UiSystem)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsTextFieldSelected(UiSystem)
  nameWithType: Extensions.IsTextFieldSelected(UiSystem)
  fullName: TinyLife.Utilities.Extensions.IsTextFieldSelected(MLEM.Ui.UiSystem)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: An extension method that determines whether any text fields in the given <xref href="MLEM.Ui.UiSystem" data-throw-if-not-resolved="false"></xref> are currently selected.
  example: []
  syntax:
    content: public static bool IsTextFieldSelected(this UiSystem system)
    parameters:
    - id: system
      type: MLEM.Ui.UiSystem
      description: The ui system whose children to check.
    return:
      type: System.Boolean
      description: Whether a <xref href="MLEM.Ui.Elements.TextField" data-throw-if-not-resolved="false"></xref> is currently selected.
    content.vb: Public Shared Function IsTextFieldSelected(system As UiSystem) As Boolean
  overload: TinyLife.Utilities.Extensions.IsTextFieldSelected*
- uid: TinyLife.Utilities.Extensions.Slugify(System.String)
  commentId: M:TinyLife.Utilities.Extensions.Slugify(System.String)
  id: Slugify(System.String)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Slugify(string)
  nameWithType: Extensions.Slugify(string)
  fullName: TinyLife.Utilities.Extensions.Slugify(string)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\"Slugifies\" the given <code class=\"paramref\">name</code>, effectively removing all special characters and diacritics and turning it into a string that the game can use for file names and JSON entry keys. This method is used for the name of people, households and lots."
  example: []
  syntax:
    content: public static string Slugify(this string name)
    parameters:
    - id: name
      type: System.String
      description: The name to slugify.
    return:
      type: System.String
      description: The slugified name.
    content.vb: Public Shared Function Slugify(name As String) As String
  overload: TinyLife.Utilities.Extensions.Slugify*
  nameWithType.vb: Extensions.Slugify(String)
  fullName.vb: TinyLife.Utilities.Extensions.Slugify(String)
  name.vb: Slugify(String)
- uid: TinyLife.Utilities.Extensions.Get(TinyLife.Utilities.DefaultSound)
  commentId: M:TinyLife.Utilities.Extensions.Get(TinyLife.Utilities.DefaultSound)
  id: Get(TinyLife.Utilities.DefaultSound)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Get(DefaultSound)
  nameWithType: Extensions.Get(DefaultSound)
  fullName: TinyLife.Utilities.Extensions.Get(TinyLife.Utilities.DefaultSound)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: Returns the loaded <xref href="Microsoft.Xna.Framework.Audio.SoundEffect" data-throw-if-not-resolved="false"></xref> for this default sound.
  example: []
  syntax:
    content: public static SoundEffect Get(this DefaultSound sound)
    parameters:
    - id: sound
      type: TinyLife.Utilities.DefaultSound
      description: The default sound to get the instance of.
    return:
      type: Microsoft.Xna.Framework.Audio.SoundEffect
      description: The loaded sound.
    content.vb: Public Shared Function [Get](sound As DefaultSound) As SoundEffect
  overload: TinyLife.Utilities.Extensions.Get*
- uid: TinyLife.Utilities.Extensions.PrependIfAny``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:TinyLife.Utilities.Extensions.PrependIfAny``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: PrependIfAny``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: PrependIfAny<T>(IEnumerable<T>, T)
  nameWithType: Extensions.PrependIfAny<T>(IEnumerable<T>, T)
  fullName: TinyLife.Utilities.Extensions.PrependIfAny<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: A special version of <xref href="TinyLife.Utilities.Extensions.ConcatIfAny%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d%2cSystem.Collections.Generic.IEnumerable%7b%60%600%7d)" data-throw-if-not-resolved="false"></xref> that prepends the given element to the end of the given enumerable if the <code class="paramref">enumerable</code> already has at least one element.
  example: []
  syntax:
    content: 'public static IEnumerable<T> PrependIfAny<T>(this IEnumerable<T> enumerable, T toPrepend) where T : Action'
    parameters:
    - id: enumerable
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The enumerable.
    - id: toPrepend
      type: '{T}'
      description: The element to prepend.
    typeParameters:
    - id: T
      description: The type of the enumerable and element to prepended to it.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A concatenation of <code class="paramref">toPrepend</code> followed by <code class="paramref">enumerable</code> if <code class="paramref">enumerable</code> contains at least one element, or an empty collection otherwise.
    content.vb: Public Shared Function PrependIfAny(Of T As Action)(enumerable As IEnumerable(Of T), toPrepend As T) As IEnumerable(Of T)
  overload: TinyLife.Utilities.Extensions.PrependIfAny*
  nameWithType.vb: Extensions.PrependIfAny(Of T)(IEnumerable(Of T), T)
  fullName.vb: TinyLife.Utilities.Extensions.PrependIfAny(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: PrependIfAny(Of T)(IEnumerable(Of T), T)
- uid: TinyLife.Utilities.Extensions.AppendIfAny``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:TinyLife.Utilities.Extensions.AppendIfAny``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: AppendIfAny``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AppendIfAny<T>(IEnumerable<T>, T)
  nameWithType: Extensions.AppendIfAny<T>(IEnumerable<T>, T)
  fullName: TinyLife.Utilities.Extensions.AppendIfAny<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: A special version of <xref href="TinyLife.Utilities.Extensions.ConcatIfAny%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d%2cSystem.Collections.Generic.IEnumerable%7b%60%600%7d)" data-throw-if-not-resolved="false"></xref> that appends the given element to the end of the given enumerable if the <code class="paramref">enumerable</code> already has at least one element.
  example: []
  syntax:
    content: 'public static IEnumerable<T> AppendIfAny<T>(this IEnumerable<T> enumerable, T toAppend) where T : Action'
    parameters:
    - id: enumerable
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The enumerable.
    - id: toAppend
      type: '{T}'
      description: The element to append.
    typeParameters:
    - id: T
      description: The type of the enumerable and element to append to it.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A concatenation of <code class="paramref">enumerable</code> followed by <code class="paramref">toAppend</code> if <code class="paramref">enumerable</code> contains at least one element, or an empty collection otherwise.
    content.vb: Public Shared Function AppendIfAny(Of T As Action)(enumerable As IEnumerable(Of T), toAppend As T) As IEnumerable(Of T)
  overload: TinyLife.Utilities.Extensions.AppendIfAny*
  nameWithType.vb: Extensions.AppendIfAny(Of T)(IEnumerable(Of T), T)
  fullName.vb: TinyLife.Utilities.Extensions.AppendIfAny(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: AppendIfAny(Of T)(IEnumerable(Of T), T)
- uid: TinyLife.Utilities.Extensions.ConcatIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:TinyLife.Utilities.Extensions.ConcatIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: ConcatIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ConcatIfAny<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Extensions.ConcatIfAny<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: TinyLife.Utilities.Extensions.ConcatIfAny<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: >-
    A helper method intended to be used by <xref href="TinyLife.Actions.MultiAction.CreateFirstActions" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Actions.MultiAction.CreateLastActions" data-throw-if-not-resolved="false"></xref> (or <xref href="TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection%7bTinyLife.Actions.Action%7d)" data-throw-if-not-resolved="false"></xref> in general) to concatenate the two given <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>s, but only if both of them have at least one element each.

    This is useful as <xref href="TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection%7bTinyLife.Actions.Action%7d)" data-throw-if-not-resolved="false"></xref> expects an empty collection if the action should fail.
  example: []
  syntax:
    content: 'public static IEnumerable<T> ConcatIfAny<T>(this IEnumerable<T> first, IEnumerable<T> second) where T : Action'
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The first enumerable.
    - id: second
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The second enumerable.
    typeParameters:
    - id: T
      description: The type of the enumerables.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A concatenation of <code class="paramref">first</code> followed by <code class="paramref">second</code> if both contain at least one element, or an empty collection otherwise.
    content.vb: Public Shared Function ConcatIfAny(Of T As Action)(first As IEnumerable(Of T), second As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: TinyLife.Utilities.Extensions.ConcatIfAny*
  nameWithType.vb: Extensions.ConcatIfAny(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: TinyLife.Utilities.Extensions.ConcatIfAny(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: ConcatIfAny(Of T)(IEnumerable(Of T), IEnumerable(Of T))
references:
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  href: TinyLife.Objects.Furniture.html
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  href: TinyLife.Actions.Action.html
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  href: TinyLife.Options.html#TinyLife_Options_CameraRotation
  name: CameraRotation
  nameWithType: Options.CameraRotation
  fullName: TinyLife.Options.CameraRotation
- uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Maths.Direction2})
  commentId: M:TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Maths.Direction2})
  isExternal: true
  href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyCameraRotation_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Nullable_MLEM_Maths_Direction2__
  name: ApplyCameraRotation(Vector2, bool, Direction2?)
  nameWithType: Map.ApplyCameraRotation(Vector2, bool, Direction2?)
  fullName: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, bool, MLEM.Maths.Direction2?)
  nameWithType.vb: Map.ApplyCameraRotation(Vector2, Boolean, Direction2?)
  fullName.vb: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, Boolean, MLEM.Maths.Direction2?)
  name.vb: ApplyCameraRotation(Vector2, Boolean, Direction2?)
  spec.csharp:
  - uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Maths.Direction2})
    name: ApplyCameraRotation
    href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyCameraRotation_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Nullable_MLEM_Maths_Direction2__
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Maths.Direction2})
    name: ApplyCameraRotation
    href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyCameraRotation_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Nullable_MLEM_Maths_Direction2__
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: )
- uid: TinyLife.Utilities.Extensions.ToScreenPos*
  commentId: Overload:TinyLife.Utilities.Extensions.ToScreenPos
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ToScreenPos_Microsoft_Xna_Framework_Vector2_System_Single_System_Boolean_System_Boolean_System_Boolean_
  name: ToScreenPos
  nameWithType: Extensions.ToScreenPos
  fullName: TinyLife.Utilities.Extensions.ToScreenPos
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Maths.Direction2})
  commentId: M:TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Maths.Direction2})
  isExternal: true
  href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyInverseCameraRotation_Microsoft_Xna_Framework_Vector2_System_Nullable_MLEM_Maths_Direction2__
  name: ApplyInverseCameraRotation(Vector2, Direction2?)
  nameWithType: Map.ApplyInverseCameraRotation(Vector2, Direction2?)
  fullName: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2, MLEM.Maths.Direction2?)
  spec.csharp:
  - uid: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Maths.Direction2})
    name: ApplyInverseCameraRotation
    href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyInverseCameraRotation_Microsoft_Xna_Framework_Vector2_System_Nullable_MLEM_Maths_Direction2__
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Maths.Direction2})
    name: ApplyInverseCameraRotation
    href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyInverseCameraRotation_Microsoft_Xna_Framework_Vector2_System_Nullable_MLEM_Maths_Direction2__
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: )
- uid: TinyLife.Utilities.Extensions.ToWorldPos*
  commentId: Overload:TinyLife.Utilities.Extensions.ToWorldPos
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ToWorldPos_Microsoft_Xna_Framework_Vector2_System_Single_System_Boolean_
  name: ToWorldPos
  nameWithType: Extensions.ToWorldPos
  fullName: TinyLife.Utilities.Extensions.ToWorldPos
- uid: TinyLife.Utilities.Extensions.ToVisualY*
  commentId: Overload:TinyLife.Utilities.Extensions.ToVisualY
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ToVisualY_Microsoft_Xna_Framework_Vector2_
  name: ToVisualY
  nameWithType: Extensions.ToVisualY
  fullName: TinyLife.Utilities.Extensions.ToVisualY
- uid: MLEM.Maths.Direction2.Up
  commentId: F:MLEM.Maths.Direction2.Up
  isExternal: true
  name: Up
  nameWithType: Direction2.Up
  fullName: MLEM.Maths.Direction2.Up
- uid: MLEM.Maths.Direction2.Down
  commentId: F:MLEM.Maths.Direction2.Down
  isExternal: true
  name: Down
  nameWithType: Direction2.Down
  fullName: MLEM.Maths.Direction2.Down
- uid: TinyLife.Utilities.Extensions.IsVertical*
  commentId: Overload:TinyLife.Utilities.Extensions.IsVertical
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsVertical_MLEM_Maths_Direction2_
  name: IsVertical
  nameWithType: Extensions.IsVertical
  fullName: TinyLife.Utilities.Extensions.IsVertical
- uid: MLEM.Maths.Direction2
  commentId: T:MLEM.Maths.Direction2
  parent: MLEM.Maths
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Maths.Direction2
- uid: MLEM.Maths
  commentId: N:MLEM.Maths
  isExternal: true
  name: MLEM.Maths
  nameWithType: MLEM.Maths
  fullName: MLEM.Maths
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
- uid: MLEM.Maths.Direction2.Left
  commentId: F:MLEM.Maths.Direction2.Left
  isExternal: true
  name: Left
  nameWithType: Direction2.Left
  fullName: MLEM.Maths.Direction2.Left
- uid: MLEM.Maths.Direction2.Right
  commentId: F:MLEM.Maths.Direction2.Right
  isExternal: true
  name: Right
  nameWithType: Direction2.Right
  fullName: MLEM.Maths.Direction2.Right
- uid: TinyLife.Utilities.Extensions.IsHorizontal*
  commentId: Overload:TinyLife.Utilities.Extensions.IsHorizontal
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsHorizontal_MLEM_Maths_Direction2_
  name: IsHorizontal
  nameWithType: Extensions.IsHorizontal
  fullName: TinyLife.Utilities.Extensions.IsHorizontal
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: TinyLife.SaveHandler.CreateSerializerSettings(TinyLife.SerializerContext,TinyLife.SerializerUsage,System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs},System.Boolean)
  commentId: M:TinyLife.SaveHandler.CreateSerializerSettings(TinyLife.SerializerContext,TinyLife.SerializerUsage,System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs},System.Boolean)
  isExternal: true
  href: TinyLife.SaveHandler.html#TinyLife_SaveHandler_CreateSerializerSettings_TinyLife_SerializerContext_TinyLife_SerializerUsage_System_EventHandler_Newtonsoft_Json_Serialization_ErrorEventArgs__System_Boolean_
  name: CreateSerializerSettings(SerializerContext, SerializerUsage, EventHandler<ErrorEventArgs>, bool)
  nameWithType: SaveHandler.CreateSerializerSettings(SerializerContext, SerializerUsage, EventHandler<ErrorEventArgs>, bool)
  fullName: TinyLife.SaveHandler.CreateSerializerSettings(TinyLife.SerializerContext, TinyLife.SerializerUsage, System.EventHandler<Newtonsoft.Json.Serialization.ErrorEventArgs>, bool)
  nameWithType.vb: SaveHandler.CreateSerializerSettings(SerializerContext, SerializerUsage, EventHandler(Of ErrorEventArgs), Boolean)
  fullName.vb: TinyLife.SaveHandler.CreateSerializerSettings(TinyLife.SerializerContext, TinyLife.SerializerUsage, System.EventHandler(Of Newtonsoft.Json.Serialization.ErrorEventArgs), Boolean)
  name.vb: CreateSerializerSettings(SerializerContext, SerializerUsage, EventHandler(Of ErrorEventArgs), Boolean)
  spec.csharp:
  - uid: TinyLife.SaveHandler.CreateSerializerSettings(TinyLife.SerializerContext,TinyLife.SerializerUsage,System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs},System.Boolean)
    name: CreateSerializerSettings
    href: TinyLife.SaveHandler.html#TinyLife_SaveHandler_CreateSerializerSettings_TinyLife_SerializerContext_TinyLife_SerializerUsage_System_EventHandler_Newtonsoft_Json_Serialization_ErrorEventArgs__System_Boolean_
  - name: (
  - uid: TinyLife.SerializerContext
    name: SerializerContext
    href: TinyLife.SerializerContext.html
  - name: ','
  - name: " "
  - uid: TinyLife.SerializerUsage
    name: SerializerUsage
    href: TinyLife.SerializerUsage.html
  - name: ','
  - name: " "
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: Newtonsoft.Json.Serialization.ErrorEventArgs
    name: ErrorEventArgs
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.SaveHandler.CreateSerializerSettings(TinyLife.SerializerContext,TinyLife.SerializerUsage,System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs},System.Boolean)
    name: CreateSerializerSettings
    href: TinyLife.SaveHandler.html#TinyLife_SaveHandler_CreateSerializerSettings_TinyLife_SerializerContext_TinyLife_SerializerUsage_System_EventHandler_Newtonsoft_Json_Serialization_ErrorEventArgs__System_Boolean_
  - name: (
  - uid: TinyLife.SerializerContext
    name: SerializerContext
    href: TinyLife.SerializerContext.html
  - name: ','
  - name: " "
  - uid: TinyLife.SerializerUsage
    name: SerializerUsage
    href: TinyLife.SerializerUsage.html
  - name: ','
  - name: " "
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: Newtonsoft.Json.Serialization.ErrorEventArgs
    name: ErrorEventArgs
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy*
  commentId: Overload:TinyLife.Utilities.Extensions.JsonCopy
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy
  nameWithType: Extensions.JsonCopy
  fullName: TinyLife.Utilities.Extensions.JsonCopy
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
  spec.csharp:
  - uid: Newtonsoft
    name: Newtonsoft
    isExternal: true
  - name: .
  - uid: Newtonsoft.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: Newtonsoft
    name: Newtonsoft
    isExternal: true
  - name: .
  - uid: Newtonsoft.Json
    name: Json
    isExternal: true
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Skills.Quality
  commentId: T:TinyLife.Skills.Quality
  parent: TinyLife.Skills
  href: TinyLife.Skills.Quality.html
  name: Quality
  nameWithType: Quality
  fullName: TinyLife.Skills.Quality
- uid: TinyLife.Skills.Quality.Terrible
  commentId: F:TinyLife.Skills.Quality.Terrible
  href: TinyLife.Skills.Quality.html#TinyLife_Skills_Quality_Terrible
  name: Terrible
  nameWithType: Quality.Terrible
  fullName: TinyLife.Skills.Quality.Terrible
- uid: TinyLife.Skills.Quality.Good
  commentId: F:TinyLife.Skills.Quality.Good
  href: TinyLife.Skills.Quality.html#TinyLife_Skills_Quality_Good
  name: Good
  nameWithType: Quality.Good
  fullName: TinyLife.Skills.Quality.Good
- uid: TinyLife.Skills.Quality.Great
  commentId: F:TinyLife.Skills.Quality.Great
  href: TinyLife.Skills.Quality.html#TinyLife_Skills_Quality_Great
  name: Great
  nameWithType: Quality.Great
  fullName: TinyLife.Skills.Quality.Great
- uid: TinyLife.Skills.Quality.Perfect
  commentId: F:TinyLife.Skills.Quality.Perfect
  href: TinyLife.Skills.Quality.html#TinyLife_Skills_Quality_Perfect
  name: Perfect
  nameWithType: Quality.Perfect
  fullName: TinyLife.Skills.Quality.Perfect
- uid: TinyLife.Skills.Quality.Masterpiece
  commentId: F:TinyLife.Skills.Quality.Masterpiece
  href: TinyLife.Skills.Quality.html#TinyLife_Skills_Quality_Masterpiece
  name: Masterpiece
  nameWithType: Quality.Masterpiece
  fullName: TinyLife.Skills.Quality.Masterpiece
- uid: TinyLife.Utilities.Extensions.GetPriceModifier*
  commentId: Overload:TinyLife.Utilities.Extensions.GetPriceModifier
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetPriceModifier_TinyLife_Skills_Quality_
  name: GetPriceModifier
  nameWithType: Extensions.GetPriceModifier
  fullName: TinyLife.Utilities.Extensions.GetPriceModifier
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  href: TinyLife.html
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Skills
    name: Skills
    href: TinyLife.Skills.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Skills
    name: Skills
    href: TinyLife.Skills.html
- uid: TinyLife.Utilities.Extensions.GetDecorativeRating*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDecorativeRating
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDecorativeRating_TinyLife_Skills_Quality_
  name: GetDecorativeRating
  nameWithType: Extensions.GetDecorativeRating
  fullName: TinyLife.Utilities.Extensions.GetDecorativeRating
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Utilities.Extensions.GetChanceModifier*
  commentId: Overload:TinyLife.Utilities.Extensions.GetChanceModifier
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetChanceModifier_TinyLife_Skills_Quality_
  name: GetChanceModifier
  nameWithType: Extensions.GetChanceModifier
  fullName: TinyLife.Utilities.Extensions.GetChanceModifier
- uid: TinyLife.Utilities.Extensions.ToLocalizedString*
  commentId: Overload:TinyLife.Utilities.Extensions.ToLocalizedString
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ToLocalizedString_TinyLife_Skills_Quality_
  name: ToLocalizedString
  nameWithType: Extensions.ToLocalizedString
  fullName: TinyLife.Utilities.Extensions.ToLocalizedString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.Utilities.Extensions.ToSellingPriceString*
  commentId: Overload:TinyLife.Utilities.Extensions.ToSellingPriceString
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ToSellingPriceString_System_Single_
  name: ToSellingPriceString
  nameWithType: Extensions.ToSellingPriceString
  fullName: TinyLife.Utilities.Extensions.ToSellingPriceString
- uid: TinyLife.Actions.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.CanExecuteResult.Valid
  href: TinyLife.Actions.CanExecuteResult.html#TinyLife_Actions_CanExecuteResult_Valid
  name: Valid
  nameWithType: CanExecuteResult.Valid
  fullName: TinyLife.Actions.CanExecuteResult.Valid
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  href: TinyLife.Actions.CanExecuteResult.html
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Utilities.Extensions.BothValid*
  commentId: Overload:TinyLife.Utilities.Extensions.BothValid
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_BothValid_TinyLife_Actions_CanExecuteResult_System_Func_TinyLife_Actions_CanExecuteResult__
  name: BothValid
  nameWithType: Extensions.BothValid
  fullName: TinyLife.Utilities.Extensions.BothValid
- uid: System.Func{TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<CanExecuteResult>
  nameWithType: Func<CanExecuteResult>
  fullName: System.Func<TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of CanExecuteResult)
  fullName.vb: System.Func(Of TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of CanExecuteResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Actions.CompletionType.Active
  commentId: F:TinyLife.Actions.CompletionType.Active
  href: TinyLife.Actions.CompletionType.html#TinyLife_Actions_CompletionType_Active
  name: Active
  nameWithType: CompletionType.Active
  fullName: TinyLife.Actions.CompletionType.Active
- uid: TinyLife.Utilities.Extensions.AnyActive*
  commentId: Overload:TinyLife.Utilities.Extensions.AnyActive
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_AnyActive_TinyLife_Actions_CompletionType_System_Func_TinyLife_Actions_CompletionType__
  name: AnyActive
  nameWithType: Extensions.AnyActive
  fullName: TinyLife.Utilities.Extensions.AnyActive
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  href: TinyLife.Actions.CompletionType.html
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: System.Func{TinyLife.Actions.CompletionType}
  commentId: T:System.Func{TinyLife.Actions.CompletionType}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<CompletionType>
  nameWithType: Func<CompletionType>
  fullName: System.Func<TinyLife.Actions.CompletionType>
  nameWithType.vb: Func(Of CompletionType)
  fullName.vb: System.Func(Of TinyLife.Actions.CompletionType)
  name.vb: Func(Of CompletionType)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: )
- uid: TinyLife.Utilities.Extensions.AnyInactive*
  commentId: Overload:TinyLife.Utilities.Extensions.AnyInactive
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_AnyInactive_TinyLife_Actions_CompletionType_System_Func_TinyLife_Actions_CompletionType__
  name: AnyInactive
  nameWithType: Extensions.AnyInactive
  fullName: TinyLife.Utilities.Extensions.AnyInactive
- uid: TinyLife.GenealogyType
  commentId: T:TinyLife.GenealogyType
  parent: TinyLife
  href: TinyLife.GenealogyType.html
  name: GenealogyType
  nameWithType: GenealogyType
  fullName: TinyLife.GenealogyType
- uid: TinyLife.GenealogyType.Parent
  commentId: F:TinyLife.GenealogyType.Parent
  href: TinyLife.GenealogyType.html#TinyLife_GenealogyType_Parent
  name: Parent
  nameWithType: GenealogyType.Parent
  fullName: TinyLife.GenealogyType.Parent
- uid: TinyLife.GenealogyType.Child
  commentId: F:TinyLife.GenealogyType.Child
  href: TinyLife.GenealogyType.html#TinyLife_GenealogyType_Child
  name: Child
  nameWithType: GenealogyType.Child
  fullName: TinyLife.GenealogyType.Child
- uid: TinyLife.Utilities.Extensions.GetOpposite*
  commentId: Overload:TinyLife.Utilities.Extensions.GetOpposite
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetOpposite_TinyLife_GenealogyType_
  name: GetOpposite
  nameWithType: Extensions.GetOpposite
  fullName: TinyLife.Utilities.Extensions.GetOpposite
- uid: TinyLife
  commentId: N:TinyLife
  href: TinyLife.html
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: TinyLife.Utilities.Extensions.GetTransitive*
  commentId: Overload:TinyLife.Utilities.Extensions.GetTransitive
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetTransitive_TinyLife_GenealogyType_TinyLife_GenealogyType_
  name: GetTransitive
  nameWithType: Extensions.GetTransitive
  fullName: TinyLife.Utilities.Extensions.GetTransitive
- uid: System.Nullable{TinyLife.GenealogyType}
  commentId: T:System.Nullable{TinyLife.GenealogyType}
  parent: System
  definition: System.Nullable`1
  href: TinyLife.GenealogyType.html
  name: GenealogyType?
  nameWithType: GenealogyType?
  fullName: TinyLife.GenealogyType?
  spec.csharp:
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    href: TinyLife.GenealogyType.html
  - name: '?'
  spec.vb:
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    href: TinyLife.GenealogyType.html
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  href: TinyLife.Objects.AgeGroup.html
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Utilities.Extensions.IsAgeAppropriate*
  commentId: Overload:TinyLife.Utilities.Extensions.IsAgeAppropriate
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsAgeAppropriate_TinyLife_GenealogyType_TinyLife_Objects_AgeGroup_TinyLife_Objects_AgeGroup_
  name: IsAgeAppropriate
  nameWithType: Extensions.IsAgeAppropriate
  fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate
- uid: TinyLife.Objects.Pose
  commentId: T:TinyLife.Objects.Pose
  parent: TinyLife.Objects
  href: TinyLife.Objects.Pose.html
  name: Pose
  nameWithType: Pose
  fullName: TinyLife.Objects.Pose
- uid: TinyLife.Objects.Pose.WorkingStanding
  commentId: F:TinyLife.Objects.Pose.WorkingStanding
  href: TinyLife.Objects.Pose.html#TinyLife_Objects_Pose_WorkingStanding
  name: WorkingStanding
  nameWithType: Pose.WorkingStanding
  fullName: TinyLife.Objects.Pose.WorkingStanding
- uid: TinyLife.Objects.Pose.WorkingSitting
  commentId: F:TinyLife.Objects.Pose.WorkingSitting
  href: TinyLife.Objects.Pose.html#TinyLife_Objects_Pose_WorkingSitting
  name: WorkingSitting
  nameWithType: Pose.WorkingSitting
  fullName: TinyLife.Objects.Pose.WorkingSitting
- uid: TinyLife.Utilities.Extensions.ToWorking*
  commentId: Overload:TinyLife.Utilities.Extensions.ToWorking
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ToWorking_TinyLife_Objects_Pose_
  name: ToWorking
  nameWithType: Extensions.ToWorking
  fullName: TinyLife.Utilities.Extensions.ToWorking
- uid: MLEM.Ui.Elements.Button
  commentId: T:MLEM.Ui.Elements.Button
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Button
  nameWithType: Button
  fullName: MLEM.Ui.Elements.Button
- uid: TinyLife.Utilities.Extensions.AddHoverAnimation*
  commentId: Overload:TinyLife.Utilities.Extensions.AddHoverAnimation
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_AddHoverAnimation_MLEM_Ui_Elements_Button_
  name: AddHoverAnimation
  nameWithType: Extensions.AddHoverAnimation
  fullName: TinyLife.Utilities.Extensions.AddHoverAnimation
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.Localization
  commentId: T:TinyLife.Localization
  href: TinyLife.Localization.html
  name: Localization
  nameWithType: Localization
  fullName: TinyLife.Localization
- uid: TinyLife.Utilities.Extensions.ToSimpleLocalizedString*
  commentId: Overload:TinyLife.Utilities.Extensions.ToSimpleLocalizedString
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ToSimpleLocalizedString_System_TimeSpan_
  name: ToSimpleLocalizedString
  nameWithType: Extensions.ToSimpleLocalizedString
  fullName: TinyLife.Utilities.Extensions.ToSimpleLocalizedString
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Tools.FurnitureTool.Tab
  commentId: T:TinyLife.Tools.FurnitureTool.Tab
  parent: TinyLife.Tools
  href: TinyLife.Tools.FurnitureTool.html
  name: FurnitureTool.Tab
  nameWithType: FurnitureTool.Tab
  fullName: TinyLife.Tools.FurnitureTool.Tab
  spec.csharp:
  - uid: TinyLife.Tools.FurnitureTool
    name: FurnitureTool
    href: TinyLife.Tools.FurnitureTool.html
  - name: .
  - uid: TinyLife.Tools.FurnitureTool.Tab
    name: Tab
    href: TinyLife.Tools.FurnitureTool.Tab.html
  spec.vb:
  - uid: TinyLife.Tools.FurnitureTool
    name: FurnitureTool
    href: TinyLife.Tools.FurnitureTool.html
  - name: .
  - uid: TinyLife.Tools.FurnitureTool.Tab
    name: Tab
    href: TinyLife.Tools.FurnitureTool.Tab.html
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectCategory.html
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Utilities.Extensions.GetDefaultTab*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDefaultTab
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultTab_TinyLife_Objects_ObjectCategory_
  name: GetDefaultTab
  nameWithType: Extensions.GetDefaultTab
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  href: TinyLife.html
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Tools
    name: Tools
    href: TinyLife.Tools.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Tools
    name: Tools
    href: TinyLife.Tools.html
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  href: TinyLife.Objects.FurnitureType.TypeSettings.html#TinyLife_Objects_FurnitureType_TypeSettings_DirtyOverlayTextureName
  name: DirtyOverlayTextureName
  nameWithType: FurnitureType.TypeSettings.DirtyOverlayTextureName
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
- uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultDirtyOverlayTextureName_TinyLife_Objects_ObjectCategory_
  name: GetDefaultDirtyOverlayTextureName
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
- uid: TinyLife.World.LockType
  commentId: T:TinyLife.World.LockType
  parent: TinyLife.World
  href: TinyLife.World.LockType.html
  name: LockType
  nameWithType: LockType
  fullName: TinyLife.World.LockType
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  href: TinyLife.World.Lot.html
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Utilities.Extensions.IsLockedFor*
  commentId: Overload:TinyLife.Utilities.Extensions.IsLockedFor
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsLockedFor_TinyLife_World_LockType_TinyLife_Objects_PersonLike_TinyLife_World_Lot_
  name: IsLockedFor
  nameWithType: Extensions.IsLockedFor
  fullName: TinyLife.Utilities.Extensions.IsLockedFor
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: TinyLife.Utilities.Extensions.DrawIsoArea*
  commentId: Overload:TinyLife.Utilities.Extensions.DrawIsoArea
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_DrawIsoArea_Microsoft_Xna_Framework_Graphics_SpriteBatch_MLEM_Maths_RectangleF_System_Single_Microsoft_Xna_Framework_Color_System_Int32_System_Boolean_System_Single_
  name: DrawIsoArea
  nameWithType: Extensions.DrawIsoArea
  fullName: TinyLife.Utilities.Extensions.DrawIsoArea
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: MLEM.Maths.RectangleF
  commentId: T:MLEM.Maths.RectangleF
  parent: MLEM.Maths
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Maths.RectangleF
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Func{Microsoft.Xna.Framework.Vector2,System.Single,System.Single}
  commentId: T:System.Func{Microsoft.Xna.Framework.Vector2,System.Single,System.Single}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<Vector2, float, float>
  nameWithType: Func<Vector2, float, float>
  fullName: System.Func<Microsoft.Xna.Framework.Vector2, float, float>
  nameWithType.vb: Func(Of Vector2, Single, Single)
  fullName.vb: System.Func(Of Microsoft.Xna.Framework.Vector2, Single, Single)
  name.vb: Func(Of Vector2, Single, Single)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Objects.ClothesLayer
  commentId: T:TinyLife.Objects.ClothesLayer
  parent: TinyLife.Objects
  href: TinyLife.Objects.ClothesLayer.html
  name: ClothesLayer
  nameWithType: ClothesLayer
  fullName: TinyLife.Objects.ClothesLayer
- uid: TinyLife.Objects.ClothesLayer.Body
  commentId: F:TinyLife.Objects.ClothesLayer.Body
  href: TinyLife.Objects.ClothesLayer.html#TinyLife_Objects_ClothesLayer_Body
  name: Body
  nameWithType: ClothesLayer.Body
  fullName: TinyLife.Objects.ClothesLayer.Body
- uid: TinyLife.Objects.ClothesLayer.Eyes
  commentId: F:TinyLife.Objects.ClothesLayer.Eyes
  href: TinyLife.Objects.ClothesLayer.html#TinyLife_Objects_ClothesLayer_Eyes
  name: Eyes
  nameWithType: ClothesLayer.Eyes
  fullName: TinyLife.Objects.ClothesLayer.Eyes
- uid: TinyLife.Utilities.Extensions.IsPartOfPerson*
  commentId: Overload:TinyLife.Utilities.Extensions.IsPartOfPerson
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsPartOfPerson_TinyLife_Objects_ClothesLayer_
  name: IsPartOfPerson
  nameWithType: Extensions.IsPartOfPerson
  fullName: TinyLife.Utilities.Extensions.IsPartOfPerson
- uid: MLEM.Ui.RootElement
  commentId: T:MLEM.Ui.RootElement
  parent: MLEM.Ui
  isExternal: true
  name: RootElement
  nameWithType: RootElement
  fullName: MLEM.Ui.RootElement
- uid: TinyLife.Utilities.Extensions.SetPauseGame*
  commentId: Overload:TinyLife.Utilities.Extensions.SetPauseGame
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_SetPauseGame_MLEM_Ui_RootElement_System_Boolean_
  name: SetPauseGame
  nameWithType: Extensions.SetPauseGame
  fullName: TinyLife.Utilities.Extensions.SetPauseGame
- uid: MLEM.Ui
  commentId: N:MLEM.Ui
  isExternal: true
  name: MLEM.Ui
  nameWithType: MLEM.Ui
  fullName: MLEM.Ui
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: TinyLife.Utilities.Extensions.IsActiveRoot*
  commentId: Overload:TinyLife.Utilities.Extensions.IsActiveRoot
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsActiveRoot_MLEM_Ui_Elements_Element_
  name: IsActiveRoot
  nameWithType: Extensions.IsActiveRoot
  fullName: TinyLife.Utilities.Extensions.IsActiveRoot
- uid: TinyLife.Objects.Outfit
  commentId: T:TinyLife.Objects.Outfit
  parent: TinyLife.Objects
  href: TinyLife.Objects.Outfit.html
  name: Outfit
  nameWithType: Outfit
  fullName: TinyLife.Objects.Outfit
- uid: TinyLife.Objects.ClothesIntention
  commentId: T:TinyLife.Objects.ClothesIntention
  parent: TinyLife.Objects
  href: TinyLife.Objects.ClothesIntention.html
  name: ClothesIntention
  nameWithType: ClothesIntention
  fullName: TinyLife.Objects.ClothesIntention
- uid: TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  href: TinyLife.Objects.Outfit.html#TinyLife_Objects_Outfit_GetIntentionPercentage_TinyLife_Objects_ClothesIntention_
  name: GetIntentionPercentage(ClothesIntention)
  nameWithType: Outfit.GetIntentionPercentage(ClothesIntention)
  fullName: TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  spec.csharp:
  - uid: TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
    name: GetIntentionPercentage
    href: TinyLife.Objects.Outfit.html#TinyLife_Objects_Outfit_GetIntentionPercentage_TinyLife_Objects_ClothesIntention_
  - name: (
  - uid: TinyLife.Objects.ClothesIntention
    name: ClothesIntention
    href: TinyLife.Objects.ClothesIntention.html
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
    name: GetIntentionPercentage
    href: TinyLife.Objects.Outfit.html#TinyLife_Objects_Outfit_GetIntentionPercentage_TinyLife_Objects_ClothesIntention_
  - name: (
  - uid: TinyLife.Objects.ClothesIntention
    name: ClothesIntention
    href: TinyLife.Objects.ClothesIntention.html
  - name: )
- uid: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage*
  commentId: Overload:TinyLife.Utilities.Extensions.GetRequiredMatchPercentage
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetRequiredMatchPercentage_TinyLife_Objects_ClothesIntention_
  name: GetRequiredMatchPercentage
  nameWithType: Extensions.GetRequiredMatchPercentage
  fullName: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage
- uid: TinyLife.Utilities.Extensions.IsAvailableForAge*
  commentId: Overload:TinyLife.Utilities.Extensions.IsAvailableForAge
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsAvailableForAge_TinyLife_Objects_ClothesIntention_TinyLife_Objects_AgeGroup_
  name: IsAvailableForAge
  nameWithType: Extensions.IsAvailableForAge
  fullName: TinyLife.Utilities.Extensions.IsAvailableForAge
- uid: System.DayOfWeek
  commentId: T:System.DayOfWeek
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.dayofweek
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: TinyLife.Utilities.Extensions.Weekday*
  commentId: Overload:TinyLife.Utilities.Extensions.Weekday
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_Weekday_System_TimeSpan_
  name: Weekday
  nameWithType: Extensions.Weekday
  fullName: TinyLife.Utilities.Extensions.Weekday
- uid: Microsoft.Xna.Framework.Input.Buttons
  commentId: T:Microsoft.Xna.Framework.Input.Buttons
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Buttons
  nameWithType: Buttons
  fullName: Microsoft.Xna.Framework.Input.Buttons
- uid: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Microsoft.Xna.Framework.Input.Buttons},Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Func{System.Boolean})
  commentId: M:TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Microsoft.Xna.Framework.Input.Buttons},Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Func{System.Boolean})
  isExternal: true
  href: TinyLife.Uis.Menus.html#TinyLife_Uis_Menus_GamepadHint_MLEM_Ui_Anchor_System_Func_TinyLife_Options_Microsoft_Xna_Framework_Input_Buttons__Microsoft_Xna_Framework_Vector2_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Func_System_Boolean__
  name: GamepadHint(Anchor, Func<Options, Buttons>, Vector2, Vector2?, Func<bool>)
  nameWithType: Menus.GamepadHint(Anchor, Func<Options, Buttons>, Vector2, Vector2?, Func<bool>)
  fullName: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor, System.Func<TinyLife.Options, Microsoft.Xna.Framework.Input.Buttons>, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2?, System.Func<bool>)
  nameWithType.vb: Menus.GamepadHint(Anchor, Func(Of Options, Buttons), Vector2, Vector2?, Func(Of Boolean))
  fullName.vb: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor, System.Func(Of TinyLife.Options, Microsoft.Xna.Framework.Input.Buttons), Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2?, System.Func(Of Boolean))
  name.vb: GamepadHint(Anchor, Func(Of Options, Buttons), Vector2, Vector2?, Func(Of Boolean))
  spec.csharp:
  - uid: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Microsoft.Xna.Framework.Input.Buttons},Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Func{System.Boolean})
    name: GamepadHint
    href: TinyLife.Uis.Menus.html#TinyLife_Uis_Menus_GamepadHint_MLEM_Ui_Anchor_System_Func_TinyLife_Options_Microsoft_Xna_Framework_Input_Buttons__Microsoft_Xna_Framework_Vector2_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Func_System_Boolean__
  - name: (
  - uid: MLEM.Ui.Anchor
    name: Anchor
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Options
    name: Options
    href: TinyLife.Options.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Buttons
    name: Buttons
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Microsoft.Xna.Framework.Input.Buttons},Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Func{System.Boolean})
    name: GamepadHint
    href: TinyLife.Uis.Menus.html#TinyLife_Uis_Menus_GamepadHint_MLEM_Ui_Anchor_System_Func_TinyLife_Options_Microsoft_Xna_Framework_Input_Buttons__Microsoft_Xna_Framework_Vector2_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Func_System_Boolean__
  - name: (
  - uid: MLEM.Ui.Anchor
    name: Anchor
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Options
    name: Options
    href: TinyLife.Options.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Buttons
    name: Buttons
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: TinyLife.Utilities.Extensions.Icon*
  commentId: Overload:TinyLife.Utilities.Extensions.Icon
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_Icon_Microsoft_Xna_Framework_Input_Buttons_
  name: Icon
  nameWithType: Extensions.Icon
  fullName: TinyLife.Utilities.Extensions.Icon
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: true
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: MLEM.Input.MouseButton
  commentId: T:MLEM.Input.MouseButton
  parent: MLEM.Input
  isExternal: true
  name: MouseButton
  nameWithType: MouseButton
  fullName: MLEM.Input.MouseButton
- uid: MLEM.Input
  commentId: N:MLEM.Input
  isExternal: true
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Input
    name: Input
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Input
    name: Input
    isExternal: true
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  href: TinyLife.PersonalityType.html
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.Skills.FoodType.FoodRestriction
  commentId: T:TinyLife.Skills.FoodType.FoodRestriction
  parent: TinyLife.Skills
  href: TinyLife.Skills.FoodType.html
  name: FoodType.FoodRestriction
  nameWithType: FoodType.FoodRestriction
  fullName: TinyLife.Skills.FoodType.FoodRestriction
  spec.csharp:
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    href: TinyLife.Skills.FoodType.html
  - name: .
  - uid: TinyLife.Skills.FoodType.FoodRestriction
    name: FoodRestriction
    href: TinyLife.Skills.FoodType.FoodRestriction.html
  spec.vb:
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    href: TinyLife.Skills.FoodType.html
  - name: .
  - uid: TinyLife.Skills.FoodType.FoodRestriction
    name: FoodRestriction
    href: TinyLife.Skills.FoodType.FoodRestriction.html
- uid: TinyLife.Utilities.Extensions.GetPersonality*
  commentId: Overload:TinyLife.Utilities.Extensions.GetPersonality
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetPersonality_TinyLife_Skills_FoodType_FoodRestriction_TinyLife_Objects_PersonLike_
  name: GetPersonality
  nameWithType: Extensions.GetPersonality
  fullName: TinyLife.Utilities.Extensions.GetPersonality
- uid: TinyLife.Utilities.Extensions.GetDescription*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDescription
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDescription_TinyLife_Objects_ClothesIntention_System_Nullable_TinyLife_Objects_AgeGroup__
  name: GetDescription
  nameWithType: Extensions.GetDescription
  fullName: TinyLife.Utilities.Extensions.GetDescription
- uid: System.Nullable{TinyLife.Objects.AgeGroup}
  commentId: T:System.Nullable{TinyLife.Objects.AgeGroup}
  parent: System
  definition: System.Nullable`1
  href: TinyLife.Objects.AgeGroup.html
  name: AgeGroup?
  nameWithType: AgeGroup?
  fullName: TinyLife.Objects.AgeGroup?
  spec.csharp:
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    href: TinyLife.Objects.AgeGroup.html
  - name: '?'
  spec.vb:
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    href: TinyLife.Objects.AgeGroup.html
  - name: '?'
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Objects.LifeSpan
  commentId: T:TinyLife.Objects.LifeSpan
  parent: TinyLife.Objects
  href: TinyLife.Objects.LifeSpan.html
  name: LifeSpan
  nameWithType: LifeSpan
  fullName: TinyLife.Objects.LifeSpan
- uid: TinyLife.Objects.LifeSpan.Infinite
  commentId: F:TinyLife.Objects.LifeSpan.Infinite
  href: TinyLife.Objects.LifeSpan.html#TinyLife_Objects_LifeSpan_Infinite
  name: Infinite
  nameWithType: LifeSpan.Infinite
  fullName: TinyLife.Objects.LifeSpan.Infinite
- uid: TinyLife.Utilities.Extensions.Multiplier*
  commentId: Overload:TinyLife.Utilities.Extensions.Multiplier
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_Multiplier_TinyLife_Objects_LifeSpan_
  name: Multiplier
  nameWithType: Extensions.Multiplier
  fullName: TinyLife.Utilities.Extensions.Multiplier
- uid: TinyLife.Utilities.Extensions.GetPregnancyHours*
  commentId: Overload:TinyLife.Utilities.Extensions.GetPregnancyHours
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetPregnancyHours_TinyLife_Objects_LifeSpan_
  name: GetPregnancyHours
  nameWithType: Extensions.GetPregnancyHours
  fullName: TinyLife.Utilities.Extensions.GetPregnancyHours
- uid: TinyLife.Objects.AgeGroup.Elder
  commentId: F:TinyLife.Objects.AgeGroup.Elder
  href: TinyLife.Objects.AgeGroup.html#TinyLife_Objects_AgeGroup_Elder
  name: Elder
  nameWithType: AgeGroup.Elder
  fullName: TinyLife.Objects.AgeGroup.Elder
- uid: TinyLife.Utilities.Extensions.GetDaysBeforeAging*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDaysBeforeAging
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDaysBeforeAging_TinyLife_Objects_AgeGroup_TinyLife_Objects_LifeSpan_
  name: GetDaysBeforeAging
  nameWithType: Extensions.GetDaysBeforeAging
  fullName: TinyLife.Utilities.Extensions.GetDaysBeforeAging
- uid: MLEM.Ui.Elements.Panel
  commentId: T:MLEM.Ui.Elements.Panel
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Panel
  nameWithType: Panel
  fullName: MLEM.Ui.Elements.Panel
- uid: TinyLife.Utilities.Extensions.AddGamepadScrolling*
  commentId: Overload:TinyLife.Utilities.Extensions.AddGamepadScrolling
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_AddGamepadScrolling_MLEM_Ui_Elements_Panel_
  name: AddGamepadScrolling
  nameWithType: Extensions.AddGamepadScrolling
  fullName: TinyLife.Utilities.Extensions.AddGamepadScrolling
- uid: TinyLife.Utilities.Extensions.AddProgressArrows*
  commentId: Overload:TinyLife.Utilities.Extensions.AddProgressArrows
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_AddProgressArrows_MLEM_Ui_Elements_Element_System_Func_System_Single__System_Func_System_Single__System_Func_System_Single__System_Func_Microsoft_Xna_Framework_Color__
  name: AddProgressArrows
  nameWithType: Extensions.AddProgressArrows
  fullName: TinyLife.Utilities.Extensions.AddProgressArrows
- uid: System.Func{System.Single}
  commentId: T:System.Func{System.Single}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<float>
  nameWithType: Func<float>
  fullName: System.Func<float>
  nameWithType.vb: Func(Of Single)
  fullName.vb: System.Func(Of Single)
  name.vb: Func(Of Single)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Func{Microsoft.Xna.Framework.Color}
  commentId: T:System.Func{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Color>
  nameWithType: Func<Color>
  fullName: System.Func<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Func(Of Color)
  fullName.vb: System.Func(Of Microsoft.Xna.Framework.Color)
  name.vb: Func(Of Color)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: )
- uid: System.ValueTuple{MLEM.Ui.Elements.Group,MLEM.Ui.Elements.Image[]}
  commentId: T:System.ValueTuple{MLEM.Ui.Elements.Group,MLEM.Ui.Elements.Image[]}
  parent: System
  definition: System.ValueTuple`2
  name: (Group, Image[])
  nameWithType: (Group, Image[])
  fullName: (MLEM.Ui.Elements.Group, MLEM.Ui.Elements.Image[])
  nameWithType.vb: (Group, Image())
  fullName.vb: (MLEM.Ui.Elements.Group, MLEM.Ui.Elements.Image())
  name.vb: (Group, Image())
  spec.csharp:
  - name: (
  - uid: MLEM.Ui.Elements.Group
    name: Group
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Image
    name: Image
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - name: (
  - uid: MLEM.Ui.Elements.Group
    name: Group
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Image
    name: Image
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Utilities.Extensions.ToTimestampString*
  commentId: Overload:TinyLife.Utilities.Extensions.ToTimestampString
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ToTimestampString_System_TimeSpan_
  name: ToTimestampString
  nameWithType: Extensions.ToTimestampString
  fullName: TinyLife.Utilities.Extensions.ToTimestampString
- uid: TinyLife.Utilities.Extensions.IsBetween*
  commentId: Overload:TinyLife.Utilities.Extensions.IsBetween
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsBetween_System_ValueTuple_System_Int32_System_Int32__System_Int32_
  name: IsBetween
  nameWithType: Extensions.IsBetween
  fullName: TinyLife.Utilities.Extensions.IsBetween
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: (int Start, int End)
  nameWithType: (int Start, int End)
  fullName: (int Start, int End)
  nameWithType.vb: (Start As Integer, End As Integer)
  fullName.vb: (Start As Integer, End As Integer)
  name.vb: (Start As Integer, End As Integer)
  spec.csharp:
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Start
    name: Start
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.start
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.End
    name: End
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.end
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Int32,System.Int32}.Start
    name: Start
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.start
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.End
    name: End
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.end
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TinyLife.Utilities.Extensions.Length*
  commentId: Overload:TinyLife.Utilities.Extensions.Length
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_Length_System_ValueTuple_System_Int32_System_Int32__
  name: Length
  nameWithType: Extensions.Length
  fullName: TinyLife.Utilities.Extensions.Length
- uid: TinyLife.Objects.StylePreference
  commentId: T:TinyLife.Objects.StylePreference
  parent: TinyLife.Objects
  href: TinyLife.Objects.StylePreference.html
  name: StylePreference
  nameWithType: StylePreference
  fullName: TinyLife.Objects.StylePreference
- uid: TinyLife.Objects.PregnancyAbility
  commentId: T:TinyLife.Objects.PregnancyAbility
  parent: TinyLife.Objects
  href: TinyLife.Objects.PregnancyAbility.html
  name: PregnancyAbility
  nameWithType: PregnancyAbility
  fullName: TinyLife.Objects.PregnancyAbility
- uid: TinyLife.Utilities.Extensions.GetMostFittingStyle*
  commentId: Overload:TinyLife.Utilities.Extensions.GetMostFittingStyle
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetMostFittingStyle_TinyLife_Objects_PregnancyAbility_
  name: GetMostFittingStyle
  nameWithType: Extensions.GetMostFittingStyle
  fullName: TinyLife.Utilities.Extensions.GetMostFittingStyle
- uid: TinyLife.Objects.VoiceStyle
  commentId: T:TinyLife.Objects.VoiceStyle
  parent: TinyLife.Objects
  href: TinyLife.Objects.VoiceStyle.html
  name: VoiceStyle
  nameWithType: VoiceStyle
  fullName: TinyLife.Objects.VoiceStyle
- uid: TinyLife.Utilities.Extensions.GetBedCategories*
  commentId: Overload:TinyLife.Utilities.Extensions.GetBedCategories
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetBedCategories_TinyLife_Objects_AgeGroup_
  name: GetBedCategories
  nameWithType: Extensions.GetBedCategories
  fullName: TinyLife.Utilities.Extensions.GetBedCategories
- uid: TinyLife.Utilities.Extensions.SetInWorldSnapping*
  commentId: Overload:TinyLife.Utilities.Extensions.SetInWorldSnapping
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_SetInWorldSnapping_MLEM_Ui_Elements_Tooltip_
  name: SetInWorldSnapping
  nameWithType: Extensions.SetInWorldSnapping
  fullName: TinyLife.Utilities.Extensions.SetInWorldSnapping
- uid: MLEM.Ui.Elements.Tooltip
  commentId: T:MLEM.Ui.Elements.Tooltip
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Tooltip
  nameWithType: Tooltip
  fullName: MLEM.Ui.Elements.Tooltip
- uid: TinyLife.Objects.ScreenObject.TurnOn(System.String)
  commentId: M:TinyLife.Objects.ScreenObject.TurnOn(System.String)
  parent: TinyLife.Objects.ScreenObject
  isExternal: true
  href: TinyLife.Objects.ScreenObject.html#TinyLife_Objects_ScreenObject_TurnOn_System_String_
  name: TurnOn(string)
  nameWithType: ScreenObject.TurnOn(string)
  fullName: TinyLife.Objects.ScreenObject.TurnOn(string)
  nameWithType.vb: ScreenObject.TurnOn(String)
  fullName.vb: TinyLife.Objects.ScreenObject.TurnOn(String)
  name.vb: TurnOn(String)
  spec.csharp:
  - uid: TinyLife.Objects.ScreenObject.TurnOn(System.String)
    name: TurnOn
    href: TinyLife.Objects.ScreenObject.html#TinyLife_Objects_ScreenObject_TurnOn_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.ScreenObject.TurnOn(System.String)
    name: TurnOn
    href: TinyLife.Objects.ScreenObject.html#TinyLife_Objects_ScreenObject_TurnOn_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: TinyLife.Utilities.Extensions.ScreenContent*
  commentId: Overload:TinyLife.Utilities.Extensions.ScreenContent
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ScreenContent_TinyLife_Objects_Television_Channel_
  name: ScreenContent
  nameWithType: Extensions.ScreenContent
  fullName: TinyLife.Utilities.Extensions.ScreenContent
- uid: TinyLife.Objects.Television.Channel
  commentId: T:TinyLife.Objects.Television.Channel
  parent: TinyLife.Objects
  href: TinyLife.Objects.Television.html
  name: Television.Channel
  nameWithType: Television.Channel
  fullName: TinyLife.Objects.Television.Channel
  spec.csharp:
  - uid: TinyLife.Objects.Television
    name: Television
    href: TinyLife.Objects.Television.html
  - name: .
  - uid: TinyLife.Objects.Television.Channel
    name: Channel
    href: TinyLife.Objects.Television.Channel.html
  spec.vb:
  - uid: TinyLife.Objects.Television
    name: Television
    href: TinyLife.Objects.Television.html
  - name: .
  - uid: TinyLife.Objects.Television.Channel
    name: Channel
    href: TinyLife.Objects.Television.Channel.html
- uid: TinyLife.Objects.ScreenObject
  commentId: T:TinyLife.Objects.ScreenObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.ScreenObject.html
  name: ScreenObject
  nameWithType: ScreenObject
  fullName: TinyLife.Objects.ScreenObject
- uid: MLEM.Ui.UiSystem
  commentId: T:MLEM.Ui.UiSystem
  parent: MLEM.Ui
  isExternal: true
  name: UiSystem
  nameWithType: UiSystem
  fullName: MLEM.Ui.UiSystem
- uid: MLEM.Ui.Elements.TextField
  commentId: T:MLEM.Ui.Elements.TextField
  isExternal: true
  name: TextField
  nameWithType: TextField
  fullName: MLEM.Ui.Elements.TextField
- uid: TinyLife.Utilities.Extensions.IsTextFieldSelected*
  commentId: Overload:TinyLife.Utilities.Extensions.IsTextFieldSelected
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_IsTextFieldSelected_MLEM_Ui_UiSystem_
  name: IsTextFieldSelected
  nameWithType: Extensions.IsTextFieldSelected
  fullName: TinyLife.Utilities.Extensions.IsTextFieldSelected
- uid: TinyLife.Utilities.Extensions.Slugify*
  commentId: Overload:TinyLife.Utilities.Extensions.Slugify
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_Slugify_System_String_
  name: Slugify
  nameWithType: Extensions.Slugify
  fullName: TinyLife.Utilities.Extensions.Slugify
- uid: Microsoft.Xna.Framework.Audio.SoundEffect
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffect
  parent: Microsoft.Xna.Framework.Audio
  isExternal: true
  name: SoundEffect
  nameWithType: SoundEffect
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect
- uid: TinyLife.Utilities.Extensions.Get*
  commentId: Overload:TinyLife.Utilities.Extensions.Get
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_Get_TinyLife_Utilities_DefaultSound_
  name: Get
  nameWithType: Extensions.Get
  fullName: TinyLife.Utilities.Extensions.Get
- uid: TinyLife.Utilities.DefaultSound
  commentId: T:TinyLife.Utilities.DefaultSound
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.DefaultSound.html
  name: DefaultSound
  nameWithType: DefaultSound
  fullName: TinyLife.Utilities.DefaultSound
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: true
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Audio
    name: Audio
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Audio
    name: Audio
    isExternal: true
- uid: TinyLife.Utilities.Extensions.ConcatIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:TinyLife.Utilities.Extensions.ConcatIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ConcatIfAny__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  name: ConcatIfAny<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Extensions.ConcatIfAny<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: TinyLife.Utilities.Extensions.ConcatIfAny<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: Extensions.ConcatIfAny(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: TinyLife.Utilities.Extensions.ConcatIfAny(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: ConcatIfAny(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.ConcatIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: ConcatIfAny
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ConcatIfAny__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.ConcatIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: ConcatIfAny
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ConcatIfAny__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: TinyLife.Utilities.Extensions.PrependIfAny*
  commentId: Overload:TinyLife.Utilities.Extensions.PrependIfAny
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_PrependIfAny__1_System_Collections_Generic_IEnumerable___0____0_
  name: PrependIfAny
  nameWithType: Extensions.PrependIfAny
  fullName: TinyLife.Utilities.Extensions.PrependIfAny
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.AppendIfAny*
  commentId: Overload:TinyLife.Utilities.Extensions.AppendIfAny
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_AppendIfAny__1_System_Collections_Generic_IEnumerable___0____0_
  name: AppendIfAny
  nameWithType: Extensions.AppendIfAny
  fullName: TinyLife.Utilities.Extensions.AppendIfAny
- uid: TinyLife.Actions.MultiAction.CreateFirstActions
  commentId: M:TinyLife.Actions.MultiAction.CreateFirstActions
  parent: TinyLife.Actions.MultiAction
  href: TinyLife.Actions.MultiAction.html#TinyLife_Actions_MultiAction_CreateFirstActions
  name: CreateFirstActions()
  nameWithType: MultiAction.CreateFirstActions()
  fullName: TinyLife.Actions.MultiAction.CreateFirstActions()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.CreateFirstActions
    name: CreateFirstActions
    href: TinyLife.Actions.MultiAction.html#TinyLife_Actions_MultiAction_CreateFirstActions
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.CreateFirstActions
    name: CreateFirstActions
    href: TinyLife.Actions.MultiAction.html#TinyLife_Actions_MultiAction_CreateFirstActions
  - name: (
  - name: )
- uid: TinyLife.Actions.MultiAction.CreateLastActions
  commentId: M:TinyLife.Actions.MultiAction.CreateLastActions
  parent: TinyLife.Actions.MultiAction
  href: TinyLife.Actions.MultiAction.html#TinyLife_Actions_MultiAction_CreateLastActions
  name: CreateLastActions()
  nameWithType: MultiAction.CreateLastActions()
  fullName: TinyLife.Actions.MultiAction.CreateLastActions()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.CreateLastActions
    name: CreateLastActions
    href: TinyLife.Actions.MultiAction.html#TinyLife_Actions_MultiAction_CreateLastActions
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.CreateLastActions
    name: CreateLastActions
    href: TinyLife.Actions.MultiAction.html#TinyLife_Actions_MultiAction_CreateLastActions
  - name: (
  - name: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection{TinyLife.Actions.Action})
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection{TinyLife.Actions.Action})
  isExternal: true
  href: TinyLife.Actions.Handlers.MultiActionHandler.html#TinyLife_Actions_Handlers_MultiActionHandler_Initialize_System_Collections_Generic_ICollection_TinyLife_Actions_Action__
  name: Initialize(ICollection<Action>)
  nameWithType: MultiActionHandler.Initialize(ICollection<Action>)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection<TinyLife.Actions.Action>)
  nameWithType.vb: MultiActionHandler.Initialize(ICollection(Of Action))
  fullName.vb: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection(Of TinyLife.Actions.Action))
  name.vb: Initialize(ICollection(Of Action))
  spec.csharp:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection{TinyLife.Actions.Action})
    name: Initialize
    href: TinyLife.Actions.Handlers.MultiActionHandler.html#TinyLife_Actions_Handlers_MultiActionHandler_Initialize_System_Collections_Generic_ICollection_TinyLife_Actions_Action__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection{TinyLife.Actions.Action})
    name: Initialize
    href: TinyLife.Actions.Handlers.MultiActionHandler.html#TinyLife_Actions_Handlers_MultiActionHandler_Initialize_System_Collections_Generic_ICollection_TinyLife_Actions_Action__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
  - name: )
- uid: TinyLife.Utilities.Extensions.ConcatIfAny*
  commentId: Overload:TinyLife.Utilities.Extensions.ConcatIfAny
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_ConcatIfAny__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  name: ConcatIfAny
  nameWithType: Extensions.ConcatIfAny
  fullName: TinyLife.Utilities.Extensions.ConcatIfAny
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  href: TinyLife.Actions.MultiAction.html
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
