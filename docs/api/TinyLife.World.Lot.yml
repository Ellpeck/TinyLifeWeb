### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  id: Lot
  parent: TinyLife.World
  children:
  - TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  - TinyLife.World.Lot.AreRequirementsMet
  - TinyLife.World.Lot.Area
  - TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  - TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IEnumerable{TinyLife.Objects.AgeGroup},System.Func{System.Int32,System.Int32,System.Boolean})
  - TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IList{TinyLife.Objects.PersonLike})
  - TinyLife.World.Lot.CanOccupy(System.ValueTuple{System.Collections.Generic.List{TinyLife.Objects.AgeGroup},System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},TinyLife.World.Household.Relation}})
  - TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
  - TinyLife.World.Lot.Clear(System.Boolean,System.Boolean)
  - TinyLife.World.Lot.Export
  - TinyLife.World.Lot.GetCoveredArea
  - TinyLife.World.Lot.GetDefaultTile
  - TinyLife.World.Lot.GetExportedLots
  - TinyLife.World.Lot.GetFrontDoor
  - TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.PersonLike)
  - TinyLife.World.Lot.GetObjects``1
  - TinyLife.World.Lot.GetPrice
  - TinyLife.World.Lot.GetRoofs
  - TinyLife.World.Lot.GetRooms
  - TinyLife.World.Lot.GetStairs
  - TinyLife.World.Lot.GetTiles
  - TinyLife.World.Lot.GetValidOccupyingAges
  - TinyLife.World.Lot.GetWalls``1
  - TinyLife.World.Lot.HasBasicAmenities
  - TinyLife.World.Lot.Household
  - TinyLife.World.Lot.Id
  - TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  - TinyLife.World.Lot.Map
  - TinyLife.World.Lot.MaxFloor
  - TinyLife.World.Lot.MinFloor
  - TinyLife.World.Lot.Name
  - TinyLife.World.Lot.OnGetExportedLots
  - TinyLife.World.Lot.Type
  - TinyLife.World.Lot.Validate(TinyLife.World.Map)
  langs:
  - csharp
  - vb
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
  type: Class
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    A lot is a designated area in the world (created using the <xref href="TinyLife.Tools.LotTool" data-throw-if-not-resolved="false"></xref>).

    In the way it works, it acts similarly to a small <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref>, allowing the retrieval of various object types only in its designated area.

    A lot has a <xref href="TinyLife.World.LotType" data-throw-if-not-resolved="false"></xref>, which determines what things can be done on the lot.
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Lot : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Lot Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Lot.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Lot.OnGetExportedLots
  commentId: E:TinyLife.World.Lot.OnGetExportedLots
  id: OnGetExportedLots
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: OnGetExportedLots
  nameWithType: Lot.OnGetExportedLots
  fullName: TinyLife.World.Lot.OnGetExportedLots
  type: Event
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: An event that is invoked in <xref href="TinyLife.World.Lot.GetExportedLots" data-throw-if-not-resolved="false"></xref> which allows mods to add custom default lots to the game.
  example: []
  syntax:
    content: public static event Action<JsonSerializer, List<(FileInfo File, ExportedLot Lot, string DisplayName, bool Hidden)>> OnGetExportedLots
    return:
      type: System.Action{Newtonsoft.Json.JsonSerializer,System.Collections.Generic.List{System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}}}
    content.vb: Public Shared Event OnGetExportedLots As Action(Of JsonSerializer, List(Of (File As FileInfo, Lot As ExportedLot, DisplayName As String, Hidden As Boolean)))
- uid: TinyLife.World.Lot.Id
  commentId: F:TinyLife.World.Lot.Id
  id: Id
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Lot.Id
  fullName: TinyLife.World.Lot.Id
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    The unique id of this lot.

    This is randomly generated when the lot is first added to the world, and then persists across savings to disk.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Guid Id
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public ReadOnly Id As Guid
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Lot.Area
  commentId: P:TinyLife.World.Lot.Area
  id: Area
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
  type: Property
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The area in the world that this lot occupies
  example: []
  syntax:
    content: >-
      [DataMember]

      public Rectangle Area { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Rectangle
    content.vb: >-
      <DataMember>

      Public Property Area As Rectangle
  overload: TinyLife.World.Lot.Area*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Lot.Type
  commentId: P:TinyLife.World.Lot.Type
  id: Type
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Lot.Type
  fullName: TinyLife.World.Lot.Type
  type: Property
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    The <xref href="TinyLife.World.LotType" data-throw-if-not-resolved="false"></xref> that this lot has.

    This value defaults to the "Residential" lot type.
  example: []
  syntax:
    content: public LotType Type { get; set; }
    parameters: []
    return:
      type: TinyLife.World.LotType
    content.vb: Public Property Type As LotType
  overload: TinyLife.World.Lot.Type*
- uid: TinyLife.World.Lot.Household
  commentId: P:TinyLife.World.Lot.Household
  id: Household
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Household
  nameWithType: Lot.Household
  fullName: TinyLife.World.Lot.Household
  type: Property
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    The household that is currently occupying this <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref>.

    This can only be non-null if the <xref href="TinyLife.World.Lot.Type" data-throw-if-not-resolved="false"></xref> has <xref href="TinyLife.World.LotType.IsResidential" data-throw-if-not-resolved="false"></xref> set to true.
  example: []
  syntax:
    content: public Household Household { get; }
    parameters: []
    return:
      type: TinyLife.World.Household
    content.vb: Public ReadOnly Property Household As Household
  overload: TinyLife.World.Lot.Household*
- uid: TinyLife.World.Lot.Name
  commentId: F:TinyLife.World.Lot.Name
  id: Name
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Lot.Name
  fullName: TinyLife.World.Lot.Name
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The name of this lot, as set by the player in build mode
  example: []
  syntax:
    content: >-
      [DataMember]

      public string Name
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Name As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Lot.Map
  commentId: P:TinyLife.World.Lot.Map
  id: Map
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Lot.Map
  fullName: TinyLife.World.Lot.Map
  type: Property
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The map that this lot is on.
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public Property Map As Map
  overload: TinyLife.World.Lot.Map*
- uid: TinyLife.World.Lot.MinFloor
  commentId: P:TinyLife.World.Lot.MinFloor
  id: MinFloor
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: MinFloor
  nameWithType: Lot.MinFloor
  fullName: TinyLife.World.Lot.MinFloor
  type: Property
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public int MinFloor { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MinFloor As Integer
  overload: TinyLife.World.Lot.MinFloor*
- uid: TinyLife.World.Lot.MaxFloor
  commentId: P:TinyLife.World.Lot.MaxFloor
  id: MaxFloor
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: MaxFloor
  nameWithType: Lot.MaxFloor
  fullName: TinyLife.World.Lot.MaxFloor
  type: Property
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public int MaxFloor { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MaxFloor As Integer
  overload: TinyLife.World.Lot.MaxFloor*
- uid: TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  commentId: M:TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  id: '#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)'
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Lot(Map, Rectangle)
  nameWithType: Lot.Lot(Map, Rectangle)
  fullName: TinyLife.World.Lot.Lot(TinyLife.World.Map, Microsoft.Xna.Framework.Rectangle)
  type: Constructor
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Creates a new lot on the given map with the given area
  example: []
  syntax:
    content: public Lot(Map map, Rectangle area)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: area
      type: Microsoft.Xna.Framework.Rectangle
      description: The area
    content.vb: Public Sub New(map As Map, area As Rectangle)
  overload: TinyLife.World.Lot.#ctor*
  nameWithType.vb: Lot.New(Map, Rectangle)
  fullName.vb: TinyLife.World.Lot.New(TinyLife.World.Map, Microsoft.Xna.Framework.Rectangle)
  name.vb: New(Map, Rectangle)
- uid: TinyLife.World.Lot.Validate(TinyLife.World.Map)
  commentId: M:TinyLife.World.Lot.Validate(TinyLife.World.Map)
  id: Validate(TinyLife.World.Map)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Validate(Map)
  nameWithType: Lot.Validate(Map)
  fullName: TinyLife.World.Lot.Validate(TinyLife.World.Map)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: This method is called when this object is loaded from disk.
  example: []
  syntax:
    content: public void Validate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
    content.vb: Public Sub Validate(map As Map)
  overload: TinyLife.World.Lot.Validate*
- uid: TinyLife.World.Lot.GetObjects``1
  commentId: M:TinyLife.World.Lot.GetObjects``1
  id: GetObjects``1
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetObjects<T>()
  nameWithType: Lot.GetObjects<T>()
  fullName: TinyLife.World.Lot.GetObjects<T>()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns the set of all of the <xref href="TinyLife.Objects.MapObject" data-throw-if-not-resolved="false"></xref> instances on this lot's map that are contained in this lot's <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IEnumerable<T> GetObjects<T>()
    typeParameters:
    - id: T
      description: The type of objects to receive
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: This lot's objects
    content.vb: Public Function GetObjects(Of T)() As IEnumerable(Of T)
  overload: TinyLife.World.Lot.GetObjects*
  nameWithType.vb: Lot.GetObjects(Of T)()
  fullName.vb: TinyLife.World.Lot.GetObjects(Of T)()
  name.vb: GetObjects(Of T)()
- uid: TinyLife.World.Lot.GetWalls``1
  commentId: M:TinyLife.World.Lot.GetWalls``1
  id: GetWalls``1
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetWalls<T>()
  nameWithType: Lot.GetWalls<T>()
  fullName: TinyLife.World.Lot.GetWalls<T>()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns a set of all of the <xref href="TinyLife.Objects.WallLike" data-throw-if-not-resolved="false"></xref> instances on this lot's map that are contained in this lot's <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: 'public IEnumerable<T> GetWalls<T>() where T : WallLike'
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: This lot's walls
    content.vb: Public Function GetWalls(Of T As WallLike)() As IEnumerable(Of T)
  overload: TinyLife.World.Lot.GetWalls*
  nameWithType.vb: Lot.GetWalls(Of T)()
  fullName.vb: TinyLife.World.Lot.GetWalls(Of T)()
  name.vb: GetWalls(Of T)()
- uid: TinyLife.World.Lot.GetRoofs
  commentId: M:TinyLife.World.Lot.GetRoofs
  id: GetRoofs
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetRoofs()
  nameWithType: Lot.GetRoofs()
  fullName: TinyLife.World.Lot.GetRoofs()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns a set of all of the <xref href="TinyLife.World.Roof" data-throw-if-not-resolved="false"></xref> instances on this lot's map that are contained in this lot's <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public IEnumerable<Roof> GetRoofs()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
      description: ''
    content.vb: Public Function GetRoofs() As IEnumerable(Of Roof)
  overload: TinyLife.World.Lot.GetRoofs*
- uid: TinyLife.World.Lot.GetStairs
  commentId: M:TinyLife.World.Lot.GetStairs
  id: GetStairs
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetStairs()
  nameWithType: Lot.GetStairs()
  fullName: TinyLife.World.Lot.GetStairs()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns a set of all of the <xref href="TinyLife.World.Stairs" data-throw-if-not-resolved="false"></xref> on this lot's map that are contained in this lot's <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref>, both partially and fully.
  example: []
  syntax:
    content: public IEnumerable<Stairs> GetStairs()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
      description: The stairs on this lot.
    content.vb: Public Function GetStairs() As IEnumerable(Of Stairs)
  overload: TinyLife.World.Lot.GetStairs*
- uid: TinyLife.World.Lot.GetTiles
  commentId: M:TinyLife.World.Lot.GetTiles
  id: GetTiles
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetTiles()
  nameWithType: Lot.GetTiles()
  fullName: TinyLife.World.Lot.GetTiles()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns a set of all of the tiles on this lot's map that are contained in this lot's <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref>, including all tiles on non-ground floors.
  example: []
  syntax:
    content: public IEnumerable<(Point Pos, int Floor, Tile Tile)> GetTiles()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
      description: All tiles on this lot.
    content.vb: Public Function GetTiles() As IEnumerable(Of (Pos As Point, Floor As Integer, Tile As Tile))
  overload: TinyLife.World.Lot.GetTiles*
- uid: TinyLife.World.Lot.GetRooms
  commentId: M:TinyLife.World.Lot.GetRooms
  id: GetRooms
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetRooms()
  nameWithType: Lot.GetRooms()
  fullName: TinyLife.World.Lot.GetRooms()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns a set of all the rooms on this lot's map that are contained in this lot's <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IEnumerable<Room> GetRooms()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Room}
      description: The rooms on this lot.
    content.vb: Public Function GetRooms() As IEnumerable(Of Room)
  overload: TinyLife.World.Lot.GetRooms*
- uid: TinyLife.World.Lot.GetDefaultTile
  commentId: M:TinyLife.World.Lot.GetDefaultTile
  id: GetDefaultTile
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetDefaultTile()
  nameWithType: Lot.GetDefaultTile()
  fullName: TinyLife.World.Lot.GetDefaultTile()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Returns the default tile for this lot, which is the tile that is most likely to be the "ground tile" in this area.

    This is a heuristic based on the tiles that are at the borders of this lot.
  example: []
  syntax:
    content: public Tile GetDefaultTile()
    return:
      type: TinyLife.World.Tile
      description: This lot's default tile.
    content.vb: Public Function GetDefaultTile() As Tile
  overload: TinyLife.World.Lot.GetDefaultTile*
- uid: TinyLife.World.Lot.AreRequirementsMet
  commentId: M:TinyLife.World.Lot.AreRequirementsMet
  id: AreRequirementsMet
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: AreRequirementsMet()
  nameWithType: Lot.AreRequirementsMet()
  fullName: TinyLife.World.Lot.AreRequirementsMet()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns whether this lot <xref href="TinyLife.World.Lot.Type" data-throw-if-not-resolved="false"></xref>'s <xref href="TinyLife.World.LotType.RequiredFurniture" data-throw-if-not-resolved="false"></xref> requirements are currently met
  example: []
  syntax:
    content: public bool AreRequirementsMet()
    return:
      type: System.Boolean
      description: true if the requirements are met, false otherwise
    content.vb: Public Function AreRequirementsMet() As Boolean
  overload: TinyLife.World.Lot.AreRequirementsMet*
- uid: TinyLife.World.Lot.GetFrontDoor
  commentId: M:TinyLife.World.Lot.GetFrontDoor
  id: GetFrontDoor
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetFrontDoor()
  nameWithType: Lot.GetFrontDoor()
  fullName: TinyLife.World.Lot.GetFrontDoor()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Returns this lot's front door, or null if there is no <xref href="TinyLife.World.Wall" data-throw-if-not-resolved="false"></xref> that matches the required conditions.

    A lot's front door is the door that is closest to the lot's object of interest, which is the first entry in <xref href="TinyLife.World.LotType.RequiredFurniture" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public (Wall Wall, Vector2 OutdoorPos) GetFrontDoor()
    return:
      type: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
      description: The lot's front door, or null if there is none.
    content.vb: Public Function GetFrontDoor() As (Wall As Wall, OutdoorPos As Vector2)
  overload: TinyLife.World.Lot.GetFrontDoor*
- uid: TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.PersonLike)
  id: GetHomeLocation(TinyLife.Objects.PersonLike)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetHomeLocation(PersonLike)
  nameWithType: Lot.GetHomeLocation(PersonLike)
  fullName: TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.PersonLike)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Returns the home location of the given <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> on this lot.

    The home position is the position of the front door, or the closest border position to the passed <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> otherwise.
  example: []
  syntax:
    content: public Vector2 GetHomeLocation(PersonLike person)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person whose home location to retrieve
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The person's home location on this lot
    content.vb: Public Function GetHomeLocation(person As PersonLike) As Vector2
  overload: TinyLife.World.Lot.GetHomeLocation*
- uid: TinyLife.World.Lot.GetPrice
  commentId: M:TinyLife.World.Lot.GetPrice
  id: GetPrice
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Lot.GetPrice()
  fullName: TinyLife.World.Lot.GetPrice()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns this lot's current price, including the prices of all furniture objects, walls, roofs, tiles and the price of its <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: This lot's total price.
    content.vb: Public Function GetPrice() As Single
  overload: TinyLife.World.Lot.GetPrice*
- uid: TinyLife.World.Lot.Export
  commentId: M:TinyLife.World.Lot.Export
  id: Export
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Export()
  nameWithType: Lot.Export()
  fullName: TinyLife.World.Lot.Export()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Exports this lot's data, including all of its <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Objects.WallLike" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.Roof" data-throw-if-not-resolved="false"></xref> obejects and its <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> ground.

    Note that this does not change the lot itself, as it doesn't remove or add anything to it.
  example: []
  syntax:
    content: public ExportedLot Export()
    return:
      type: TinyLife.World.ExportedLot
      description: An exported version of this lot
    content.vb: Public Function Export() As ExportedLot
  overload: TinyLife.World.Lot.Export*
- uid: TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  id: Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Import(ExportedLot, string, bool, bool)
  nameWithType: Lot.Import(ExportedLot, string, bool, bool)
  fullName: TinyLife.World.Lot.Import(TinyLife.World.ExportedLot, string, bool, bool)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Imports the given <xref href="TinyLife.World.ExportedLot" data-throw-if-not-resolved="false"></xref> onto this lot.

    Note that everything that was previously on this lot will be removed (and the money will be returned to this lot's <xref href="TinyLife.World.Lot.Household" data-throw-if-not-resolved="false"></xref>).

    Also note that the <xref href="TinyLife.World.Lot.Household" data-throw-if-not-resolved="false"></xref> stays the same, and all tiles outside of the exported lot's area (if it is smaller) are replaced with Grass.
  example: []
  syntax:
    content: public void Import(ExportedLot lot, string lotName, bool exact = false, bool forceClear = false)
    parameters:
    - id: lot
      type: TinyLife.World.ExportedLot
      description: ''
    - id: lotName
      type: System.String
      description: The name to export this lot as.
    - id: exact
      type: System.Boolean
      description: Whether an exact copy of the lot should be imported. If this is false, the imported lot is moved to best fit the lot's dimensions
    - id: forceClear
      type: System.Boolean
      description: Whether the lot should be force-cleared before importing, meaning even <xref href="TinyLife.Objects.ObjectCategory.NonSellable" data-throw-if-not-resolved="false"></xref> objects will be removed
    content.vb: Public Sub Import(lot As ExportedLot, lotName As String, exact As Boolean = False, forceClear As Boolean = False)
  overload: TinyLife.World.Lot.Import*
  nameWithType.vb: Lot.Import(ExportedLot, String, Boolean, Boolean)
  fullName.vb: TinyLife.World.Lot.Import(TinyLife.World.ExportedLot, String, Boolean, Boolean)
  name.vb: Import(ExportedLot, String, Boolean, Boolean)
- uid: TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  commentId: M:TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  id: CanImport(TinyLife.World.ExportedLot)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: CanImport(ExportedLot)
  nameWithType: Lot.CanImport(ExportedLot)
  fullName: TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    A method that calculates whether the given <xref href="TinyLife.World.ExportedLot" data-throw-if-not-resolved="false"></xref> can be imported.

    A lot can be imported if the <xref href="TinyLife.World.Lot.Household" data-throw-if-not-resolved="false"></xref> has enough money, and if this lot's <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref> is greater than or equal to the exported lot's area.
  example: []
  syntax:
    content: public bool CanImport(ExportedLot import)
    parameters:
    - id: import
      type: TinyLife.World.ExportedLot
      description: The lot to import
    return:
      type: System.Boolean
      description: true if the lot can be imported, false otherwise
    content.vb: Public Function CanImport(import As ExportedLot) As Boolean
  overload: TinyLife.World.Lot.CanImport*
- uid: TinyLife.World.Lot.GetCoveredArea
  commentId: M:TinyLife.World.Lot.GetCoveredArea
  id: GetCoveredArea
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetCoveredArea()
  nameWithType: Lot.GetCoveredArea()
  fullName: TinyLife.World.Lot.GetCoveredArea()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Returns a <xref href="MLEM.Maths.RectangleF" data-throw-if-not-resolved="false"></xref> that represents the area that this lot actually covers.

    The area covered by this lot is always bounded by its <xref href="TinyLife.World.Lot.Area" data-throw-if-not-resolved="false"></xref>, but will be smaller if there are fewer objects on the lot.
  example: []
  syntax:
    content: public RectangleF GetCoveredArea()
    return:
      type: MLEM.Maths.RectangleF
      description: The area that this lot covers
    content.vb: Public Function GetCoveredArea() As RectangleF
  overload: TinyLife.World.Lot.GetCoveredArea*
- uid: TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
  id: CanVisitRightNow(TinyLife.Objects.PersonLike)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: CanVisitRightNow(PersonLike)
  nameWithType: Lot.CanVisitRightNow(PersonLike)
  fullName: TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Determines whether the given <code class="paramref">person</code> can automatically choose to visit this lot right now.

    Various data is considered, including the <xref href="TinyLife.World.Household.DisallowFriendsVisiting" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.Household.DisallowStrangersVisiting" data-throw-if-not-resolved="false"></xref> settings, as well as this lot's <xref href="TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cSystem.Nullable%7bSystem.TimeSpan%7d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool CanVisitRightNow(PersonLike person)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person.
    return:
      type: System.Boolean
      description: Whether the person can automatically visit this lot right now.
    content.vb: Public Function CanVisitRightNow(person As PersonLike) As Boolean
  overload: TinyLife.World.Lot.CanVisitRightNow*
- uid: TinyLife.World.Lot.HasBasicAmenities
  commentId: M:TinyLife.World.Lot.HasBasicAmenities
  id: HasBasicAmenities
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: HasBasicAmenities()
  nameWithType: Lot.HasBasicAmenities()
  fullName: TinyLife.World.Lot.HasBasicAmenities()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Whether this lot is considered to have basic residential amenities, which allows it to be populated automatically using <xref href="TinyLife.World.Map.PopulateLots" data-throw-if-not-resolved="false"></xref>.

    Basic amenities include at least two rooms, a fridge, a counter, a toilet, a shower, a bed, a table and a chair.
  example: []
  syntax:
    content: public bool HasBasicAmenities()
    return:
      type: System.Boolean
      description: Whether this lot has basic amenities.
    content.vb: Public Function HasBasicAmenities() As Boolean
  overload: TinyLife.World.Lot.HasBasicAmenities*
- uid: TinyLife.World.Lot.CanOccupy(System.ValueTuple{System.Collections.Generic.List{TinyLife.Objects.AgeGroup},System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},TinyLife.World.Household.Relation}})
  commentId: M:TinyLife.World.Lot.CanOccupy(System.ValueTuple{System.Collections.Generic.List{TinyLife.Objects.AgeGroup},System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},TinyLife.World.Household.Relation}})
  id: CanOccupy(System.ValueTuple{System.Collections.Generic.List{TinyLife.Objects.AgeGroup},System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},TinyLife.World.Household.Relation}})
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: CanOccupy((List<AgeGroup>, Dictionary<(int Person, int Other), Relation>))
  nameWithType: Lot.CanOccupy((List<AgeGroup>, Dictionary<(int Person, int Other), Household.Relation>))
  fullName: TinyLife.World.Lot.CanOccupy((System.Collections.Generic.List<TinyLife.Objects.AgeGroup>, System.Collections.Generic.Dictionary<(int Person, int Other), TinyLife.World.Household.Relation>))
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Whether the given generated household can occupy this lot.
  example: []
  syntax:
    content: public bool CanOccupy((List<AgeGroup>, Dictionary<(int Person, int Other), Household.Relation>) generated)
    parameters:
    - id: generated
      type: System.ValueTuple{System.Collections.Generic.List{TinyLife.Objects.AgeGroup},System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},TinyLife.World.Household.Relation}}
      description: The generated household, gathered from <xref href="TinyLife.World.Household.RandomConstellation.Generate(System.Random)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: Whether the generated household can occupy this lot.
    content.vb: Public Function CanOccupy(generated As (List(Of AgeGroup), Dictionary(Of (Person As Integer, Other As Integer), Household.Relation))) As Boolean
  overload: TinyLife.World.Lot.CanOccupy*
  nameWithType.vb: Lot.CanOccupy((List(Of AgeGroup), Dictionary(Of (Person As Integer, Other As Integer), Household.Relation)))
  fullName.vb: TinyLife.World.Lot.CanOccupy((System.Collections.Generic.List(Of TinyLife.Objects.AgeGroup), System.Collections.Generic.Dictionary(Of (Person As Integer, Other As Integer), TinyLife.World.Household.Relation)))
  name.vb: CanOccupy((List(Of AgeGroup), Dictionary(Of (Person As Integer, Other As Integer), Relation)))
- uid: TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IList{TinyLife.Objects.PersonLike})
  commentId: M:TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IList{TinyLife.Objects.PersonLike})
  id: CanOccupy(System.Collections.Generic.IList{TinyLife.Objects.PersonLike})
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: CanOccupy(IList<PersonLike>)
  nameWithType: Lot.CanOccupy(IList<PersonLike>)
  fullName: TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IList<TinyLife.Objects.PersonLike>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Whether the given set of household members can occupy this lot.
  example: []
  syntax:
    content: public bool CanOccupy(IList<PersonLike> householdMembers)
    parameters:
    - id: householdMembers
      type: System.Collections.Generic.IList{TinyLife.Objects.PersonLike}
      description: The household members.
    return:
      type: System.Boolean
      description: Whether the household can occupy this lot.
    content.vb: Public Function CanOccupy(householdMembers As IList(Of PersonLike)) As Boolean
  overload: TinyLife.World.Lot.CanOccupy*
  nameWithType.vb: Lot.CanOccupy(IList(Of PersonLike))
  fullName.vb: TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IList(Of TinyLife.Objects.PersonLike))
  name.vb: CanOccupy(IList(Of PersonLike))
- uid: TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IEnumerable{TinyLife.Objects.AgeGroup},System.Func{System.Int32,System.Int32,System.Boolean})
  commentId: M:TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IEnumerable{TinyLife.Objects.AgeGroup},System.Func{System.Int32,System.Int32,System.Boolean})
  id: CanOccupy(System.Collections.Generic.IEnumerable{TinyLife.Objects.AgeGroup},System.Func{System.Int32,System.Int32,System.Boolean})
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: CanOccupy(IEnumerable<AgeGroup>, Func<int, int, bool>)
  nameWithType: Lot.CanOccupy(IEnumerable<AgeGroup>, Func<int, int, bool>)
  fullName: TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IEnumerable<TinyLife.Objects.AgeGroup>, System.Func<int, int, bool>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Whether the given set of household members, referenced only by their <xref href="TinyLife.Objects.AgeGroup" data-throw-if-not-resolved="false"></xref>, can occupy this lot.
  example: []
  syntax:
    content: public bool CanOccupy(IEnumerable<AgeGroup> householdMembers, Func<int, int, bool> canSleepTogether)
    parameters:
    - id: householdMembers
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.AgeGroup}
      description: The household members' individual age groups.
    - id: canSleepTogether
      type: System.Func{System.Int32,System.Int32,System.Boolean}
      description: A function that determines whether the two household members at the given indices in the <code class="paramref">householdMembers</code> collection can sleep together in the same double bed.
    return:
      type: System.Boolean
      description: Whether the household can occupy this lot.
    content.vb: Public Function CanOccupy(householdMembers As IEnumerable(Of AgeGroup), canSleepTogether As Func(Of Integer, Integer, Boolean)) As Boolean
  overload: TinyLife.World.Lot.CanOccupy*
  nameWithType.vb: Lot.CanOccupy(IEnumerable(Of AgeGroup), Func(Of Integer, Integer, Boolean))
  fullName.vb: TinyLife.World.Lot.CanOccupy(System.Collections.Generic.IEnumerable(Of TinyLife.Objects.AgeGroup), System.Func(Of Integer, Integer, Boolean))
  name.vb: CanOccupy(IEnumerable(Of AgeGroup), Func(Of Integer, Integer, Boolean))
- uid: TinyLife.World.Lot.GetValidOccupyingAges
  commentId: M:TinyLife.World.Lot.GetValidOccupyingAges
  id: GetValidOccupyingAges
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetValidOccupyingAges()
  nameWithType: Lot.GetValidOccupyingAges()
  fullName: TinyLife.World.Lot.GetValidOccupyingAges()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Returns a set of ages that can potentially occupy this lot, based on the available types of beds.

    Note that this method does not check whether there is an adequate amount of beds available.
  example: []
  syntax:
    content: public AgeGroup GetValidOccupyingAges()
    return:
      type: TinyLife.Objects.AgeGroup
      description: A combined flag that represents the ages that can potentially occupy this lot.
    content.vb: Public Function GetValidOccupyingAges() As AgeGroup
  overload: TinyLife.World.Lot.GetValidOccupyingAges*
- uid: TinyLife.World.Lot.Clear(System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Lot.Clear(System.Boolean,System.Boolean)
  id: Clear(System.Boolean,System.Boolean)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Clear(bool, bool)
  nameWithType: Lot.Clear(bool, bool)
  fullName: TinyLife.World.Lot.Clear(bool, bool)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Clears this lot, removing all objects from it.
  example: []
  syntax:
    content: public void Clear(bool force, bool unlinkParentsAndChildren)
    parameters:
    - id: force
      type: System.Boolean
      description: Whether objects that have the <xref href="TinyLife.Objects.ObjectCategory.NonSellable" data-throw-if-not-resolved="false"></xref> category should also be removed.
    - id: unlinkParentsAndChildren
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Objects.Furniture.UnlinkParentsAndChildren" data-throw-if-not-resolved="false"></xref> method should be called for any <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> removed from this lot.
    content.vb: Public Sub Clear(force As Boolean, unlinkParentsAndChildren As Boolean)
  overload: TinyLife.World.Lot.Clear*
  nameWithType.vb: Lot.Clear(Boolean, Boolean)
  fullName.vb: TinyLife.World.Lot.Clear(Boolean, Boolean)
  name.vb: Clear(Boolean, Boolean)
- uid: TinyLife.World.Lot.GetExportedLots
  commentId: M:TinyLife.World.Lot.GetExportedLots
  id: GetExportedLots
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetExportedLots()
  nameWithType: Lot.GetExportedLots()
  fullName: TinyLife.World.Lot.GetExportedLots()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns a set of all exported lots currently available to the game, including default exported lots and custom exported lots.
  example: []
  syntax:
    content: public static IEnumerable<(FileInfo File, ExportedLot Lot, string DisplayName, bool Custom, bool Hidden)> GetExportedLots()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}}
      description: The exported lots available to the game.
    content.vb: Public Shared Function GetExportedLots() As IEnumerable(Of (File As FileInfo, Lot As ExportedLot, DisplayName As String, Custom As Boolean, Hidden As Boolean))
  overload: TinyLife.World.Lot.GetExportedLots*
references:
- uid: TinyLife.Tools.LotTool
  commentId: T:TinyLife.Tools.LotTool
  href: TinyLife.Tools.LotTool.html
  name: LotTool
  nameWithType: LotTool
  fullName: TinyLife.Tools.LotTool
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  href: TinyLife.World.LotType.html
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.Lot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<Lot>(Lot)
  nameWithType: Extensions.JsonCopy<Lot>(Lot)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Lot>(TinyLife.World.Lot)
  nameWithType.vb: Extensions.JsonCopy(Of Lot)(Lot)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Lot)(TinyLife.World.Lot)
  name.vb: JsonCopy(Of Lot)(Lot)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Lot)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Lot)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: )
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.World.Lot.GetExportedLots
  commentId: M:TinyLife.World.Lot.GetExportedLots
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetExportedLots
  name: GetExportedLots()
  nameWithType: Lot.GetExportedLots()
  fullName: TinyLife.World.Lot.GetExportedLots()
  spec.csharp:
  - uid: TinyLife.World.Lot.GetExportedLots
    name: GetExportedLots
    href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetExportedLots
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.World.Lot.GetExportedLots
    name: GetExportedLots
    href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetExportedLots
  - name: (
  - name: )
- uid: System.Action{Newtonsoft.Json.JsonSerializer,System.Collections.Generic.List{System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}}}
  commentId: T:System.Action{Newtonsoft.Json.JsonSerializer,System.Collections.Generic.List{System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}}}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<JsonSerializer, List<(FileInfo File, ExportedLot Lot, string DisplayName, bool Hidden)>>
  nameWithType: Action<JsonSerializer, List<(FileInfo File, ExportedLot Lot, string DisplayName, bool Hidden)>>
  fullName: System.Action<Newtonsoft.Json.JsonSerializer, System.Collections.Generic.List<(System.IO.FileInfo File, TinyLife.World.ExportedLot Lot, string DisplayName, bool Hidden)>>
  nameWithType.vb: Action(Of JsonSerializer, List(Of (File As FileInfo, Lot As ExportedLot, DisplayName As String, Hidden As Boolean)))
  fullName.vb: System.Action(Of Newtonsoft.Json.JsonSerializer, System.Collections.Generic.List(Of (File As System.IO.FileInfo, Lot As TinyLife.World.ExportedLot, DisplayName As String, Hidden As Boolean)))
  name.vb: Action(Of JsonSerializer, List(Of (File As FileInfo, Lot As ExportedLot, DisplayName As String, Hidden As Boolean)))
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: (
  - uid: System.IO.FileInfo
    name: FileInfo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.fileinfo
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}.File
    name: File
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean-.file
  - name: ','
  - name: " "
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}.Lot
    name: Lot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean-.lot
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}.DisplayName
    name: DisplayName
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean-.displayname
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}.Hidden
    name: Hidden
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean-.hidden
  - name: )
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}.File
    name: File
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean-.file
  - name: " "
  - name: As
  - name: " "
  - uid: System.IO.FileInfo
    name: FileInfo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.fileinfo
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}.Lot
    name: Lot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean-.lot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}.DisplayName
    name: DisplayName
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean-.displayname
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean}.Hidden
    name: Hidden
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean-.hidden
  - name: " "
  - name: As
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.World.Lot.Area*
  commentId: Overload:TinyLife.World.Lot.Area
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Area
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.World.Lot.Type*
  commentId: Overload:TinyLife.World.Lot.Type
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Type
  name: Type
  nameWithType: Lot.Type
  fullName: TinyLife.World.Lot.Type
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  href: TinyLife.World.Lot.html
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Lot.Type
  commentId: P:TinyLife.World.Lot.Type
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Type
  name: Type
  nameWithType: Lot.Type
  fullName: TinyLife.World.Lot.Type
- uid: TinyLife.World.LotType.IsResidential
  commentId: F:TinyLife.World.LotType.IsResidential
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_IsResidential
  name: IsResidential
  nameWithType: LotType.IsResidential
  fullName: TinyLife.World.LotType.IsResidential
- uid: TinyLife.World.Lot.Household*
  commentId: Overload:TinyLife.World.Lot.Household
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Household
  name: Household
  nameWithType: Lot.Household
  fullName: TinyLife.World.Lot.Household
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  href: TinyLife.World.Household.html
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.World.Lot.Map*
  commentId: Overload:TinyLife.World.Lot.Map
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Map
  name: Map
  nameWithType: Lot.Map
  fullName: TinyLife.World.Lot.Map
- uid: TinyLife.World.Lot.MinFloor*
  commentId: Overload:TinyLife.World.Lot.MinFloor
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_MinFloor
  name: MinFloor
  nameWithType: Lot.MinFloor
  fullName: TinyLife.World.Lot.MinFloor
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.World.Lot.MaxFloor*
  commentId: Overload:TinyLife.World.Lot.MaxFloor
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_MaxFloor
  name: MaxFloor
  nameWithType: Lot.MaxFloor
  fullName: TinyLife.World.Lot.MaxFloor
- uid: TinyLife.World.Lot.#ctor*
  commentId: Overload:TinyLife.World.Lot.#ctor
  href: TinyLife.World.Lot.html#TinyLife_World_Lot__ctor_TinyLife_World_Map_Microsoft_Xna_Framework_Rectangle_
  name: Lot
  nameWithType: Lot.Lot
  fullName: TinyLife.World.Lot.Lot
  nameWithType.vb: Lot.New
  fullName.vb: TinyLife.World.Lot.New
  name.vb: New
- uid: TinyLife.World.Lot.Validate*
  commentId: Overload:TinyLife.World.Lot.Validate
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Validate_TinyLife_World_Map_
  name: Validate
  nameWithType: Lot.Validate
  fullName: TinyLife.World.Lot.Validate
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.MapObject.html
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World.Lot.Area
  commentId: P:TinyLife.World.Lot.Area
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Area
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
- uid: TinyLife.World.Lot.GetObjects*
  commentId: Overload:TinyLife.World.Lot.GetObjects
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetObjects__1
  name: GetObjects
  nameWithType: Lot.GetObjects
  fullName: TinyLife.World.Lot.GetObjects
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.WallLike.html
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.World.Lot.GetWalls*
  commentId: Overload:TinyLife.World.Lot.GetWalls
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetWalls__1
  name: GetWalls
  nameWithType: Lot.GetWalls
  fullName: TinyLife.World.Lot.GetWalls
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  href: TinyLife.World.Roof.html
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: TinyLife.World.Lot.GetRoofs*
  commentId: Overload:TinyLife.World.Lot.GetRoofs
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetRoofs
  name: GetRoofs
  nameWithType: Lot.GetRoofs
  fullName: TinyLife.World.Lot.GetRoofs
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Roof>
  nameWithType: IEnumerable<Roof>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Roof>
  nameWithType.vb: IEnumerable(Of Roof)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Roof)
  name.vb: IEnumerable(Of Roof)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Roof
    name: Roof
    href: TinyLife.World.Roof.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Roof
    name: Roof
    href: TinyLife.World.Roof.html
  - name: )
- uid: TinyLife.World.Stairs
  commentId: T:TinyLife.World.Stairs
  parent: TinyLife.World
  href: TinyLife.World.Stairs.html
  name: Stairs
  nameWithType: Stairs
  fullName: TinyLife.World.Stairs
- uid: TinyLife.World.Lot.GetStairs*
  commentId: Overload:TinyLife.World.Lot.GetStairs
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetStairs
  name: GetStairs
  nameWithType: Lot.GetStairs
  fullName: TinyLife.World.Lot.GetStairs
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Stairs>
  nameWithType: IEnumerable<Stairs>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Stairs>
  nameWithType.vb: IEnumerable(Of Stairs)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Stairs)
  name.vb: IEnumerable(Of Stairs)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Stairs
    name: Stairs
    href: TinyLife.World.Stairs.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Stairs
    name: Stairs
    href: TinyLife.World.Stairs.html
  - name: )
- uid: TinyLife.World.Lot.GetTiles*
  commentId: Overload:TinyLife.World.Lot.GetTiles
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetTiles
  name: GetTiles
  nameWithType: Lot.GetTiles
  fullName: TinyLife.World.Lot.GetTiles
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Point Pos, int Floor, Tile Tile)>
  nameWithType: IEnumerable<(Point Pos, int Floor, Tile Tile)>
  fullName: System.Collections.Generic.IEnumerable<(Microsoft.Xna.Framework.Point Pos, int Floor, TinyLife.World.Tile Tile)>
  nameWithType.vb: IEnumerable(Of (Pos As Point, Floor As Integer, Tile As Tile))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Pos As Microsoft.Xna.Framework.Point, Floor As Integer, Tile As TinyLife.World.Tile))
  name.vb: IEnumerable(Of (Pos As Point, Floor As Integer, Tile As Tile))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Pos
    name: Pos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.pos
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Floor
    name: Floor
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.floor
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Tile
    name: Tile
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.tile
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Pos
    name: Pos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.pos
  - name: " "
  - name: As
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Floor
    name: Floor
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.floor
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Tile
    name: Tile
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.tile
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: )
  - name: )
- uid: TinyLife.World.Lot.GetRooms*
  commentId: Overload:TinyLife.World.Lot.GetRooms
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetRooms
  name: GetRooms
  nameWithType: Lot.GetRooms
  fullName: TinyLife.World.Lot.GetRooms
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Room}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Room}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Room>
  nameWithType: IEnumerable<Room>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Room>
  nameWithType.vb: IEnumerable(Of Room)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Room)
  name.vb: IEnumerable(Of Room)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Room
    name: Room
    href: TinyLife.World.Room.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Room
    name: Room
    href: TinyLife.World.Room.html
  - name: )
- uid: TinyLife.World.Lot.GetDefaultTile*
  commentId: Overload:TinyLife.World.Lot.GetDefaultTile
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetDefaultTile
  name: GetDefaultTile
  nameWithType: Lot.GetDefaultTile
  fullName: TinyLife.World.Lot.GetDefaultTile
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  href: TinyLife.World.Tile.html
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: TinyLife.World.LotType.RequiredFurniture
  commentId: F:TinyLife.World.LotType.RequiredFurniture
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_RequiredFurniture
  name: RequiredFurniture
  nameWithType: LotType.RequiredFurniture
  fullName: TinyLife.World.LotType.RequiredFurniture
- uid: TinyLife.World.Lot.AreRequirementsMet*
  commentId: Overload:TinyLife.World.Lot.AreRequirementsMet
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_AreRequirementsMet
  name: AreRequirementsMet
  nameWithType: Lot.AreRequirementsMet
  fullName: TinyLife.World.Lot.AreRequirementsMet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  href: TinyLife.World.Wall.html
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Lot.GetFrontDoor*
  commentId: Overload:TinyLife.World.Lot.GetFrontDoor
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetFrontDoor
  name: GetFrontDoor
  nameWithType: Lot.GetFrontDoor
  fullName: TinyLife.World.Lot.GetFrontDoor
- uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
  commentId: T:System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.ValueTuple`2
  href: TinyLife.World.Wall.html
  name: (Wall Wall, Vector2 OutdoorPos)
  nameWithType: (Wall Wall, Vector2 OutdoorPos)
  fullName: (TinyLife.World.Wall Wall, Microsoft.Xna.Framework.Vector2 OutdoorPos)
  nameWithType.vb: (Wall As Wall, OutdoorPos As Vector2)
  fullName.vb: (Wall As TinyLife.World.Wall, OutdoorPos As Microsoft.Xna.Framework.Vector2)
  name.vb: (Wall As Wall, OutdoorPos As Vector2)
  spec.csharp:
  - name: (
  - uid: TinyLife.World.Wall
    name: Wall
    href: TinyLife.World.Wall.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}.Wall
    name: Wall
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.wall
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}.OutdoorPos
    name: OutdoorPos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.outdoorpos
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}.Wall
    name: Wall
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.wall
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.Wall
    name: Wall
    href: TinyLife.World.Wall.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}.OutdoorPos
    name: OutdoorPos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.outdoorpos
  - name: " "
  - name: As
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.World.Lot.GetHomeLocation*
  commentId: Overload:TinyLife.World.Lot.GetHomeLocation
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetHomeLocation_TinyLife_Objects_PersonLike_
  name: GetHomeLocation
  nameWithType: Lot.GetHomeLocation
  fullName: TinyLife.World.Lot.GetHomeLocation
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: TinyLife.World.Lot.GetPrice*
  commentId: Overload:TinyLife.World.Lot.GetPrice
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetPrice
  name: GetPrice
  nameWithType: Lot.GetPrice
  fullName: TinyLife.World.Lot.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  href: TinyLife.Objects.Furniture.html
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.World.Lot.Export*
  commentId: Overload:TinyLife.World.Lot.Export
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Export
  name: Export
  nameWithType: Lot.Export
  fullName: TinyLife.World.Lot.Export
- uid: TinyLife.World.ExportedLot
  commentId: T:TinyLife.World.ExportedLot
  parent: TinyLife.World
  href: TinyLife.World.ExportedLot.html
  name: ExportedLot
  nameWithType: ExportedLot
  fullName: TinyLife.World.ExportedLot
- uid: TinyLife.World.Lot.Household
  commentId: P:TinyLife.World.Lot.Household
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Household
  name: Household
  nameWithType: Lot.Household
  fullName: TinyLife.World.Lot.Household
- uid: TinyLife.Objects.ObjectCategory.NonSellable
  commentId: F:TinyLife.Objects.ObjectCategory.NonSellable
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_NonSellable
  name: NonSellable
  nameWithType: ObjectCategory.NonSellable
  fullName: TinyLife.Objects.ObjectCategory.NonSellable
- uid: TinyLife.World.Lot.Import*
  commentId: Overload:TinyLife.World.Lot.Import
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Import_TinyLife_World_ExportedLot_System_String_System_Boolean_System_Boolean_
  name: Import
  nameWithType: Lot.Import
  fullName: TinyLife.World.Lot.Import
- uid: TinyLife.World.Lot.CanImport*
  commentId: Overload:TinyLife.World.Lot.CanImport
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_CanImport_TinyLife_World_ExportedLot_
  name: CanImport
  nameWithType: Lot.CanImport
  fullName: TinyLife.World.Lot.CanImport
- uid: MLEM.Maths.RectangleF
  commentId: T:MLEM.Maths.RectangleF
  parent: MLEM.Maths
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Maths.RectangleF
- uid: TinyLife.World.Lot.GetCoveredArea*
  commentId: Overload:TinyLife.World.Lot.GetCoveredArea
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetCoveredArea
  name: GetCoveredArea
  nameWithType: Lot.GetCoveredArea
  fullName: TinyLife.World.Lot.GetCoveredArea
- uid: MLEM.Maths
  commentId: N:MLEM.Maths
  isExternal: true
  name: MLEM.Maths
  nameWithType: MLEM.Maths
  fullName: MLEM.Maths
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
- uid: TinyLife.World.Household.DisallowFriendsVisiting
  commentId: F:TinyLife.World.Household.DisallowFriendsVisiting
  href: TinyLife.World.Household.html#TinyLife_World_Household_DisallowFriendsVisiting
  name: DisallowFriendsVisiting
  nameWithType: Household.DisallowFriendsVisiting
  fullName: TinyLife.World.Household.DisallowFriendsVisiting
- uid: TinyLife.World.Household.DisallowStrangersVisiting
  commentId: F:TinyLife.World.Household.DisallowStrangersVisiting
  href: TinyLife.World.Household.html#TinyLife_World_Household_DisallowStrangersVisiting
  name: DisallowStrangersVisiting
  nameWithType: Household.DisallowStrangersVisiting
  fullName: TinyLife.World.Household.DisallowStrangersVisiting
- uid: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
  isExternal: true
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetCurrentVisitPriority_TinyLife_World_Lot_TinyLife_Objects_PersonLike_System_Nullable_System_TimeSpan__
  name: GetCurrentVisitPriority(Lot, PersonLike, TimeSpan?)
  nameWithType: LotType.GetCurrentVisitPriority(Lot, PersonLike, TimeSpan?)
  fullName: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot, TinyLife.Objects.PersonLike, System.TimeSpan?)
  spec.csharp:
  - uid: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
    name: GetCurrentVisitPriority
    href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetCurrentVisitPriority_TinyLife_World_Lot_TinyLife_Objects_PersonLike_System_Nullable_System_TimeSpan__
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
    name: GetCurrentVisitPriority
    href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetCurrentVisitPriority_TinyLife_World_Lot_TinyLife_Objects_PersonLike_System_Nullable_System_TimeSpan__
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  - name: )
- uid: TinyLife.World.Lot.CanVisitRightNow*
  commentId: Overload:TinyLife.World.Lot.CanVisitRightNow
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_CanVisitRightNow_TinyLife_Objects_PersonLike_
  name: CanVisitRightNow
  nameWithType: Lot.CanVisitRightNow
  fullName: TinyLife.World.Lot.CanVisitRightNow
- uid: TinyLife.World.Map.PopulateLots
  commentId: M:TinyLife.World.Map.PopulateLots
  href: TinyLife.World.Map.html#TinyLife_World_Map_PopulateLots
  name: PopulateLots()
  nameWithType: Map.PopulateLots()
  fullName: TinyLife.World.Map.PopulateLots()
  spec.csharp:
  - uid: TinyLife.World.Map.PopulateLots
    name: PopulateLots
    href: TinyLife.World.Map.html#TinyLife_World_Map_PopulateLots
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.PopulateLots
    name: PopulateLots
    href: TinyLife.World.Map.html#TinyLife_World_Map_PopulateLots
  - name: (
  - name: )
- uid: TinyLife.World.Lot.HasBasicAmenities*
  commentId: Overload:TinyLife.World.Lot.HasBasicAmenities
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_HasBasicAmenities
  name: HasBasicAmenities
  nameWithType: Lot.HasBasicAmenities
  fullName: TinyLife.World.Lot.HasBasicAmenities
- uid: TinyLife.World.Household.RandomConstellation.Generate(System.Random)
  commentId: M:TinyLife.World.Household.RandomConstellation.Generate(System.Random)
  isExternal: true
  href: TinyLife.World.Household.RandomConstellation.html#TinyLife_World_Household_RandomConstellation_Generate_System_Random_
  name: Generate(Random)
  nameWithType: Household.RandomConstellation.Generate(Random)
  fullName: TinyLife.World.Household.RandomConstellation.Generate(System.Random)
  spec.csharp:
  - uid: TinyLife.World.Household.RandomConstellation.Generate(System.Random)
    name: Generate
    href: TinyLife.World.Household.RandomConstellation.html#TinyLife_World_Household_RandomConstellation_Generate_System_Random_
  - name: (
  - uid: System.Random
    name: Random
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.random
  - name: )
  spec.vb:
  - uid: TinyLife.World.Household.RandomConstellation.Generate(System.Random)
    name: Generate
    href: TinyLife.World.Household.RandomConstellation.html#TinyLife_World_Household_RandomConstellation_Generate_System_Random_
  - name: (
  - uid: System.Random
    name: Random
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.random
  - name: )
- uid: TinyLife.World.Lot.CanOccupy*
  commentId: Overload:TinyLife.World.Lot.CanOccupy
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_CanOccupy_System_ValueTuple_System_Collections_Generic_List_TinyLife_Objects_AgeGroup__System_Collections_Generic_Dictionary_System_ValueTuple_System_Int32_System_Int32__TinyLife_World_Household_Relation___
  name: CanOccupy
  nameWithType: Lot.CanOccupy
  fullName: TinyLife.World.Lot.CanOccupy
- uid: System.ValueTuple{System.Collections.Generic.List{TinyLife.Objects.AgeGroup},System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},TinyLife.World.Household.Relation}}
  commentId: T:System.ValueTuple{System.Collections.Generic.List{TinyLife.Objects.AgeGroup},System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},TinyLife.World.Household.Relation}}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: (List<AgeGroup>, Dictionary<(int Person, int Other), Household.Relation>)
  nameWithType: (List<AgeGroup>, Dictionary<(int Person, int Other), Household.Relation>)
  fullName: (System.Collections.Generic.List<TinyLife.Objects.AgeGroup>, System.Collections.Generic.Dictionary<(int Person, int Other), TinyLife.World.Household.Relation>)
  nameWithType.vb: (List(Of AgeGroup), Dictionary(Of (Person As Integer, Other As Integer), Household.Relation))
  fullName.vb: (System.Collections.Generic.List(Of TinyLife.Objects.AgeGroup), System.Collections.Generic.Dictionary(Of (Person As Integer, Other As Integer), TinyLife.World.Household.Relation))
  name.vb: (List(Of AgeGroup), Dictionary(Of (Person As Integer, Other As Integer), Household.Relation))
  spec.csharp:
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    href: TinyLife.Objects.AgeGroup.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Person
    name: Person
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.person
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Other
    name: Other
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.other
  - name: )
  - name: ','
  - name: " "
  - uid: TinyLife.World.Household
    name: Household
    href: TinyLife.World.Household.html
  - name: .
  - uid: TinyLife.World.Household.Relation
    name: Relation
    href: TinyLife.World.Household.Relation.html
  - name: '>'
  - name: )
  spec.vb:
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    href: TinyLife.Objects.AgeGroup.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Int32,System.Int32}.Person
    name: Person
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.person
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Other
    name: Other
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.other
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: ','
  - name: " "
  - uid: TinyLife.World.Household
    name: Household
    href: TinyLife.World.Household.html
  - name: .
  - uid: TinyLife.World.Household.Relation
    name: Relation
    href: TinyLife.World.Household.Relation.html
  - name: )
  - name: )
- uid: System.Collections.Generic.IList{TinyLife.Objects.PersonLike}
  commentId: T:System.Collections.Generic.IList{TinyLife.Objects.PersonLike}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<PersonLike>
  nameWithType: IList<PersonLike>
  fullName: System.Collections.Generic.IList<TinyLife.Objects.PersonLike>
  nameWithType.vb: IList(Of PersonLike)
  fullName.vb: System.Collections.Generic.IList(Of TinyLife.Objects.PersonLike)
  name.vb: IList(Of PersonLike)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  href: TinyLife.Objects.AgeGroup.html
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.AgeGroup}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.AgeGroup}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<AgeGroup>
  nameWithType: IEnumerable<AgeGroup>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.AgeGroup>
  nameWithType.vb: IEnumerable(Of AgeGroup)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.AgeGroup)
  name.vb: IEnumerable(Of AgeGroup)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    href: TinyLife.Objects.AgeGroup.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    href: TinyLife.Objects.AgeGroup.html
  - name: )
- uid: System.Func{System.Int32,System.Int32,System.Boolean}
  commentId: T:System.Func{System.Int32,System.Int32,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<int, int, bool>
  nameWithType: Func<int, int, bool>
  fullName: System.Func<int, int, bool>
  nameWithType.vb: Func(Of Integer, Integer, Boolean)
  fullName.vb: System.Func(Of Integer, Integer, Boolean)
  name.vb: Func(Of Integer, Integer, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.Lot.GetValidOccupyingAges*
  commentId: Overload:TinyLife.World.Lot.GetValidOccupyingAges
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetValidOccupyingAges
  name: GetValidOccupyingAges
  nameWithType: Lot.GetValidOccupyingAges
  fullName: TinyLife.World.Lot.GetValidOccupyingAges
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  commentId: M:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  parent: TinyLife.Objects.Furniture
  href: TinyLife.Objects.Furniture.html#TinyLife_Objects_Furniture_UnlinkParentsAndChildren
  name: UnlinkParentsAndChildren()
  nameWithType: Furniture.UnlinkParentsAndChildren()
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
    href: TinyLife.Objects.Furniture.html#TinyLife_Objects_Furniture_UnlinkParentsAndChildren
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
    href: TinyLife.Objects.Furniture.html#TinyLife_Objects_Furniture_UnlinkParentsAndChildren
  - name: (
  - name: )
- uid: TinyLife.World.Lot.Clear*
  commentId: Overload:TinyLife.World.Lot.Clear
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Clear_System_Boolean_System_Boolean_
  name: Clear
  nameWithType: Lot.Clear
  fullName: TinyLife.World.Lot.Clear
- uid: TinyLife.World.Lot.GetExportedLots*
  commentId: Overload:TinyLife.World.Lot.GetExportedLots
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_GetExportedLots
  name: GetExportedLots
  nameWithType: Lot.GetExportedLots
  fullName: TinyLife.World.Lot.GetExportedLots
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(FileInfo File, ExportedLot Lot, string DisplayName, bool Custom, bool Hidden)>
  nameWithType: IEnumerable<(FileInfo File, ExportedLot Lot, string DisplayName, bool Custom, bool Hidden)>
  fullName: System.Collections.Generic.IEnumerable<(System.IO.FileInfo File, TinyLife.World.ExportedLot Lot, string DisplayName, bool Custom, bool Hidden)>
  nameWithType.vb: IEnumerable(Of (File As FileInfo, Lot As ExportedLot, DisplayName As String, Custom As Boolean, Hidden As Boolean))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (File As System.IO.FileInfo, Lot As TinyLife.World.ExportedLot, DisplayName As String, Custom As Boolean, Hidden As Boolean))
  name.vb: IEnumerable(Of (File As FileInfo, Lot As ExportedLot, DisplayName As String, Custom As Boolean, Hidden As Boolean))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: System.IO.FileInfo
    name: FileInfo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.fileinfo
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.File
    name: File
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.file
  - name: ','
  - name: " "
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.Lot
    name: Lot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.lot
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.DisplayName
    name: DisplayName
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.displayname
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.Custom
    name: Custom
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.custom
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.Hidden
    name: Hidden
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.hidden
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.File
    name: File
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.file
  - name: " "
  - name: As
  - name: " "
  - uid: System.IO.FileInfo
    name: FileInfo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.fileinfo
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.Lot
    name: Lot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.lot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.DisplayName
    name: DisplayName
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.displayname
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.Custom
    name: Custom
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.custom
  - name: " "
  - name: As
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.IO.FileInfo,TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean}.Hidden
    name: Hidden
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.io.fileinfo,tinylife.world.exportedlot,system.string,system.boolean,system.boolean-.hidden
  - name: " "
  - name: As
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
