### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotEmployment.Instance
  commentId: T:TinyLife.World.LotEmployment.Instance
  id: LotEmployment.Instance
  parent: TinyLife.World
  children:
  - TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Map,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  - TinyLife.World.LotEmployment.Instance.EmploymentLot
  - TinyLife.World.LotEmployment.Instance.FinishWork(System.Boolean)
  - TinyLife.World.LotEmployment.Instance.IsAtWork
  - TinyLife.World.LotEmployment.Instance.Map
  - TinyLife.World.LotEmployment.Instance.SetManually
  - TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  - TinyLife.World.LotEmployment.Instance.TimeAtWork
  - TinyLife.World.LotEmployment.Instance.Type
  - TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  - TinyLife.World.LotEmployment.Instance.WorkLot
  langs:
  - csharp
  - vb
  name: LotEmployment.Instance
  nameWithType: LotEmployment.Instance
  fullName: TinyLife.World.LotEmployment.Instance
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    An instance of a <xref href="TinyLife.World.LotEmployment" data-throw-if-not-resolved="false"></xref>.

    This is used by <xref href="TinyLife.Objects.Person.LotEmployment" data-throw-if-not-resolved="false"></xref> to store additional info about their employment.
  example: []
  syntax:
    content: >-
      [DataContract]

      public class LotEmployment.Instance
    content.vb: >-
      <DataContract>

      Public Class LotEmployment.Instance
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotEmployment.Instance.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.World.LotEmployment.Instance.Map
  commentId: P:TinyLife.World.LotEmployment.Instance.Map
  id: Map
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: LotEmployment.Instance.Map
  fullName: TinyLife.World.LotEmployment.Instance.Map
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The map that this lot employment instance's <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref> is on.
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Property Map As Map
  overload: TinyLife.World.LotEmployment.Instance.Map*
- uid: TinyLife.World.LotEmployment.Instance.EmploymentLot
  commentId: P:TinyLife.World.LotEmployment.Instance.EmploymentLot
  id: EmploymentLot
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: EmploymentLot
  nameWithType: LotEmployment.Instance.EmploymentLot
  fullName: TinyLife.World.LotEmployment.Instance.EmploymentLot
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The lot that this employment is active on. If this is a map-wide employment, this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.

    See <xref href="TinyLife.World.LotEmployment.Instance.WorkLot" data-throw-if-not-resolved="false"></xref> for the lot that this employment is currently working on.
  example: []
  syntax:
    content: public Lot EmploymentLot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property EmploymentLot As Lot
  overload: TinyLife.World.LotEmployment.Instance.EmploymentLot*
- uid: TinyLife.World.LotEmployment.Instance.WorkLot
  commentId: P:TinyLife.World.LotEmployment.Instance.WorkLot
  id: WorkLot
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: WorkLot
  nameWithType: LotEmployment.Instance.WorkLot
  fullName: TinyLife.World.LotEmployment.Instance.WorkLot
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The lot that the person with this employment is working on.

    If this is not a map-wide employment, <xref href="TinyLife.World.LotEmployment.Instance.EmploymentLot" data-throw-if-not-resolved="false"></xref> is always returned, even if this property has been overwritten.
  example: []
  syntax:
    content: public Lot WorkLot { get; set; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public Property WorkLot As Lot
  overload: TinyLife.World.LotEmployment.Instance.WorkLot*
- uid: TinyLife.World.LotEmployment.Instance.Type
  commentId: P:TinyLife.World.LotEmployment.Instance.Type
  id: Type
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: LotEmployment.Instance.Type
  fullName: TinyLife.World.LotEmployment.Instance.Type
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The underlying <xref href="TinyLife.World.LotEmployment" data-throw-if-not-resolved="false"></xref> type of this instance
  example: []
  syntax:
    content: public LotEmployment Type { get; }
    parameters: []
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public ReadOnly Property Type As LotEmployment
  overload: TinyLife.World.LotEmployment.Instance.Type*
- uid: TinyLife.World.LotEmployment.Instance.SetManually
  commentId: P:TinyLife.World.LotEmployment.Instance.SetManually
  id: SetManually
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: SetManually
  nameWithType: LotEmployment.Instance.SetManually
  fullName: TinyLife.World.LotEmployment.Instance.SetManually
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Whether this person was set manually (by a user) or automatically (using <xref href="TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection%7bTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool SetManually { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property SetManually As Boolean
  overload: TinyLife.World.LotEmployment.Instance.SetManually*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.LotEmployment.Instance.IsAtWork
  commentId: F:TinyLife.World.LotEmployment.Instance.IsAtWork
  id: IsAtWork
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: IsAtWork
  nameWithType: LotEmployment.Instance.IsAtWork
  fullName: TinyLife.World.LotEmployment.Instance.IsAtWork
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Whether this lot employment's employee is currently at work.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool IsAtWork
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public IsAtWork As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.LotEmployment.Instance.TimeAtWork
  commentId: F:TinyLife.World.LotEmployment.Instance.TimeAtWork
  id: TimeAtWork
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: TimeAtWork
  nameWithType: LotEmployment.Instance.TimeAtWork
  fullName: TinyLife.World.LotEmployment.Instance.TimeAtWork
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The amount of time that this lot employment's employee has been at work for.

    If <xref href="TinyLife.World.LotEmployment.Instance.IsAtWork" data-throw-if-not-resolved="false"></xref> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, this is <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [DataMember]

      public TimeSpan TimeAtWork
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public TimeAtWork As TimeSpan
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Map,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Map,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  id: '#ctor(TinyLife.Objects.Person,TinyLife.World.Map,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)'
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Instance(Person, Map, Lot, LotEmployment, bool)
  nameWithType: LotEmployment.Instance.Instance(Person, Map, Lot, LotEmployment, bool)
  fullName: TinyLife.World.LotEmployment.Instance.Instance(TinyLife.Objects.Person, TinyLife.World.Map, TinyLife.World.Lot, TinyLife.World.LotEmployment, bool)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new lot employment instance with the given settings
  example: []
  syntax:
    content: public Instance(Person person, Map map, Lot employmentLot, LotEmployment type, bool setManually)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to be employed
    - id: map
      type: TinyLife.World.Map
      description: The map that this lot employment is for.
    - id: employmentLot
      type: TinyLife.World.Lot
      description: The lot to be employed on, or null for a <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref> entry
    - id: type
      type: TinyLife.World.LotEmployment
      description: The lot employment
    - id: setManually
      type: System.Boolean
      description: Whether this person was set manually (by a user) or automatically (using <xref href="TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection%7bTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(person As Person, map As Map, employmentLot As Lot, type As LotEmployment, setManually As Boolean)
  overload: TinyLife.World.LotEmployment.Instance.#ctor*
  nameWithType.vb: LotEmployment.Instance.New(Person, Map, Lot, LotEmployment, Boolean)
  fullName.vb: TinyLife.World.LotEmployment.Instance.New(TinyLife.Objects.Person, TinyLife.World.Map, TinyLife.World.Lot, TinyLife.World.LotEmployment, Boolean)
  name.vb: New(Person, Map, Lot, LotEmployment, Boolean)
- uid: TinyLife.World.LotEmployment.Instance.FinishWork(System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.Instance.FinishWork(System.Boolean)
  id: FinishWork(System.Boolean)
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: FinishWork(bool)
  nameWithType: LotEmployment.Instance.FinishWork(bool)
  fullName: TinyLife.World.LotEmployment.Instance.FinishWork(bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A method that is invoked while this employment's employee is at work, when there is no more work to be done.

    This method causes the appropriate money to be deducted and earned if <xref href="TinyLife.World.LotEmployment.ForHireOnce" data-throw-if-not-resolved="false"></xref> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, and causes <xref href="TinyLife.World.LotEmployment.Instance.IsAtWork" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.LotEmployment.Instance.TimeAtWork" data-throw-if-not-resolved="false"></xref> to be set accordingly.
  example: []
  syntax:
    content: public void FinishWork(bool notify = true)
    parameters:
    - id: notify
      type: System.Boolean
      description: Whether events should be invoked and the <xref href="TinyLife.World.LotEmployment.HourlyFee" data-throw-if-not-resolved="false"></xref> should be awarded.
    content.vb: Public Sub FinishWork(notify As Boolean = True)
  overload: TinyLife.World.LotEmployment.Instance.FinishWork*
  nameWithType.vb: LotEmployment.Instance.FinishWork(Boolean)
  fullName.vb: TinyLife.World.LotEmployment.Instance.FinishWork(Boolean)
  name.vb: FinishWork(Boolean)
- uid: TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: LotEmployment.Instance.Validate(Person)
  fullName: TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    This method is called when this object is loaded from disk.

    Returning false on this method causes the object to be removed from the map.
  example: []
  syntax:
    content: public bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to validate this lot employment for
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function Validate(person As Person) As Boolean
  overload: TinyLife.World.LotEmployment.Instance.Validate*
- uid: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  commentId: M:TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  id: ShouldWorkRightNow
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: ShouldWorkRightNow()
  nameWithType: LotEmployment.Instance.ShouldWorkRightNow()
  fullName: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Returns whether the <xref href="TinyLife.World.Map.Time" data-throw-if-not-resolved="false"></xref> is in range of this <xref href="TinyLife.World.LotEmployment" data-throw-if-not-resolved="false"></xref>'s <xref href="TinyLife.World.LotEmployment.WorkHours" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.LotEmployment.OffWorkDays" data-throw-if-not-resolved="false"></xref> and it is not <xref href="TinyLife.World.LotEmployment.IsFinished" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool ShouldWorkRightNow()
    return:
      type: System.Boolean
      description: Whether work needs to be done right now.
    content.vb: Public Function ShouldWorkRightNow() As Boolean
  overload: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow*
references:
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  href: TinyLife.World.LotEmployment.html
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  href: TinyLife.Objects.Person.html#TinyLife_Objects_Person_LotEmployment
  name: LotEmployment
  nameWithType: Person.LotEmployment
  fullName: TinyLife.Objects.Person.LotEmployment
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.LotEmployment.Instance.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<Instance>(Instance)
  nameWithType: Extensions.JsonCopy<LotEmployment.Instance>(LotEmployment.Instance)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotEmployment.Instance>(TinyLife.World.LotEmployment.Instance)
  nameWithType.vb: Extensions.JsonCopy(Of LotEmployment.Instance)(LotEmployment.Instance)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotEmployment.Instance)(TinyLife.World.LotEmployment.Instance)
  name.vb: JsonCopy(Of Instance)(Instance)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotEmployment.Instance)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
    href: TinyLife.World.LotEmployment.Instance.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
    href: TinyLife.World.LotEmployment.Instance.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotEmployment.Instance)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
    href: TinyLife.World.LotEmployment.Instance.html
  - name: )
  - name: (
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
    href: TinyLife.World.LotEmployment.Instance.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  href: TinyLife.World.Lot.html
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.LotEmployment.Instance.Map*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Map
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_Map
  name: Map
  nameWithType: LotEmployment.Instance.Map
  fullName: TinyLife.World.LotEmployment.Instance.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.LotEmployment.Instance.WorkLot
  commentId: P:TinyLife.World.LotEmployment.Instance.WorkLot
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_WorkLot
  name: WorkLot
  nameWithType: LotEmployment.Instance.WorkLot
  fullName: TinyLife.World.LotEmployment.Instance.WorkLot
- uid: TinyLife.World.LotEmployment.Instance.EmploymentLot*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.EmploymentLot
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_EmploymentLot
  name: EmploymentLot
  nameWithType: LotEmployment.Instance.EmploymentLot
  fullName: TinyLife.World.LotEmployment.Instance.EmploymentLot
- uid: TinyLife.World.LotEmployment.Instance.EmploymentLot
  commentId: P:TinyLife.World.LotEmployment.Instance.EmploymentLot
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_EmploymentLot
  name: EmploymentLot
  nameWithType: LotEmployment.Instance.EmploymentLot
  fullName: TinyLife.World.LotEmployment.Instance.EmploymentLot
- uid: TinyLife.World.LotEmployment.Instance.WorkLot*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.WorkLot
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_WorkLot
  name: WorkLot
  nameWithType: LotEmployment.Instance.WorkLot
  fullName: TinyLife.World.LotEmployment.Instance.WorkLot
- uid: TinyLife.World.LotEmployment.Instance.Type*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Type
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_Type
  name: Type
  nameWithType: LotEmployment.Instance.Type
  fullName: TinyLife.World.LotEmployment.Instance.Type
- uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  isExternal: true
  href: TinyLife.World.Map.html#TinyLife_World_Map_UpdateExternalPeople_System_Collections_Generic_ICollection_TinyLife_World_Map__System_Action_System_String__System_Action_System_Single__
  name: UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  nameWithType: Map.UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection<TinyLife.World.Map>, System.Action<string>, System.Action<float>)
  nameWithType.vb: Map.UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection(Of TinyLife.World.Map), System.Action(Of String), System.Action(Of Single))
  name.vb: UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  spec.csharp:
  - uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: UpdateExternalPeople
    href: TinyLife.World.Map.html#TinyLife_World_Map_UpdateExternalPeople_System_Collections_Generic_ICollection_TinyLife_World_Map__System_Action_System_String__System_Action_System_Single__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: UpdateExternalPeople
    href: TinyLife.World.Map.html#TinyLife_World_Map_UpdateExternalPeople_System_Collections_Generic_ICollection_TinyLife_World_Map__System_Action_System_String__System_Action_System_Single__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: )
- uid: TinyLife.World.LotEmployment.Instance.SetManually*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.SetManually
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_SetManually
  name: SetManually
  nameWithType: LotEmployment.Instance.SetManually
  fullName: TinyLife.World.LotEmployment.Instance.SetManually
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.LotEmployment.Instance.IsAtWork
  commentId: F:TinyLife.World.LotEmployment.Instance.IsAtWork
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_IsAtWork
  name: IsAtWork
  nameWithType: LotEmployment.Instance.IsAtWork
  fullName: TinyLife.World.LotEmployment.Instance.IsAtWork
- uid: System.TimeSpan.Zero
  commentId: F:System.TimeSpan.Zero
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.zero
  name: Zero
  nameWithType: TimeSpan.Zero
  fullName: System.TimeSpan.Zero
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_MapWideEmployments
  name: MapWideEmployments
  nameWithType: LotEmployment.MapWideEmployments
  fullName: TinyLife.World.LotEmployment.MapWideEmployments
- uid: TinyLife.World.LotEmployment.Instance.#ctor*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.#ctor
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance__ctor_TinyLife_Objects_Person_TinyLife_World_Map_TinyLife_World_Lot_TinyLife_World_LotEmployment_System_Boolean_
  name: Instance
  nameWithType: LotEmployment.Instance.Instance
  fullName: TinyLife.World.LotEmployment.Instance.Instance
  nameWithType.vb: LotEmployment.Instance.New
  fullName.vb: TinyLife.World.LotEmployment.Instance.New
  name.vb: New
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  href: TinyLife.Objects.Person.html
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: TinyLife.World.LotEmployment.ForHireOnce
  commentId: F:TinyLife.World.LotEmployment.ForHireOnce
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_ForHireOnce
  name: ForHireOnce
  nameWithType: LotEmployment.ForHireOnce
  fullName: TinyLife.World.LotEmployment.ForHireOnce
- uid: TinyLife.World.LotEmployment.Instance.TimeAtWork
  commentId: F:TinyLife.World.LotEmployment.Instance.TimeAtWork
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_TimeAtWork
  name: TimeAtWork
  nameWithType: LotEmployment.Instance.TimeAtWork
  fullName: TinyLife.World.LotEmployment.Instance.TimeAtWork
- uid: TinyLife.World.LotEmployment.HourlyFee
  commentId: P:TinyLife.World.LotEmployment.HourlyFee
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_HourlyFee
  name: HourlyFee
  nameWithType: LotEmployment.HourlyFee
  fullName: TinyLife.World.LotEmployment.HourlyFee
- uid: TinyLife.World.LotEmployment.Instance.FinishWork*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.FinishWork
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_FinishWork_System_Boolean_
  name: FinishWork
  nameWithType: LotEmployment.Instance.FinishWork
  fullName: TinyLife.World.LotEmployment.Instance.FinishWork
- uid: TinyLife.World.LotEmployment.Instance.Validate*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Validate
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_Validate_TinyLife_Objects_Person_
  name: Validate
  nameWithType: LotEmployment.Instance.Validate
  fullName: TinyLife.World.LotEmployment.Instance.Validate
- uid: TinyLife.World.Map.Time
  commentId: P:TinyLife.World.Map.Time
  href: TinyLife.World.Map.html#TinyLife_World_Map_Time
  name: Time
  nameWithType: Map.Time
  fullName: TinyLife.World.Map.Time
- uid: TinyLife.World.LotEmployment.WorkHours
  commentId: F:TinyLife.World.LotEmployment.WorkHours
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_WorkHours
  name: WorkHours
  nameWithType: LotEmployment.WorkHours
  fullName: TinyLife.World.LotEmployment.WorkHours
- uid: TinyLife.World.LotEmployment.OffWorkDays
  commentId: P:TinyLife.World.LotEmployment.OffWorkDays
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_OffWorkDays
  name: OffWorkDays
  nameWithType: LotEmployment.OffWorkDays
  fullName: TinyLife.World.LotEmployment.OffWorkDays
- uid: TinyLife.World.LotEmployment.IsFinished
  commentId: P:TinyLife.World.LotEmployment.IsFinished
  href: TinyLife.World.LotEmployment.html#TinyLife_World_LotEmployment_IsFinished
  name: IsFinished
  nameWithType: LotEmployment.IsFinished
  fullName: TinyLife.World.LotEmployment.IsFinished
- uid: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  href: TinyLife.World.LotEmployment.Instance.html#TinyLife_World_LotEmployment_Instance_ShouldWorkRightNow
  name: ShouldWorkRightNow
  nameWithType: LotEmployment.Instance.ShouldWorkRightNow
  fullName: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
