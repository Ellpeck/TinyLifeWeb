### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.IGoalTriggerable
  commentId: T:TinyLife.Goals.IGoalTriggerable
  id: IGoalTriggerable
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.IGoalTriggerable.Trigger(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  - TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  - TinyLife.Goals.IGoalTriggerable.Trigger``2(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1},``1)
  - TinyLife.Goals.IGoalTriggerable.Trigger``2(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1},``1)
  - TinyLife.Goals.IGoalTriggerable.Trigger``3(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1,``2},``1,``2)
  - TinyLife.Goals.IGoalTriggerable.Trigger``3(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1,``2},``1,``2)
  - TinyLife.Goals.IGoalTriggerable.Trigger``4(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1,``2,``3},``1,``2,``3)
  - TinyLife.Goals.IGoalTriggerable.Trigger``4(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1,``2,``3},``1,``2,``3)
  - TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object,TinyLife.Goals.GoalTrigger,System.Object)
  langs:
  - csharp
  - vb
  name: IGoalTriggerable
  nameWithType: IGoalTriggerable
  fullName: TinyLife.Goals.IGoalTriggerable
  type: Interface
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: An interface that classes like <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref> implement to allow for them or their <xref href="TinyLife.Goals.AutoTriggerGoal" data-throw-if-not-resolved="false"></xref> instances to be triggered by a <xref href="TinyLife.Goals.GoalTrigger" data-throw-if-not-resolved="false"></xref> that is associated with an object and a value.
  example: []
  syntax:
    content: public interface IGoalTriggerable
    content.vb: Public Interface IGoalTriggerable
  extensionMethods:
  - TinyLife.Goals.IGoalTriggerable.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object,TinyLife.Goals.GoalTrigger,System.Object)
  commentId: M:TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object,TinyLife.Goals.GoalTrigger,System.Object)
  id: TryTrigger(System.Object,TinyLife.Goals.GoalTrigger,System.Object)
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: TryTrigger(object, GoalTrigger, object)
  nameWithType: IGoalTriggerable.TryTrigger(object, GoalTrigger, object)
  fullName: TinyLife.Goals.IGoalTriggerable.TryTrigger(object, TinyLife.Goals.GoalTrigger, object)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Tries to trigger this goal triggerable.

    To call this method more easily, use <xref href="TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable%2cSystem.Object%2cTinyLife.Goals.GoalTrigger%2cSystem.Object%5b%5d)" data-throw-if-not-resolved="false"></xref> or one of its overloads.
  example: []
  syntax:
    content: bool TryTrigger(object obj, GoalTrigger trigger, object value)
    parameters:
    - id: obj
      type: System.Object
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: System.Object
      description: The value that is associated with the trigger, which is usually an amount that a value has changed by, an amount of money, or similar.
    return:
      type: System.Boolean
      description: Whether this goal was successfully triggered.
    content.vb: Function TryTrigger(obj As Object, trigger As GoalTrigger, value As Object) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.TryTrigger*
  nameWithType.vb: IGoalTriggerable.TryTrigger(Object, GoalTrigger, Object)
  fullName.vb: TinyLife.Goals.IGoalTriggerable.TryTrigger(Object, TinyLife.Goals.GoalTrigger, Object)
  name.vb: TryTrigger(Object, GoalTrigger, Object)
- uid: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  id: Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: Trigger(IGoalTriggerable, object, GoalTrigger, object[])
  nameWithType: IGoalTriggerable.Trigger(IGoalTriggerable, object, GoalTrigger, object[])
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable, object, TinyLife.Goals.GoalTrigger, object[])
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Triggers all auto-triggered goals with the specified type constraint in the given <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref>.

    When calling this method, it should ideally be called on a specific subclass like <xref href="TinyLife.Goals.AmountGoal" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Goals.ConditionedGoal" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Goals.DistinctGoal%601" data-throw-if-not-resolved="false"></xref>.

    When calling this method for a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, their <xref href="TinyLife.Objects.PersonLike.GetCurrentGoals" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static bool Trigger(IGoalTriggerable set, object obj, GoalTrigger trigger, object[] values)
    parameters:
    - id: set
      type: TinyLife.Goals.IGoalTriggerable
      description: The goal set to search for auto-triggered goals
    - id: obj
      type: System.Object
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: values
      type: System.Object[]
      description: The values that is associated with the trigger, which is usually an amount that a value has changed by, an amount of money, or similar. The values will be passed individually to <xref href="TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object%2cTinyLife.Goals.GoalTrigger%2cSystem.Object)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: Whether any goal was successfully triggered.
    content.vb: Public Shared Function Trigger([set] As IGoalTriggerable, obj As Object, trigger As GoalTrigger, values As Object()) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.Trigger*
  nameWithType.vb: IGoalTriggerable.Trigger(IGoalTriggerable, Object, GoalTrigger, Object())
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable, Object, TinyLife.Goals.GoalTrigger, Object())
  name.vb: Trigger(IGoalTriggerable, Object, GoalTrigger, Object())
- uid: TinyLife.Goals.IGoalTriggerable.Trigger``2(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1},``1)
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger``2(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1},``1)
  id: Trigger``2(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1},``1)
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: Trigger<TObject, TValue>(IGoalTriggerable, TObject, GoalTrigger<TObject, TValue>, TValue)
  nameWithType: IGoalTriggerable.Trigger<TObject, TValue>(IGoalTriggerable, TObject, GoalTrigger<TObject, TValue>, TValue)
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger<TObject, TValue>(TinyLife.Goals.IGoalTriggerable, TObject, TinyLife.Goals.GoalTrigger<TObject, TValue>, TValue)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Triggers all auto-triggered goals with the specified type constraint in the given <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref>.

    When calling this method, it should ideally be called on a specific subclass like <xref href="TinyLife.Goals.AmountGoal" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Goals.ConditionedGoal" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Goals.DistinctGoal%601" data-throw-if-not-resolved="false"></xref>.

    When calling this method for a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, their <xref href="TinyLife.Objects.PersonLike.GetCurrentGoals" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static bool Trigger<TObject, TValue>(IGoalTriggerable set, TObject obj, GoalTrigger<TObject, TValue> trigger, TValue value)
    parameters:
    - id: set
      type: TinyLife.Goals.IGoalTriggerable
      description: The goal set to search for auto-triggered goals
    - id: obj
      type: '{TObject}'
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger{{TObject},{TValue}}
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TObject
    - id: TValue
    return:
      type: System.Boolean
      description: Whether any goal was successfully triggered.
    content.vb: Public Shared Function Trigger(Of TObject, TValue)([set] As IGoalTriggerable, obj As TObject, trigger As GoalTrigger(Of TObject, TValue), value As TValue) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.Trigger*
  nameWithType.vb: IGoalTriggerable.Trigger(Of TObject, TValue)(IGoalTriggerable, TObject, GoalTrigger(Of TObject, TValue), TValue)
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(Of TObject, TValue)(TinyLife.Goals.IGoalTriggerable, TObject, TinyLife.Goals.GoalTrigger(Of TObject, TValue), TValue)
  name.vb: Trigger(Of TObject, TValue)(IGoalTriggerable, TObject, GoalTrigger(Of TObject, TValue), TValue)
- uid: TinyLife.Goals.IGoalTriggerable.Trigger``3(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1,``2},``1,``2)
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger``3(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1,``2},``1,``2)
  id: Trigger``3(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1,``2},``1,``2)
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: Trigger<TObject, TValue1, TValue2>(IGoalTriggerable, TObject, GoalTrigger<TObject, TValue1, TValue2>, TValue1, TValue2)
  nameWithType: IGoalTriggerable.Trigger<TObject, TValue1, TValue2>(IGoalTriggerable, TObject, GoalTrigger<TObject, TValue1, TValue2>, TValue1, TValue2)
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger<TObject, TValue1, TValue2>(TinyLife.Goals.IGoalTriggerable, TObject, TinyLife.Goals.GoalTrigger<TObject, TValue1, TValue2>, TValue1, TValue2)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Triggers all auto-triggered goals with the specified type constraint in the given <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref>.

    When calling this method, it should ideally be called on a specific subclass like <xref href="TinyLife.Goals.AmountGoal" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Goals.ConditionedGoal" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Goals.DistinctGoal%601" data-throw-if-not-resolved="false"></xref>.

    When calling this method for a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, their <xref href="TinyLife.Objects.PersonLike.GetCurrentGoals" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static bool Trigger<TObject, TValue1, TValue2>(IGoalTriggerable set, TObject obj, GoalTrigger<TObject, TValue1, TValue2> trigger, TValue1 value1, TValue2 value2)
    parameters:
    - id: set
      type: TinyLife.Goals.IGoalTriggerable
      description: The goal set to search for auto-triggered goals
    - id: obj
      type: '{TObject}'
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger{{TObject},{TValue1},{TValue2}}
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: value1
      type: '{TValue1}'
    - id: value2
      type: '{TValue2}'
    typeParameters:
    - id: TObject
    - id: TValue1
    - id: TValue2
    return:
      type: System.Boolean
      description: Whether any goal was successfully triggered.
    content.vb: Public Shared Function Trigger(Of TObject, TValue1, TValue2)([set] As IGoalTriggerable, obj As TObject, trigger As GoalTrigger(Of TObject, TValue1, TValue2), value1 As TValue1, value2 As TValue2) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.Trigger*
  nameWithType.vb: IGoalTriggerable.Trigger(Of TObject, TValue1, TValue2)(IGoalTriggerable, TObject, GoalTrigger(Of TObject, TValue1, TValue2), TValue1, TValue2)
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(Of TObject, TValue1, TValue2)(TinyLife.Goals.IGoalTriggerable, TObject, TinyLife.Goals.GoalTrigger(Of TObject, TValue1, TValue2), TValue1, TValue2)
  name.vb: Trigger(Of TObject, TValue1, TValue2)(IGoalTriggerable, TObject, GoalTrigger(Of TObject, TValue1, TValue2), TValue1, TValue2)
- uid: TinyLife.Goals.IGoalTriggerable.Trigger``4(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1,``2,``3},``1,``2,``3)
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger``4(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1,``2,``3},``1,``2,``3)
  id: Trigger``4(TinyLife.Goals.IGoalTriggerable,``0,TinyLife.Goals.GoalTrigger{``0,``1,``2,``3},``1,``2,``3)
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: Trigger<TObject, TValue1, TValue2, TValue3>(IGoalTriggerable, TObject, GoalTrigger<TObject, TValue1, TValue2, TValue3>, TValue1, TValue2, TValue3)
  nameWithType: IGoalTriggerable.Trigger<TObject, TValue1, TValue2, TValue3>(IGoalTriggerable, TObject, GoalTrigger<TObject, TValue1, TValue2, TValue3>, TValue1, TValue2, TValue3)
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger<TObject, TValue1, TValue2, TValue3>(TinyLife.Goals.IGoalTriggerable, TObject, TinyLife.Goals.GoalTrigger<TObject, TValue1, TValue2, TValue3>, TValue1, TValue2, TValue3)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Triggers all auto-triggered goals with the specified type constraint in the given <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref>.

    When calling this method, it should ideally be called on a specific subclass like <xref href="TinyLife.Goals.AmountGoal" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Goals.ConditionedGoal" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Goals.DistinctGoal%601" data-throw-if-not-resolved="false"></xref>.

    When calling this method for a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, their <xref href="TinyLife.Objects.PersonLike.GetCurrentGoals" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static bool Trigger<TObject, TValue1, TValue2, TValue3>(IGoalTriggerable set, TObject obj, GoalTrigger<TObject, TValue1, TValue2, TValue3> trigger, TValue1 value1, TValue2 value2, TValue3 value3)
    parameters:
    - id: set
      type: TinyLife.Goals.IGoalTriggerable
      description: The goal set to search for auto-triggered goals
    - id: obj
      type: '{TObject}'
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger{{TObject},{TValue1},{TValue2},{TValue3}}
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: value1
      type: '{TValue1}'
    - id: value2
      type: '{TValue2}'
    - id: value3
      type: '{TValue3}'
    typeParameters:
    - id: TObject
    - id: TValue1
    - id: TValue2
    - id: TValue3
    return:
      type: System.Boolean
      description: Whether any goal was successfully triggered.
    content.vb: Public Shared Function Trigger(Of TObject, TValue1, TValue2, TValue3)([set] As IGoalTriggerable, obj As TObject, trigger As GoalTrigger(Of TObject, TValue1, TValue2, TValue3), value1 As TValue1, value2 As TValue2, value3 As TValue3) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.Trigger*
  nameWithType.vb: IGoalTriggerable.Trigger(Of TObject, TValue1, TValue2, TValue3)(IGoalTriggerable, TObject, GoalTrigger(Of TObject, TValue1, TValue2, TValue3), TValue1, TValue2, TValue3)
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(Of TObject, TValue1, TValue2, TValue3)(TinyLife.Goals.IGoalTriggerable, TObject, TinyLife.Goals.GoalTrigger(Of TObject, TValue1, TValue2, TValue3), TValue1, TValue2, TValue3)
  name.vb: Trigger(Of TObject, TValue1, TValue2, TValue3)(IGoalTriggerable, TObject, GoalTrigger(Of TObject, TValue1, TValue2, TValue3), TValue1, TValue2, TValue3)
- uid: TinyLife.Goals.IGoalTriggerable.Trigger(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  id: Trigger(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: Trigger(IEnumerable<IGoalTriggerable>, object, GoalTrigger, object[])
  nameWithType: IGoalTriggerable.Trigger(IEnumerable<IGoalTriggerable>, object, GoalTrigger, object[])
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger(System.Collections.Generic.IEnumerable<TinyLife.Goals.IGoalTriggerable>, object, TinyLife.Goals.GoalTrigger, object[])
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Triggers all auto-triggered goals with the specified type constraint in the given set of <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref> instances.

    When calling this method, it should ideally be called on a specific subclass like <xref href="TinyLife.Goals.AmountGoal" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Goals.ConditionedGoal" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Goals.DistinctGoal%601" data-throw-if-not-resolved="false"></xref>.

    When calling this method for a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, their <xref href="TinyLife.Objects.PersonLike.GetCurrentGoals" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static bool Trigger(IEnumerable<IGoalTriggerable> sets, object obj, GoalTrigger trigger, object[] values)
    parameters:
    - id: sets
      type: System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable}
      description: The set of goal set instances to search for auto-triggered goals
    - id: obj
      type: System.Object
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: values
      type: System.Object[]
      description: The values that is associated with the trigger, which is usually an amount that a value has changed by, an amount of money, or similar. The values will be passed individually to <xref href="TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object%2cTinyLife.Goals.GoalTrigger%2cSystem.Object)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: Whether any goal was successfully triggered.
    content.vb: Public Shared Function Trigger(sets As IEnumerable(Of IGoalTriggerable), obj As Object, trigger As GoalTrigger, values As Object()) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.Trigger*
  nameWithType.vb: IGoalTriggerable.Trigger(IEnumerable(Of IGoalTriggerable), Object, GoalTrigger, Object())
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(System.Collections.Generic.IEnumerable(Of TinyLife.Goals.IGoalTriggerable), Object, TinyLife.Goals.GoalTrigger, Object())
  name.vb: Trigger(IEnumerable(Of IGoalTriggerable), Object, GoalTrigger, Object())
- uid: TinyLife.Goals.IGoalTriggerable.Trigger``2(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1},``1)
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger``2(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1},``1)
  id: Trigger``2(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1},``1)
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: Trigger<TObject, TValue>(IEnumerable<IGoalTriggerable>, TObject, GoalTrigger<TObject, TValue>, TValue)
  nameWithType: IGoalTriggerable.Trigger<TObject, TValue>(IEnumerable<IGoalTriggerable>, TObject, GoalTrigger<TObject, TValue>, TValue)
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger<TObject, TValue>(System.Collections.Generic.IEnumerable<TinyLife.Goals.IGoalTriggerable>, TObject, TinyLife.Goals.GoalTrigger<TObject, TValue>, TValue)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Triggers all auto-triggered goals with the specified type constraint in the given set of <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref> instances.

    When calling this method, it should ideally be called on a specific subclass like <xref href="TinyLife.Goals.AmountGoal" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Goals.ConditionedGoal" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Goals.DistinctGoal%601" data-throw-if-not-resolved="false"></xref>.

    When calling this method for a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, their <xref href="TinyLife.Objects.PersonLike.GetCurrentGoals" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static bool Trigger<TObject, TValue>(IEnumerable<IGoalTriggerable> sets, TObject obj, GoalTrigger<TObject, TValue> trigger, TValue value)
    parameters:
    - id: sets
      type: System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable}
      description: The set of goal set instances to search for auto-triggered goals
    - id: obj
      type: '{TObject}'
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger{{TObject},{TValue}}
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TObject
    - id: TValue
    return:
      type: System.Boolean
      description: Whether any goal was successfully triggered.
    content.vb: Public Shared Function Trigger(Of TObject, TValue)(sets As IEnumerable(Of IGoalTriggerable), obj As TObject, trigger As GoalTrigger(Of TObject, TValue), value As TValue) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.Trigger*
  nameWithType.vb: IGoalTriggerable.Trigger(Of TObject, TValue)(IEnumerable(Of IGoalTriggerable), TObject, GoalTrigger(Of TObject, TValue), TValue)
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(Of TObject, TValue)(System.Collections.Generic.IEnumerable(Of TinyLife.Goals.IGoalTriggerable), TObject, TinyLife.Goals.GoalTrigger(Of TObject, TValue), TValue)
  name.vb: Trigger(Of TObject, TValue)(IEnumerable(Of IGoalTriggerable), TObject, GoalTrigger(Of TObject, TValue), TValue)
- uid: TinyLife.Goals.IGoalTriggerable.Trigger``3(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1,``2},``1,``2)
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger``3(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1,``2},``1,``2)
  id: Trigger``3(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1,``2},``1,``2)
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: Trigger<TObject, TValue1, TValue2>(IEnumerable<IGoalTriggerable>, TObject, GoalTrigger<TObject, TValue1, TValue2>, TValue1, TValue2)
  nameWithType: IGoalTriggerable.Trigger<TObject, TValue1, TValue2>(IEnumerable<IGoalTriggerable>, TObject, GoalTrigger<TObject, TValue1, TValue2>, TValue1, TValue2)
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger<TObject, TValue1, TValue2>(System.Collections.Generic.IEnumerable<TinyLife.Goals.IGoalTriggerable>, TObject, TinyLife.Goals.GoalTrigger<TObject, TValue1, TValue2>, TValue1, TValue2)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Triggers all auto-triggered goals with the specified type constraint in the given set of <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref> instances.

    When calling this method, it should ideally be called on a specific subclass like <xref href="TinyLife.Goals.AmountGoal" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Goals.ConditionedGoal" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Goals.DistinctGoal%601" data-throw-if-not-resolved="false"></xref>.

    When calling this method for a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, their <xref href="TinyLife.Objects.PersonLike.GetCurrentGoals" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static bool Trigger<TObject, TValue1, TValue2>(IEnumerable<IGoalTriggerable> sets, TObject obj, GoalTrigger<TObject, TValue1, TValue2> trigger, TValue1 value1, TValue2 value2)
    parameters:
    - id: sets
      type: System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable}
      description: The set of goal set instances to search for auto-triggered goals
    - id: obj
      type: '{TObject}'
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger{{TObject},{TValue1},{TValue2}}
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: value1
      type: '{TValue1}'
    - id: value2
      type: '{TValue2}'
    typeParameters:
    - id: TObject
    - id: TValue1
    - id: TValue2
    return:
      type: System.Boolean
      description: Whether any goal was successfully triggered.
    content.vb: Public Shared Function Trigger(Of TObject, TValue1, TValue2)(sets As IEnumerable(Of IGoalTriggerable), obj As TObject, trigger As GoalTrigger(Of TObject, TValue1, TValue2), value1 As TValue1, value2 As TValue2) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.Trigger*
  nameWithType.vb: IGoalTriggerable.Trigger(Of TObject, TValue1, TValue2)(IEnumerable(Of IGoalTriggerable), TObject, GoalTrigger(Of TObject, TValue1, TValue2), TValue1, TValue2)
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(Of TObject, TValue1, TValue2)(System.Collections.Generic.IEnumerable(Of TinyLife.Goals.IGoalTriggerable), TObject, TinyLife.Goals.GoalTrigger(Of TObject, TValue1, TValue2), TValue1, TValue2)
  name.vb: Trigger(Of TObject, TValue1, TValue2)(IEnumerable(Of IGoalTriggerable), TObject, GoalTrigger(Of TObject, TValue1, TValue2), TValue1, TValue2)
- uid: TinyLife.Goals.IGoalTriggerable.Trigger``4(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1,``2,``3},``1,``2,``3)
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger``4(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1,``2,``3},``1,``2,``3)
  id: Trigger``4(System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable},``0,TinyLife.Goals.GoalTrigger{``0,``1,``2,``3},``1,``2,``3)
  parent: TinyLife.Goals.IGoalTriggerable
  langs:
  - csharp
  - vb
  name: Trigger<TObject, TValue1, TValue2, TValue3>(IEnumerable<IGoalTriggerable>, TObject, GoalTrigger<TObject, TValue1, TValue2, TValue3>, TValue1, TValue2, TValue3)
  nameWithType: IGoalTriggerable.Trigger<TObject, TValue1, TValue2, TValue3>(IEnumerable<IGoalTriggerable>, TObject, GoalTrigger<TObject, TValue1, TValue2, TValue3>, TValue1, TValue2, TValue3)
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger<TObject, TValue1, TValue2, TValue3>(System.Collections.Generic.IEnumerable<TinyLife.Goals.IGoalTriggerable>, TObject, TinyLife.Goals.GoalTrigger<TObject, TValue1, TValue2, TValue3>, TValue1, TValue2, TValue3)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Goals
  summary: >-
    Triggers all auto-triggered goals with the specified type constraint in the given set of <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref> instances.

    When calling this method, it should ideally be called on a specific subclass like <xref href="TinyLife.Goals.AmountGoal" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Goals.ConditionedGoal" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Goals.DistinctGoal%601" data-throw-if-not-resolved="false"></xref>.

    When calling this method for a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, their <xref href="TinyLife.Objects.PersonLike.GetCurrentGoals" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static bool Trigger<TObject, TValue1, TValue2, TValue3>(IEnumerable<IGoalTriggerable> sets, TObject obj, GoalTrigger<TObject, TValue1, TValue2, TValue3> trigger, TValue1 value1, TValue2 value2, TValue3 value3)
    parameters:
    - id: sets
      type: System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable}
      description: The set of goal set instances to search for auto-triggered goals
    - id: obj
      type: '{TObject}'
      description: The object that triggered the given <code class="paramref">trigger</code>.
    - id: trigger
      type: TinyLife.Goals.GoalTrigger{{TObject},{TValue1},{TValue2},{TValue3}}
      description: The goal trigger that is triggering this <xref href="TinyLife.Goals.IGoalTriggerable" data-throw-if-not-resolved="false"></xref>.
    - id: value1
      type: '{TValue1}'
    - id: value2
      type: '{TValue2}'
    - id: value3
      type: '{TValue3}'
    typeParameters:
    - id: TObject
    - id: TValue1
    - id: TValue2
    - id: TValue3
    return:
      type: System.Boolean
      description: Whether any goal was successfully triggered.
    content.vb: Public Shared Function Trigger(Of TObject, TValue1, TValue2, TValue3)(sets As IEnumerable(Of IGoalTriggerable), obj As TObject, trigger As GoalTrigger(Of TObject, TValue1, TValue2, TValue3), value1 As TValue1, value2 As TValue2, value3 As TValue3) As Boolean
  overload: TinyLife.Goals.IGoalTriggerable.Trigger*
  nameWithType.vb: IGoalTriggerable.Trigger(Of TObject, TValue1, TValue2, TValue3)(IEnumerable(Of IGoalTriggerable), TObject, GoalTrigger(Of TObject, TValue1, TValue2, TValue3), TValue1, TValue2, TValue3)
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(Of TObject, TValue1, TValue2, TValue3)(System.Collections.Generic.IEnumerable(Of TinyLife.Goals.IGoalTriggerable), TObject, TinyLife.Goals.GoalTrigger(Of TObject, TValue1, TValue2, TValue3), TValue1, TValue2, TValue3)
  name.vb: Trigger(Of TObject, TValue1, TValue2, TValue3)(IEnumerable(Of IGoalTriggerable), TObject, GoalTrigger(Of TObject, TValue1, TValue2, TValue3), TValue1, TValue2, TValue3)
references:
- uid: TinyLife.Goals.GoalSet
  commentId: T:TinyLife.Goals.GoalSet
  parent: TinyLife.Goals
  href: TinyLife.Goals.GoalSet.html
  name: GoalSet
  nameWithType: GoalSet
  fullName: TinyLife.Goals.GoalSet
- uid: TinyLife.Goals.AutoTriggerGoal
  commentId: T:TinyLife.Goals.AutoTriggerGoal
  parent: TinyLife.Goals
  href: TinyLife.Goals.AutoTriggerGoal.html
  name: AutoTriggerGoal
  nameWithType: AutoTriggerGoal
  fullName: TinyLife.Goals.AutoTriggerGoal
- uid: TinyLife.Goals.GoalTrigger
  commentId: T:TinyLife.Goals.GoalTrigger
  parent: TinyLife.Goals
  href: TinyLife.Goals.GoalTrigger.html
  name: GoalTrigger
  nameWithType: GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  href: TinyLife.html
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Goals
    name: Goals
    href: TinyLife.Goals.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Goals
    name: Goals
    href: TinyLife.Goals.html
- uid: TinyLife.Goals.IGoalTriggerable.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<IGoalTriggerable>(IGoalTriggerable)
  nameWithType: Extensions.JsonCopy<IGoalTriggerable>(IGoalTriggerable)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.IGoalTriggerable>(TinyLife.Goals.IGoalTriggerable)
  nameWithType.vb: Extensions.JsonCopy(Of IGoalTriggerable)(IGoalTriggerable)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.IGoalTriggerable)(TinyLife.Goals.IGoalTriggerable)
  name.vb: JsonCopy(Of IGoalTriggerable)(IGoalTriggerable)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Goals.IGoalTriggerable)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    href: TinyLife.Goals.IGoalTriggerable.html
  - name: '>'
  - name: (
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    href: TinyLife.Goals.IGoalTriggerable.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Goals.IGoalTriggerable)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    href: TinyLife.Goals.IGoalTriggerable.html
  - name: )
  - name: (
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    href: TinyLife.Goals.IGoalTriggerable.html
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  isExternal: true
  href: TinyLife.Goals.IGoalTriggerable.html#TinyLife_Goals_IGoalTriggerable_Trigger_TinyLife_Goals_IGoalTriggerable_System_Object_TinyLife_Goals_GoalTrigger_System_Object___
  name: Trigger(IGoalTriggerable, object, GoalTrigger, object[])
  nameWithType: IGoalTriggerable.Trigger(IGoalTriggerable, object, GoalTrigger, object[])
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable, object, TinyLife.Goals.GoalTrigger, object[])
  nameWithType.vb: IGoalTriggerable.Trigger(IGoalTriggerable, Object, GoalTrigger, Object())
  fullName.vb: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable, Object, TinyLife.Goals.GoalTrigger, Object())
  name.vb: Trigger(IGoalTriggerable, Object, GoalTrigger, Object())
  spec.csharp:
  - uid: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
    name: Trigger
    href: TinyLife.Goals.IGoalTriggerable.html#TinyLife_Goals_IGoalTriggerable_Trigger_TinyLife_Goals_IGoalTriggerable_System_Object_TinyLife_Goals_GoalTrigger_System_Object___
  - name: (
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    href: TinyLife.Goals.IGoalTriggerable.html
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger.html
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
    name: Trigger
    href: TinyLife.Goals.IGoalTriggerable.html#TinyLife_Goals_IGoalTriggerable_Trigger_TinyLife_Goals_IGoalTriggerable_System_Object_TinyLife_Goals_GoalTrigger_System_Object___
  - name: (
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    href: TinyLife.Goals.IGoalTriggerable.html
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger.html
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: TinyLife.Goals.IGoalTriggerable
  commentId: T:TinyLife.Goals.IGoalTriggerable
  parent: TinyLife.Goals
  href: TinyLife.Goals.IGoalTriggerable.html
  name: IGoalTriggerable
  nameWithType: IGoalTriggerable
  fullName: TinyLife.Goals.IGoalTriggerable
- uid: TinyLife.Goals.IGoalTriggerable.TryTrigger*
  commentId: Overload:TinyLife.Goals.IGoalTriggerable.TryTrigger
  href: TinyLife.Goals.IGoalTriggerable.html#TinyLife_Goals_IGoalTriggerable_TryTrigger_System_Object_TinyLife_Goals_GoalTrigger_System_Object_
  name: TryTrigger
  nameWithType: IGoalTriggerable.TryTrigger
  fullName: TinyLife.Goals.IGoalTriggerable.TryTrigger
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Goals.AmountGoal
  commentId: T:TinyLife.Goals.AmountGoal
  href: TinyLife.Goals.AmountGoal.html
  name: AmountGoal
  nameWithType: AmountGoal
  fullName: TinyLife.Goals.AmountGoal
- uid: TinyLife.Goals.ConditionedGoal
  commentId: T:TinyLife.Goals.ConditionedGoal
  href: TinyLife.Goals.ConditionedGoal.html
  name: ConditionedGoal
  nameWithType: ConditionedGoal
  fullName: TinyLife.Goals.ConditionedGoal
- uid: TinyLife.Goals.DistinctGoal`1
  commentId: T:TinyLife.Goals.DistinctGoal`1
  href: TinyLife.Goals.DistinctGoal-1.html
  name: DistinctGoal<T>
  nameWithType: DistinctGoal<T>
  fullName: TinyLife.Goals.DistinctGoal<T>
  nameWithType.vb: DistinctGoal(Of T)
  fullName.vb: TinyLife.Goals.DistinctGoal(Of T)
  name.vb: DistinctGoal(Of T)
  spec.csharp:
  - uid: TinyLife.Goals.DistinctGoal`1
    name: DistinctGoal
    href: TinyLife.Goals.DistinctGoal-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: TinyLife.Goals.DistinctGoal`1
    name: DistinctGoal
    href: TinyLife.Goals.DistinctGoal-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.Objects.PersonLike.GetCurrentGoals
  commentId: M:TinyLife.Objects.PersonLike.GetCurrentGoals
  parent: TinyLife.Objects.PersonLike
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetCurrentGoals
  name: GetCurrentGoals()
  nameWithType: PersonLike.GetCurrentGoals()
  fullName: TinyLife.Objects.PersonLike.GetCurrentGoals()
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.GetCurrentGoals
    name: GetCurrentGoals
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetCurrentGoals
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.GetCurrentGoals
    name: GetCurrentGoals
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetCurrentGoals
  - name: (
  - name: )
- uid: TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object,TinyLife.Goals.GoalTrigger,System.Object)
  commentId: M:TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object,TinyLife.Goals.GoalTrigger,System.Object)
  isExternal: true
  href: TinyLife.Goals.IGoalTriggerable.html#TinyLife_Goals_IGoalTriggerable_TryTrigger_System_Object_TinyLife_Goals_GoalTrigger_System_Object_
  name: TryTrigger(object, GoalTrigger, object)
  nameWithType: IGoalTriggerable.TryTrigger(object, GoalTrigger, object)
  fullName: TinyLife.Goals.IGoalTriggerable.TryTrigger(object, TinyLife.Goals.GoalTrigger, object)
  nameWithType.vb: IGoalTriggerable.TryTrigger(Object, GoalTrigger, Object)
  fullName.vb: TinyLife.Goals.IGoalTriggerable.TryTrigger(Object, TinyLife.Goals.GoalTrigger, Object)
  name.vb: TryTrigger(Object, GoalTrigger, Object)
  spec.csharp:
  - uid: TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object,TinyLife.Goals.GoalTrigger,System.Object)
    name: TryTrigger
    href: TinyLife.Goals.IGoalTriggerable.html#TinyLife_Goals_IGoalTriggerable_TryTrigger_System_Object_TinyLife_Goals_GoalTrigger_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger.html
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: TinyLife.Goals.IGoalTriggerable.TryTrigger(System.Object,TinyLife.Goals.GoalTrigger,System.Object)
    name: TryTrigger
    href: TinyLife.Goals.IGoalTriggerable.html#TinyLife_Goals_IGoalTriggerable_TryTrigger_System_Object_TinyLife_Goals_GoalTrigger_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger.html
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TinyLife.Goals.IGoalTriggerable.Trigger*
  commentId: Overload:TinyLife.Goals.IGoalTriggerable.Trigger
  href: TinyLife.Goals.IGoalTriggerable.html#TinyLife_Goals_IGoalTriggerable_Trigger_TinyLife_Goals_IGoalTriggerable_System_Object_TinyLife_Goals_GoalTrigger_System_Object___
  name: Trigger
  nameWithType: IGoalTriggerable.Trigger
  fullName: TinyLife.Goals.IGoalTriggerable.Trigger
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: '{TObject}'
  commentId: '!:TObject'
  definition: TObject
  name: TObject
  nameWithType: TObject
  fullName: TObject
- uid: TinyLife.Goals.GoalTrigger{{TObject},{TValue}}
  commentId: T:TinyLife.Goals.GoalTrigger{``0,``1}
  parent: TinyLife.Goals
  definition: TinyLife.Goals.GoalTrigger`2
  href: TinyLife.Goals.GoalTrigger-2.html
  name: GoalTrigger<TObject, TValue>
  nameWithType: GoalTrigger<TObject, TValue>
  fullName: TinyLife.Goals.GoalTrigger<TObject, TValue>
  nameWithType.vb: GoalTrigger(Of TObject, TValue)
  fullName.vb: TinyLife.Goals.GoalTrigger(Of TObject, TValue)
  name.vb: GoalTrigger(Of TObject, TValue)
  spec.csharp:
  - uid: TinyLife.Goals.GoalTrigger`2
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-2.html
  - name: <
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: TinyLife.Goals.GoalTrigger`2
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TObject
  name: TObject
  nameWithType: TObject
  fullName: TObject
- uid: TinyLife.Goals.GoalTrigger`2
  commentId: T:TinyLife.Goals.GoalTrigger`2
  href: TinyLife.Goals.GoalTrigger-2.html
  name: GoalTrigger<TObject, TValue>
  nameWithType: GoalTrigger<TObject, TValue>
  fullName: TinyLife.Goals.GoalTrigger<TObject, TValue>
  nameWithType.vb: GoalTrigger(Of TObject, TValue)
  fullName.vb: TinyLife.Goals.GoalTrigger(Of TObject, TValue)
  name.vb: GoalTrigger(Of TObject, TValue)
  spec.csharp:
  - uid: TinyLife.Goals.GoalTrigger`2
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-2.html
  - name: <
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: TinyLife.Goals.GoalTrigger`2
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TinyLife.Goals.GoalTrigger{{TObject},{TValue1},{TValue2}}
  commentId: T:TinyLife.Goals.GoalTrigger{``0,``1,``2}
  parent: TinyLife.Goals
  definition: TinyLife.Goals.GoalTrigger`3
  href: TinyLife.Goals.GoalTrigger-3.html
  name: GoalTrigger<TObject, TValue1, TValue2>
  nameWithType: GoalTrigger<TObject, TValue1, TValue2>
  fullName: TinyLife.Goals.GoalTrigger<TObject, TValue1, TValue2>
  nameWithType.vb: GoalTrigger(Of TObject, TValue1, TValue2)
  fullName.vb: TinyLife.Goals.GoalTrigger(Of TObject, TValue1, TValue2)
  name.vb: GoalTrigger(Of TObject, TValue1, TValue2)
  spec.csharp:
  - uid: TinyLife.Goals.GoalTrigger`3
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-3.html
  - name: <
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue1
  - name: ','
  - name: " "
  - name: TValue2
  - name: '>'
  spec.vb:
  - uid: TinyLife.Goals.GoalTrigger`3
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue1
  - name: ','
  - name: " "
  - name: TValue2
  - name: )
- uid: '{TValue1}'
  commentId: '!:TValue1'
  definition: TValue1
  name: TValue1
  nameWithType: TValue1
  fullName: TValue1
- uid: '{TValue2}'
  commentId: '!:TValue2'
  definition: TValue2
  name: TValue2
  nameWithType: TValue2
  fullName: TValue2
- uid: TinyLife.Goals.GoalTrigger`3
  commentId: T:TinyLife.Goals.GoalTrigger`3
  href: TinyLife.Goals.GoalTrigger-3.html
  name: GoalTrigger<TObject, TValue1, TValue2>
  nameWithType: GoalTrigger<TObject, TValue1, TValue2>
  fullName: TinyLife.Goals.GoalTrigger<TObject, TValue1, TValue2>
  nameWithType.vb: GoalTrigger(Of TObject, TValue1, TValue2)
  fullName.vb: TinyLife.Goals.GoalTrigger(Of TObject, TValue1, TValue2)
  name.vb: GoalTrigger(Of TObject, TValue1, TValue2)
  spec.csharp:
  - uid: TinyLife.Goals.GoalTrigger`3
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-3.html
  - name: <
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue1
  - name: ','
  - name: " "
  - name: TValue2
  - name: '>'
  spec.vb:
  - uid: TinyLife.Goals.GoalTrigger`3
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue1
  - name: ','
  - name: " "
  - name: TValue2
  - name: )
- uid: TValue1
  name: TValue1
  nameWithType: TValue1
  fullName: TValue1
- uid: TValue2
  name: TValue2
  nameWithType: TValue2
  fullName: TValue2
- uid: TinyLife.Goals.GoalTrigger{{TObject},{TValue1},{TValue2},{TValue3}}
  commentId: T:TinyLife.Goals.GoalTrigger{``0,``1,``2,``3}
  parent: TinyLife.Goals
  definition: TinyLife.Goals.GoalTrigger`4
  href: TinyLife.Goals.GoalTrigger-4.html
  name: GoalTrigger<TObject, TValue1, TValue2, TValue3>
  nameWithType: GoalTrigger<TObject, TValue1, TValue2, TValue3>
  fullName: TinyLife.Goals.GoalTrigger<TObject, TValue1, TValue2, TValue3>
  nameWithType.vb: GoalTrigger(Of TObject, TValue1, TValue2, TValue3)
  fullName.vb: TinyLife.Goals.GoalTrigger(Of TObject, TValue1, TValue2, TValue3)
  name.vb: GoalTrigger(Of TObject, TValue1, TValue2, TValue3)
  spec.csharp:
  - uid: TinyLife.Goals.GoalTrigger`4
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-4.html
  - name: <
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue1
  - name: ','
  - name: " "
  - name: TValue2
  - name: ','
  - name: " "
  - name: TValue3
  - name: '>'
  spec.vb:
  - uid: TinyLife.Goals.GoalTrigger`4
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-4.html
  - name: (
  - name: Of
  - name: " "
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue1
  - name: ','
  - name: " "
  - name: TValue2
  - name: ','
  - name: " "
  - name: TValue3
  - name: )
- uid: '{TValue3}'
  commentId: '!:TValue3'
  definition: TValue3
  name: TValue3
  nameWithType: TValue3
  fullName: TValue3
- uid: TinyLife.Goals.GoalTrigger`4
  commentId: T:TinyLife.Goals.GoalTrigger`4
  href: TinyLife.Goals.GoalTrigger-4.html
  name: GoalTrigger<TObject, TValue1, TValue2, TValue3>
  nameWithType: GoalTrigger<TObject, TValue1, TValue2, TValue3>
  fullName: TinyLife.Goals.GoalTrigger<TObject, TValue1, TValue2, TValue3>
  nameWithType.vb: GoalTrigger(Of TObject, TValue1, TValue2, TValue3)
  fullName.vb: TinyLife.Goals.GoalTrigger(Of TObject, TValue1, TValue2, TValue3)
  name.vb: GoalTrigger(Of TObject, TValue1, TValue2, TValue3)
  spec.csharp:
  - uid: TinyLife.Goals.GoalTrigger`4
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-4.html
  - name: <
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue1
  - name: ','
  - name: " "
  - name: TValue2
  - name: ','
  - name: " "
  - name: TValue3
  - name: '>'
  spec.vb:
  - uid: TinyLife.Goals.GoalTrigger`4
    name: GoalTrigger
    href: TinyLife.Goals.GoalTrigger-4.html
  - name: (
  - name: Of
  - name: " "
  - name: TObject
  - name: ','
  - name: " "
  - name: TValue1
  - name: ','
  - name: " "
  - name: TValue2
  - name: ','
  - name: " "
  - name: TValue3
  - name: )
- uid: TValue3
  name: TValue3
  nameWithType: TValue3
  fullName: TValue3
- uid: System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Goals.IGoalTriggerable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IGoalTriggerable>
  nameWithType: IEnumerable<IGoalTriggerable>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Goals.IGoalTriggerable>
  nameWithType.vb: IEnumerable(Of IGoalTriggerable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Goals.IGoalTriggerable)
  name.vb: IEnumerable(Of IGoalTriggerable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    href: TinyLife.Goals.IGoalTriggerable.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    href: TinyLife.Goals.IGoalTriggerable.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
