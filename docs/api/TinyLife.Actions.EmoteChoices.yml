### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.EmoteChoices
  commentId: T:TinyLife.Actions.EmoteChoices
  id: EmoteChoices
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.EmoteChoices.#ctor(TinyLife.Actions.EmoteCategory)
  - TinyLife.Actions.EmoteChoices.#ctor(TinyLife.Actions.Emote[])
  - TinyLife.Actions.EmoteChoices.GetEmote(System.Random)
  - TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.Emote)~TinyLife.Actions.EmoteChoices
  - TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.EmoteCategory)~TinyLife.Actions.EmoteChoices
  - TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.Emote[])~TinyLife.Actions.EmoteChoices
  langs:
  - csharp
  - vb
  name: EmoteChoices
  nameWithType: EmoteChoices
  fullName: TinyLife.Actions.EmoteChoices
  type: Struct
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A structure used by <xref href="TinyLife.Objects.PersonLike.DisplayEmote(TinyLife.Actions.EmoteChoices%2cSystem.Boolean%2cSystem.Single%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> to allow passing either a combined <xref href="TinyLife.Actions.EmoteCategory" data-throw-if-not-resolved="false"></xref> flag, or a set of specific <xref href="TinyLife.Actions.Emote" data-throw-if-not-resolved="false"></xref> instances, from which a final emote should be chosen.
  example: []
  syntax:
    content: 'public readonly record struct EmoteChoices : IEquatable<EmoteChoices>'
    content.vb: Public Structure EmoteChoices Implements IEquatable(Of EmoteChoices)
  implements:
  - System.IEquatable{TinyLife.Actions.EmoteChoices}
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Actions.EmoteChoices.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Actions.EmoteChoices.#ctor(TinyLife.Actions.EmoteCategory)
  commentId: M:TinyLife.Actions.EmoteChoices.#ctor(TinyLife.Actions.EmoteCategory)
  id: '#ctor(TinyLife.Actions.EmoteCategory)'
  parent: TinyLife.Actions.EmoteChoices
  langs:
  - csharp
  - vb
  name: EmoteChoices(EmoteCategory)
  nameWithType: EmoteChoices.EmoteChoices(EmoteCategory)
  fullName: TinyLife.Actions.EmoteChoices.EmoteChoices(TinyLife.Actions.EmoteCategory)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Creates a new set of emote choices from the given <code class="paramref">categories</code>.
  example: []
  syntax:
    content: public EmoteChoices(EmoteCategory categories)
    parameters:
    - id: categories
      type: TinyLife.Actions.EmoteCategory
    content.vb: Public Sub New(categories As EmoteCategory)
  overload: TinyLife.Actions.EmoteChoices.#ctor*
  nameWithType.vb: EmoteChoices.New(EmoteCategory)
  fullName.vb: TinyLife.Actions.EmoteChoices.New(TinyLife.Actions.EmoteCategory)
  name.vb: New(EmoteCategory)
- uid: TinyLife.Actions.EmoteChoices.#ctor(TinyLife.Actions.Emote[])
  commentId: M:TinyLife.Actions.EmoteChoices.#ctor(TinyLife.Actions.Emote[])
  id: '#ctor(TinyLife.Actions.Emote[])'
  parent: TinyLife.Actions.EmoteChoices
  langs:
  - csharp
  - vb
  name: EmoteChoices(params Emote[])
  nameWithType: EmoteChoices.EmoteChoices(params Emote[])
  fullName: TinyLife.Actions.EmoteChoices.EmoteChoices(params TinyLife.Actions.Emote[])
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Creates a new set of emote choices from the given <code class="paramref">emotes</code>.
  example: []
  syntax:
    content: public EmoteChoices(params Emote[] emotes)
    parameters:
    - id: emotes
      type: TinyLife.Actions.Emote[]
    content.vb: Public Sub New(ParamArray emotes As Emote())
  overload: TinyLife.Actions.EmoteChoices.#ctor*
  nameWithType.vb: EmoteChoices.New(ParamArray Emote())
  fullName.vb: TinyLife.Actions.EmoteChoices.New(ParamArray TinyLife.Actions.Emote())
  name.vb: New(ParamArray Emote())
- uid: TinyLife.Actions.EmoteChoices.GetEmote(System.Random)
  commentId: M:TinyLife.Actions.EmoteChoices.GetEmote(System.Random)
  id: GetEmote(System.Random)
  parent: TinyLife.Actions.EmoteChoices
  langs:
  - csharp
  - vb
  name: GetEmote(Random)
  nameWithType: EmoteChoices.GetEmote(Random)
  fullName: TinyLife.Actions.EmoteChoices.GetEmote(System.Random)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns an emote from this set of choices, using the given <code class="paramref">random</code> to choose one.
  example: []
  syntax:
    content: public Emote GetEmote(Random random)
    parameters:
    - id: random
      type: System.Random
      description: ''
    return:
      type: TinyLife.Actions.Emote
      description: ''
    content.vb: Public Function GetEmote(random As Random) As Emote
  overload: TinyLife.Actions.EmoteChoices.GetEmote*
- uid: TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.EmoteCategory)~TinyLife.Actions.EmoteChoices
  commentId: M:TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.EmoteCategory)~TinyLife.Actions.EmoteChoices
  id: op_Implicit(TinyLife.Actions.EmoteCategory)~TinyLife.Actions.EmoteChoices
  parent: TinyLife.Actions.EmoteChoices
  langs:
  - csharp
  - vb
  name: implicit operator EmoteChoices(EmoteCategory)
  nameWithType: EmoteChoices.implicit operator EmoteChoices(EmoteCategory)
  fullName: TinyLife.Actions.EmoteChoices.implicit operator TinyLife.Actions.EmoteChoices(TinyLife.Actions.EmoteCategory)
  type: Operator
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Implicitly converts an <xref href="TinyLife.Actions.EmoteCategory" data-throw-if-not-resolved="false"></xref> to an <xref href="TinyLife.Actions.EmoteChoices" data-throw-if-not-resolved="false"></xref> instance.
  example: []
  syntax:
    content: public static implicit operator EmoteChoices(EmoteCategory category)
    parameters:
    - id: category
      type: TinyLife.Actions.EmoteCategory
    return:
      type: TinyLife.Actions.EmoteChoices
    content.vb: Public Shared Widening Operator CType(category As EmoteCategory) As EmoteChoices
  overload: TinyLife.Actions.EmoteChoices.op_Implicit*
  nameWithType.vb: EmoteChoices.CType(EmoteCategory)
  fullName.vb: TinyLife.Actions.EmoteChoices.CType(TinyLife.Actions.EmoteCategory)
  name.vb: CType(EmoteCategory)
- uid: TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.Emote[])~TinyLife.Actions.EmoteChoices
  commentId: M:TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.Emote[])~TinyLife.Actions.EmoteChoices
  id: op_Implicit(TinyLife.Actions.Emote[])~TinyLife.Actions.EmoteChoices
  parent: TinyLife.Actions.EmoteChoices
  langs:
  - csharp
  - vb
  name: implicit operator EmoteChoices(Emote[])
  nameWithType: EmoteChoices.implicit operator EmoteChoices(Emote[])
  fullName: TinyLife.Actions.EmoteChoices.implicit operator TinyLife.Actions.EmoteChoices(TinyLife.Actions.Emote[])
  type: Operator
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Implicitly converts an array of <xref href="TinyLife.Actions.Emote" data-throw-if-not-resolved="false"></xref> instances to an <xref href="TinyLife.Actions.EmoteChoices" data-throw-if-not-resolved="false"></xref> instance.
  example: []
  syntax:
    content: public static implicit operator EmoteChoices(Emote[] emotes)
    parameters:
    - id: emotes
      type: TinyLife.Actions.Emote[]
    return:
      type: TinyLife.Actions.EmoteChoices
    content.vb: Public Shared Widening Operator CType(emotes As Emote()) As EmoteChoices
  overload: TinyLife.Actions.EmoteChoices.op_Implicit*
  nameWithType.vb: EmoteChoices.CType(Emote())
  fullName.vb: TinyLife.Actions.EmoteChoices.CType(TinyLife.Actions.Emote())
  name.vb: CType(Emote())
- uid: TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.Emote)~TinyLife.Actions.EmoteChoices
  commentId: M:TinyLife.Actions.EmoteChoices.op_Implicit(TinyLife.Actions.Emote)~TinyLife.Actions.EmoteChoices
  id: op_Implicit(TinyLife.Actions.Emote)~TinyLife.Actions.EmoteChoices
  parent: TinyLife.Actions.EmoteChoices
  langs:
  - csharp
  - vb
  name: implicit operator EmoteChoices(Emote)
  nameWithType: EmoteChoices.implicit operator EmoteChoices(Emote)
  fullName: TinyLife.Actions.EmoteChoices.implicit operator TinyLife.Actions.EmoteChoices(TinyLife.Actions.Emote)
  type: Operator
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Implicitly converts an <xref href="TinyLife.Actions.Emote" data-throw-if-not-resolved="false"></xref> to an <xref href="TinyLife.Actions.EmoteChoices" data-throw-if-not-resolved="false"></xref> instance.
  example: []
  syntax:
    content: public static implicit operator EmoteChoices(Emote emote)
    parameters:
    - id: emote
      type: TinyLife.Actions.Emote
    return:
      type: TinyLife.Actions.EmoteChoices
    content.vb: Public Shared Widening Operator CType(emote As Emote) As EmoteChoices
  overload: TinyLife.Actions.EmoteChoices.op_Implicit*
  nameWithType.vb: EmoteChoices.CType(Emote)
  fullName.vb: TinyLife.Actions.EmoteChoices.CType(TinyLife.Actions.Emote)
  name.vb: CType(Emote)
references:
- uid: TinyLife.Objects.PersonLike.DisplayEmote(TinyLife.Actions.EmoteChoices,System.Boolean,System.Single,System.Single)
  commentId: M:TinyLife.Objects.PersonLike.DisplayEmote(TinyLife.Actions.EmoteChoices,System.Boolean,System.Single,System.Single)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_DisplayEmote_TinyLife_Actions_EmoteChoices_System_Boolean_System_Single_System_Single_
  name: DisplayEmote(EmoteChoices, bool, float, float)
  nameWithType: PersonLike.DisplayEmote(EmoteChoices, bool, float, float)
  fullName: TinyLife.Objects.PersonLike.DisplayEmote(TinyLife.Actions.EmoteChoices, bool, float, float)
  nameWithType.vb: PersonLike.DisplayEmote(EmoteChoices, Boolean, Single, Single)
  fullName.vb: TinyLife.Objects.PersonLike.DisplayEmote(TinyLife.Actions.EmoteChoices, Boolean, Single, Single)
  name.vb: DisplayEmote(EmoteChoices, Boolean, Single, Single)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.DisplayEmote(TinyLife.Actions.EmoteChoices,System.Boolean,System.Single,System.Single)
    name: DisplayEmote
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_DisplayEmote_TinyLife_Actions_EmoteChoices_System_Boolean_System_Single_System_Single_
  - name: (
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.DisplayEmote(TinyLife.Actions.EmoteChoices,System.Boolean,System.Single,System.Single)
    name: DisplayEmote
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_DisplayEmote_TinyLife_Actions_EmoteChoices_System_Boolean_System_Single_System_Single_
  - name: (
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.EmoteCategory
  commentId: T:TinyLife.Actions.EmoteCategory
  parent: TinyLife.Actions
  href: TinyLife.Actions.EmoteCategory.html
  name: EmoteCategory
  nameWithType: EmoteCategory
  fullName: TinyLife.Actions.EmoteCategory
- uid: TinyLife.Actions.Emote
  commentId: T:TinyLife.Actions.Emote
  parent: TinyLife.Actions
  href: TinyLife.Actions.Emote.html
  name: Emote
  nameWithType: Emote
  fullName: TinyLife.Actions.Emote
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: System.IEquatable{TinyLife.Actions.EmoteChoices}
  commentId: T:System.IEquatable{TinyLife.Actions.EmoteChoices}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<EmoteChoices>
  nameWithType: IEquatable<EmoteChoices>
  fullName: System.IEquatable<TinyLife.Actions.EmoteChoices>
  nameWithType.vb: IEquatable(Of EmoteChoices)
  fullName.vb: System.IEquatable(Of TinyLife.Actions.EmoteChoices)
  name.vb: IEquatable(Of EmoteChoices)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TinyLife.Actions.EmoteChoices.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<EmoteChoices>(EmoteChoices)
  nameWithType: Extensions.JsonCopy<EmoteChoices>(EmoteChoices)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.EmoteChoices>(TinyLife.Actions.EmoteChoices)
  nameWithType.vb: Extensions.JsonCopy(Of EmoteChoices)(EmoteChoices)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.EmoteChoices)(TinyLife.Actions.EmoteChoices)
  name.vb: JsonCopy(Of EmoteChoices)(EmoteChoices)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.EmoteChoices)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.EmoteChoices)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: )
  - name: (
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: )
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.Actions.EmoteChoices.#ctor*
  commentId: Overload:TinyLife.Actions.EmoteChoices.#ctor
  href: TinyLife.Actions.EmoteChoices.html#TinyLife_Actions_EmoteChoices__ctor_TinyLife_Actions_EmoteCategory_
  name: EmoteChoices
  nameWithType: EmoteChoices.EmoteChoices
  fullName: TinyLife.Actions.EmoteChoices.EmoteChoices
  nameWithType.vb: EmoteChoices.New
  fullName.vb: TinyLife.Actions.EmoteChoices.New
  name.vb: New
- uid: TinyLife.Actions.Emote[]
  isExternal: true
  href: TinyLife.Actions.Emote.html
  name: Emote[]
  nameWithType: Emote[]
  fullName: TinyLife.Actions.Emote[]
  nameWithType.vb: Emote()
  fullName.vb: TinyLife.Actions.Emote()
  name.vb: Emote()
  spec.csharp:
  - uid: TinyLife.Actions.Emote
    name: Emote
    href: TinyLife.Actions.Emote.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.Actions.Emote
    name: Emote
    href: TinyLife.Actions.Emote.html
  - name: (
  - name: )
- uid: TinyLife.Actions.EmoteChoices.GetEmote*
  commentId: Overload:TinyLife.Actions.EmoteChoices.GetEmote
  href: TinyLife.Actions.EmoteChoices.html#TinyLife_Actions_EmoteChoices_GetEmote_System_Random_
  name: GetEmote
  nameWithType: EmoteChoices.GetEmote
  fullName: TinyLife.Actions.EmoteChoices.GetEmote
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.random
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.Actions.EmoteChoices
  commentId: T:TinyLife.Actions.EmoteChoices
  parent: TinyLife.Actions
  href: TinyLife.Actions.EmoteChoices.html
  name: EmoteChoices
  nameWithType: EmoteChoices
  fullName: TinyLife.Actions.EmoteChoices
- uid: TinyLife.Actions.EmoteChoices.op_Implicit*
  commentId: Overload:TinyLife.Actions.EmoteChoices.op_Implicit
  name: implicit operator
  nameWithType: EmoteChoices.implicit operator
  fullName: TinyLife.Actions.EmoteChoices.implicit operator
  nameWithType.vb: EmoteChoices.CType
  fullName.vb: TinyLife.Actions.EmoteChoices.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
