### YamlMime:ManagedReference
items:
- uid: TinyLife.Utilities.AppliedMigrations
  commentId: T:TinyLife.Utilities.AppliedMigrations
  id: AppliedMigrations
  parent: TinyLife.Utilities
  children:
  - TinyLife.Utilities.AppliedMigrations.ApplyWithData(System.Collections.Generic.HashSet{System.String}@)
  - TinyLife.Utilities.AppliedMigrations.Done
  - TinyLife.Utilities.AppliedMigrations.DoneNames
  - TinyLife.Utilities.AppliedMigrations.Migrate``1(System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}},``0,TinyLife.Utilities.MigrationPhase)
  - TinyLife.Utilities.AppliedMigrations.Migrate``1(System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}},``0,TinyLife.Utilities.MigrationPhase,System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JToken}@)
  - TinyLife.Utilities.AppliedMigrations.Silent
  langs:
  - csharp
  - vb
  name: AppliedMigrations
  nameWithType: AppliedMigrations
  fullName: TinyLife.Utilities.AppliedMigrations
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.Utilities
  summary: A class that handles the application of <xref href="TinyLife.Utilities.Migration" data-throw-if-not-resolved="false"></xref> actions on objects that are being validated or loaded from disk.
  example: []
  syntax:
    content: public class AppliedMigrations
    content.vb: Public Class AppliedMigrations
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Utilities.AppliedMigrations.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Utilities.AppliedMigrations.Done
  commentId: F:TinyLife.Utilities.AppliedMigrations.Done
  id: Done
  parent: TinyLife.Utilities.AppliedMigrations
  langs:
  - csharp
  - vb
  name: Done
  nameWithType: AppliedMigrations.Done
  fullName: TinyLife.Utilities.AppliedMigrations.Done
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Utilities
  summary: Returns a new <xref href="TinyLife.Utilities.AppliedMigrations" data-throw-if-not-resolved="false"></xref> instance that already has all migrations marked as applied.
  example: []
  syntax:
    content: public static readonly AppliedMigrations Done
    return:
      type: TinyLife.Utilities.AppliedMigrations
    content.vb: Public Shared ReadOnly Done As AppliedMigrations
- uid: TinyLife.Utilities.AppliedMigrations.Silent
  commentId: F:TinyLife.Utilities.AppliedMigrations.Silent
  id: Silent
  parent: TinyLife.Utilities.AppliedMigrations
  langs:
  - csharp
  - vb
  name: Silent
  nameWithType: AppliedMigrations.Silent
  fullName: TinyLife.Utilities.AppliedMigrations.Silent
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Utilities
  summary: Returns a new <xref href="TinyLife.Utilities.AppliedMigrations" data-throw-if-not-resolved="false"></xref> instance that only applies migrations that are <xref href="TinyLife.Utilities.Migration.Silent" data-throw-if-not-resolved="false"></xref>, meaning no migration names will be stored.
  example: []
  syntax:
    content: public static readonly AppliedMigrations Silent
    return:
      type: TinyLife.Utilities.AppliedMigrations
    content.vb: Public Shared ReadOnly Silent As AppliedMigrations
- uid: TinyLife.Utilities.AppliedMigrations.Migrate``1(System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}},``0,TinyLife.Utilities.MigrationPhase,System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JToken}@)
  commentId: M:TinyLife.Utilities.AppliedMigrations.Migrate``1(System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}},``0,TinyLife.Utilities.MigrationPhase,System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JToken}@)
  id: Migrate``1(System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}},``0,TinyLife.Utilities.MigrationPhase,System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JToken}@)
  parent: TinyLife.Utilities.AppliedMigrations
  langs:
  - csharp
  - vb
  name: Migrate<T>(ICollection<Migration<T>>, T, MigrationPhase, ref Dictionary<string, JToken>)
  nameWithType: AppliedMigrations.Migrate<T>(ICollection<Migration<T>>, T, MigrationPhase, ref Dictionary<string, JToken>)
  fullName: TinyLife.Utilities.AppliedMigrations.Migrate<T>(System.Collections.Generic.ICollection<TinyLife.Utilities.Migration<T>>, T, TinyLife.Utilities.MigrationPhase, ref System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Utilities
  summary: >-
    Migrates the given object with type <code class="typeparamref">T</code> using the given set of <code class="paramref">migrations</code>.

    If a migration returns the <xref href="TinyLife.Utilities.MigrationResult.Failure" data-throw-if-not-resolved="false"></xref> result, this method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, implying that the object being migrated is invalid.
  example: []
  syntax:
    content: public bool Migrate<T>(ICollection<Migration<T>> migrations, T obj, MigrationPhase phase, ref Dictionary<string, JToken> jsonExtensionData)
    parameters:
    - id: migrations
      type: System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{{T}}}
      description: The migrations to apply.
    - id: obj
      type: '{T}'
      description: The object to apply the migrations on.
    - id: phase
      type: TinyLife.Utilities.MigrationPhase
      description: The migration phase to run.
    - id: jsonExtensionData
      type: System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JToken}
      description: The object's JSON extension data, which is additional data that is loaded from disk, but didn't have an appropriate property or field to store it in. This can be useful for migrating objects whose property or field names changed. If all extension data is consumed by the migrations, this parameter is set to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> automatically.
    typeParameters:
    - id: T
      description: The type of object to migrate.
    return:
      type: System.Boolean
      description: Whether the migration was successful. If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, the object should be marked as invalid.
    content.vb: Public Function Migrate(Of T)(migrations As ICollection(Of Migration(Of T)), obj As T, phase As MigrationPhase, jsonExtensionData As Dictionary(Of String, JToken)) As Boolean
  overload: TinyLife.Utilities.AppliedMigrations.Migrate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when only silent migrations can be applied and a nonsilent migration is contained in <code class="paramref">migrations</code>, or when the passed <code class="paramref">phase</code> is <xref href="TinyLife.Utilities.MigrationPhase.Single" data-throw-if-not-resolved="false"></xref> but a migration in the collection uses a different phase.
  nameWithType.vb: AppliedMigrations.Migrate(Of T)(ICollection(Of Migration(Of T)), T, MigrationPhase, Dictionary(Of String, JToken))
  fullName.vb: TinyLife.Utilities.AppliedMigrations.Migrate(Of T)(System.Collections.Generic.ICollection(Of TinyLife.Utilities.Migration(Of T)), T, TinyLife.Utilities.MigrationPhase, System.Collections.Generic.Dictionary(Of String, Newtonsoft.Json.Linq.JToken))
  name.vb: Migrate(Of T)(ICollection(Of Migration(Of T)), T, MigrationPhase, Dictionary(Of String, JToken))
- uid: TinyLife.Utilities.AppliedMigrations.Migrate``1(System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}},``0,TinyLife.Utilities.MigrationPhase)
  commentId: M:TinyLife.Utilities.AppliedMigrations.Migrate``1(System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}},``0,TinyLife.Utilities.MigrationPhase)
  id: Migrate``1(System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}},``0,TinyLife.Utilities.MigrationPhase)
  parent: TinyLife.Utilities.AppliedMigrations
  langs:
  - csharp
  - vb
  name: Migrate<T>(ICollection<Migration<T>>, T, MigrationPhase)
  nameWithType: AppliedMigrations.Migrate<T>(ICollection<Migration<T>>, T, MigrationPhase)
  fullName: TinyLife.Utilities.AppliedMigrations.Migrate<T>(System.Collections.Generic.ICollection<TinyLife.Utilities.Migration<T>>, T, TinyLife.Utilities.MigrationPhase)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Utilities
  summary: >-
    Migrates the given object with type <code class="typeparamref">T</code> using the given set of <code class="paramref">migrations</code>.

    If a migration returns the <xref href="TinyLife.Utilities.MigrationResult.Failure" data-throw-if-not-resolved="false"></xref> result, this method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, implying that the object being migrated is invalid.
  example: []
  syntax:
    content: public bool Migrate<T>(ICollection<Migration<T>> migrations, T obj, MigrationPhase phase)
    parameters:
    - id: migrations
      type: System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{{T}}}
      description: The migrations to apply.
    - id: obj
      type: '{T}'
      description: The object to apply the migrations on.
    - id: phase
      type: TinyLife.Utilities.MigrationPhase
      description: The migration phase to run.
    typeParameters:
    - id: T
      description: The type of object to migrate.
    return:
      type: System.Boolean
      description: Whether the migration was successful. If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, the object should be marked as invalid.
    content.vb: Public Function Migrate(Of T)(migrations As ICollection(Of Migration(Of T)), obj As T, phase As MigrationPhase) As Boolean
  overload: TinyLife.Utilities.AppliedMigrations.Migrate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when only silent migrations can be applied and a nonsilent migration is contained in <code class="paramref">migrations</code>, or when the passed <code class="paramref">phase</code> is <xref href="TinyLife.Utilities.MigrationPhase.Single" data-throw-if-not-resolved="false"></xref> but a migration in the collection uses a different phase.
  nameWithType.vb: AppliedMigrations.Migrate(Of T)(ICollection(Of Migration(Of T)), T, MigrationPhase)
  fullName.vb: TinyLife.Utilities.AppliedMigrations.Migrate(Of T)(System.Collections.Generic.ICollection(Of TinyLife.Utilities.Migration(Of T)), T, TinyLife.Utilities.MigrationPhase)
  name.vb: Migrate(Of T)(ICollection(Of Migration(Of T)), T, MigrationPhase)
- uid: TinyLife.Utilities.AppliedMigrations.ApplyWithData(System.Collections.Generic.HashSet{System.String}@)
  commentId: M:TinyLife.Utilities.AppliedMigrations.ApplyWithData(System.Collections.Generic.HashSet{System.String}@)
  id: ApplyWithData(System.Collections.Generic.HashSet{System.String}@)
  parent: TinyLife.Utilities.AppliedMigrations
  langs:
  - csharp
  - vb
  name: ApplyWithData(ref HashSet<string>)
  nameWithType: AppliedMigrations.ApplyWithData(ref HashSet<string>)
  fullName: TinyLife.Utilities.AppliedMigrations.ApplyWithData(ref System.Collections.Generic.HashSet<string>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Utilities
  summary: Returns a new applied migration handler that only applies migrations that haven't already been applied. Migrations that have previously been applied should be passed in the <code class="paramref">applied</code> parameter, and the resulting collection will be updated with the names of the migrations that have been applied.
  example: []
  syntax:
    content: public static AppliedMigrations ApplyWithData(ref HashSet<string> applied)
    parameters:
    - id: applied
      type: System.Collections.Generic.HashSet{System.String}
      description: The set of migrations that have already been applied.
    return:
      type: TinyLife.Utilities.AppliedMigrations
      description: The newly created applied migration handler.
    content.vb: Public Shared Function ApplyWithData(applied As HashSet(Of String)) As AppliedMigrations
  overload: TinyLife.Utilities.AppliedMigrations.ApplyWithData*
  nameWithType.vb: AppliedMigrations.ApplyWithData(HashSet(Of String))
  fullName.vb: TinyLife.Utilities.AppliedMigrations.ApplyWithData(System.Collections.Generic.HashSet(Of String))
  name.vb: ApplyWithData(HashSet(Of String))
- uid: TinyLife.Utilities.AppliedMigrations.DoneNames
  commentId: M:TinyLife.Utilities.AppliedMigrations.DoneNames
  id: DoneNames
  parent: TinyLife.Utilities.AppliedMigrations
  langs:
  - csharp
  - vb
  name: DoneNames()
  nameWithType: AppliedMigrations.DoneNames()
  fullName: TinyLife.Utilities.AppliedMigrations.DoneNames()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Utilities
  summary: Returns a set of all names of all <xref href="TinyLife.Utilities.Migration.Migrations" data-throw-if-not-resolved="false"></xref> that aren't <xref href="TinyLife.Utilities.Migration.Silent" data-throw-if-not-resolved="false"></xref>, which is used as the default value for <xref href="TinyLife.World.Map.AppliedMigrations" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.World.ExportedLot.AppliedMigrations" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.ExportedHousehold.AppliedMigrations" data-throw-if-not-resolved="false"></xref> to signify that all migrations have already been applied in a new map or exported content item.
  example: []
  syntax:
    content: public static HashSet<string> DoneNames()
    return:
      type: System.Collections.Generic.HashSet{System.String}
      description: The set of all migration names that aren't silent.
    content.vb: Public Shared Function DoneNames() As HashSet(Of String)
  overload: TinyLife.Utilities.AppliedMigrations.DoneNames*
references:
- uid: TinyLife.Utilities.Migration
  commentId: T:TinyLife.Utilities.Migration
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Migration.html
  name: Migration
  nameWithType: Migration
  fullName: TinyLife.Utilities.Migration
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Utilities.AppliedMigrations.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<AppliedMigrations>(AppliedMigrations)
  nameWithType: Extensions.JsonCopy<AppliedMigrations>(AppliedMigrations)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Utilities.AppliedMigrations>(TinyLife.Utilities.AppliedMigrations)
  nameWithType.vb: Extensions.JsonCopy(Of AppliedMigrations)(AppliedMigrations)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Utilities.AppliedMigrations)(TinyLife.Utilities.AppliedMigrations)
  name.vb: JsonCopy(Of AppliedMigrations)(AppliedMigrations)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Utilities.AppliedMigrations)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Utilities.AppliedMigrations
    name: AppliedMigrations
    href: TinyLife.Utilities.AppliedMigrations.html
  - name: '>'
  - name: (
  - uid: TinyLife.Utilities.AppliedMigrations
    name: AppliedMigrations
    href: TinyLife.Utilities.AppliedMigrations.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Utilities.AppliedMigrations)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Utilities.AppliedMigrations
    name: AppliedMigrations
    href: TinyLife.Utilities.AppliedMigrations.html
  - name: )
  - name: (
  - uid: TinyLife.Utilities.AppliedMigrations
    name: AppliedMigrations
    href: TinyLife.Utilities.AppliedMigrations.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.AppliedMigrations
  commentId: T:TinyLife.Utilities.AppliedMigrations
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.AppliedMigrations.html
  name: AppliedMigrations
  nameWithType: AppliedMigrations
  fullName: TinyLife.Utilities.AppliedMigrations
- uid: TinyLife.Utilities.Migration.Silent
  commentId: P:TinyLife.Utilities.Migration.Silent
  parent: TinyLife.Utilities.Migration
  href: TinyLife.Utilities.Migration.html#TinyLife_Utilities_Migration_Silent
  name: Silent
  nameWithType: Migration.Silent
  fullName: TinyLife.Utilities.Migration.Silent
- uid: TinyLife.Utilities.MigrationResult.Failure
  commentId: F:TinyLife.Utilities.MigrationResult.Failure
  href: TinyLife.Utilities.MigrationResult.html#TinyLife_Utilities_MigrationResult_Failure
  name: Failure
  nameWithType: MigrationResult.Failure
  fullName: TinyLife.Utilities.MigrationResult.Failure
- uid: TinyLife.Utilities.MigrationPhase.Single
  commentId: F:TinyLife.Utilities.MigrationPhase.Single
  href: TinyLife.Utilities.MigrationPhase.html#TinyLife_Utilities_MigrationPhase_Single
  name: Single
  nameWithType: MigrationPhase.Single
  fullName: TinyLife.Utilities.MigrationPhase.Single
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: TinyLife.Utilities.AppliedMigrations.Migrate*
  commentId: Overload:TinyLife.Utilities.AppliedMigrations.Migrate
  href: TinyLife.Utilities.AppliedMigrations.html#TinyLife_Utilities_AppliedMigrations_Migrate__1_System_Collections_Generic_ICollection_TinyLife_Utilities_Migration___0_____0_TinyLife_Utilities_MigrationPhase_System_Collections_Generic_Dictionary_System_String_Newtonsoft_Json_Linq_JToken___
  name: Migrate
  nameWithType: AppliedMigrations.Migrate
  fullName: TinyLife.Utilities.AppliedMigrations.Migrate
- uid: System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{{T}}}
  commentId: T:System.Collections.Generic.ICollection{TinyLife.Utilities.Migration{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<Migration<T>>
  nameWithType: ICollection<Migration<T>>
  fullName: System.Collections.Generic.ICollection<TinyLife.Utilities.Migration<T>>
  nameWithType.vb: ICollection(Of Migration(Of T))
  fullName.vb: System.Collections.Generic.ICollection(Of TinyLife.Utilities.Migration(Of T))
  name.vb: ICollection(Of Migration(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Utilities.MigrationPhase
  commentId: T:TinyLife.Utilities.MigrationPhase
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.MigrationPhase.html
  name: MigrationPhase
  nameWithType: MigrationPhase
  fullName: TinyLife.Utilities.MigrationPhase
- uid: System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JToken}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JToken}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, JToken>
  nameWithType: Dictionary<string, JToken>
  fullName: System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>
  nameWithType.vb: Dictionary(Of String, JToken)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, Newtonsoft.Json.Linq.JToken)
  name.vb: Dictionary(Of String, JToken)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Newtonsoft.Json.Linq.JToken
    name: JToken
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Newtonsoft.Json.Linq.JToken
    name: JToken
    isExternal: true
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: TinyLife.Utilities.AppliedMigrations.ApplyWithData*
  commentId: Overload:TinyLife.Utilities.AppliedMigrations.ApplyWithData
  href: TinyLife.Utilities.AppliedMigrations.html#TinyLife_Utilities_AppliedMigrations_ApplyWithData_System_Collections_Generic_HashSet_System_String___
  name: ApplyWithData
  nameWithType: AppliedMigrations.ApplyWithData
  fullName: TinyLife.Utilities.AppliedMigrations.ApplyWithData
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: T:System.Collections.Generic.HashSet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<string>
  nameWithType: HashSet<string>
  fullName: System.Collections.Generic.HashSet<string>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Migration.Migrations
  commentId: F:TinyLife.Utilities.Migration.Migrations
  parent: TinyLife.Utilities.Migration
  href: TinyLife.Utilities.Migration.html#TinyLife_Utilities_Migration_Migrations
  name: Migrations
  nameWithType: Migration.Migrations
  fullName: TinyLife.Utilities.Migration.Migrations
- uid: TinyLife.World.Map.AppliedMigrations
  commentId: F:TinyLife.World.Map.AppliedMigrations
  href: TinyLife.World.Map.html#TinyLife_World_Map_AppliedMigrations
  name: AppliedMigrations
  nameWithType: Map.AppliedMigrations
  fullName: TinyLife.World.Map.AppliedMigrations
- uid: TinyLife.World.ExportedLot.AppliedMigrations
  commentId: F:TinyLife.World.ExportedLot.AppliedMigrations
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_AppliedMigrations
  name: AppliedMigrations
  nameWithType: ExportedLot.AppliedMigrations
  fullName: TinyLife.World.ExportedLot.AppliedMigrations
- uid: TinyLife.World.ExportedHousehold.AppliedMigrations
  commentId: F:TinyLife.World.ExportedHousehold.AppliedMigrations
  href: TinyLife.World.ExportedHousehold.html#TinyLife_World_ExportedHousehold_AppliedMigrations
  name: AppliedMigrations
  nameWithType: ExportedHousehold.AppliedMigrations
  fullName: TinyLife.World.ExportedHousehold.AppliedMigrations
- uid: TinyLife.Utilities.AppliedMigrations.DoneNames*
  commentId: Overload:TinyLife.Utilities.AppliedMigrations.DoneNames
  href: TinyLife.Utilities.AppliedMigrations.html#TinyLife_Utilities_AppliedMigrations_DoneNames
  name: DoneNames
  nameWithType: AppliedMigrations.DoneNames
  fullName: TinyLife.Utilities.AppliedMigrations.DoneNames
