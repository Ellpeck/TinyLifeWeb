### YamlMime:ManagedReference
items:
- uid: TinyLife.World.ExportedLot
  commentId: T:TinyLife.World.ExportedLot
  id: ExportedLot
  parent: TinyLife.World
  children:
  - TinyLife.World.ExportedLot.AppliedMigrations
  - TinyLife.World.ExportedLot.Area
  - TinyLife.World.ExportedLot.ExportedVersion
  - TinyLife.World.ExportedLot.Furniture
  - TinyLife.World.ExportedLot.GetAllTiles
  - TinyLife.World.ExportedLot.GetCoveredArea
  - TinyLife.World.ExportedLot.GetMaxFloor
  - TinyLife.World.ExportedLot.GetPrice
  - TinyLife.World.ExportedLot.Migrations
  - TinyLife.World.ExportedLot.OtherFloorTiles
  - TinyLife.World.ExportedLot.Roofs
  - TinyLife.World.ExportedLot.Stairs
  - TinyLife.World.ExportedLot.Tiles
  - TinyLife.World.ExportedLot.Type
  - TinyLife.World.ExportedLot.ValidateForPreview(TinyLife.World.Map)
  - TinyLife.World.ExportedLot.WallLikes
  langs:
  - csharp
  - vb
  name: ExportedLot
  nameWithType: ExportedLot
  fullName: TinyLife.World.ExportedLot
  type: Class
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    An exported lot is all of the relevant data of a <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref> that should be exported to a file when clicking the "Export" button in the build menu.

    To create an exported lot from a lot, use <xref href="TinyLife.World.Lot.Export" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: >-
      [DataContract]

      public class ExportedLot
    content.vb: >-
      <DataContract>

      Public Class ExportedLot
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.ExportedLot.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.Migrations
  commentId: F:TinyLife.World.ExportedLot.Migrations
  id: Migrations
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Migrations
  nameWithType: ExportedLot.Migrations
  fullName: TinyLife.World.ExportedLot.Migrations
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: A set of migrations that are applied to <xref href="TinyLife.World.ExportedLot" data-throw-if-not-resolved="false"></xref> instances when they are loaded. Mods can add their own migrations to this list. Non-silent migrations, as well as <xref href="TinyLife.Utilities.MigrationPhase.Early" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Utilities.MigrationPhase.Late" data-throw-if-not-resolved="false"></xref> migration phases, are supported.
  example: []
  syntax:
    content: public static readonly List<Migration<ExportedLot>> Migrations
    return:
      type: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.ExportedLot}}
    content.vb: Public Shared ReadOnly Migrations As List(Of Migration(Of ExportedLot))
- uid: TinyLife.World.ExportedLot.ExportedVersion
  commentId: F:TinyLife.World.ExportedLot.ExportedVersion
  id: ExportedVersion
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: ExportedVersion
  nameWithType: ExportedLot.ExportedVersion
  fullName: TinyLife.World.ExportedLot.ExportedVersion
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The game version that this lot was exported with
  example: []
  syntax:
    content: >-
      [DataMember]

      public string ExportedVersion
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public ExportedVersion As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.Area
  commentId: F:TinyLife.World.ExportedLot.Area
  id: Area
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: ExportedLot.Area
  fullName: TinyLife.World.ExportedLot.Area
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The area that this lot covers in the world
  example: []
  syntax:
    content: >-
      [DataMember]

      public Rectangle Area
    return:
      type: Microsoft.Xna.Framework.Rectangle
    content.vb: >-
      <DataMember>

      Public Area As Rectangle
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.Type
  commentId: F:TinyLife.World.ExportedLot.Type
  id: Type
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ExportedLot.Type
  fullName: TinyLife.World.ExportedLot.Type
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: This lot's <xref href="TinyLife.World.LotType" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: >-
      [DataMember]

      public LotType Type
    return:
      type: TinyLife.World.LotType
    content.vb: >-
      <DataMember>

      Public Type As LotType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.Furniture
  commentId: F:TinyLife.World.ExportedLot.Furniture
  id: Furniture
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Furniture
  nameWithType: ExportedLot.Furniture
  fullName: TinyLife.World.ExportedLot.Furniture
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The <xref href="TinyLife.World.ExportedLot.Furniture" data-throw-if-not-resolved="false"></xref> that is present on this lot
  example: []
  syntax:
    content: >-
      [DataMember]

      public List<Furniture> Furniture
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.Furniture}
    content.vb: >-
      <DataMember>

      Public Furniture As List(Of Furniture)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.WallLikes
  commentId: F:TinyLife.World.ExportedLot.WallLikes
  id: WallLikes
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: WallLikes
  nameWithType: ExportedLot.WallLikes
  fullName: TinyLife.World.ExportedLot.WallLikes
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The walls that are present on this lot.
  example: []
  syntax:
    content: >-
      [DataMember]

      public List<WallLike> WallLikes
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.WallLike}
    content.vb: >-
      <DataMember>

      Public WallLikes As List(Of WallLike)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.Roofs
  commentId: F:TinyLife.World.ExportedLot.Roofs
  id: Roofs
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Roofs
  nameWithType: ExportedLot.Roofs
  fullName: TinyLife.World.ExportedLot.Roofs
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The roofs that are present on this lot
  example: []
  syntax:
    content: >-
      [DataMember]

      public List<Roof> Roofs
    return:
      type: System.Collections.Generic.List{TinyLife.World.Roof}
    content.vb: >-
      <DataMember>

      Public Roofs As List(Of Roof)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.Stairs
  commentId: F:TinyLife.World.ExportedLot.Stairs
  id: Stairs
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Stairs
  nameWithType: ExportedLot.Stairs
  fullName: TinyLife.World.ExportedLot.Stairs
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The stairs that are present on this lot.
  example: []
  syntax:
    content: >-
      [DataMember]

      public List<Stairs> Stairs
    return:
      type: System.Collections.Generic.List{TinyLife.World.Stairs}
    content.vb: >-
      <DataMember>

      Public Stairs As List(Of Stairs)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.Tiles
  commentId: F:TinyLife.World.ExportedLot.Tiles
  id: Tiles
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Tiles
  nameWithType: ExportedLot.Tiles
  fullName: TinyLife.World.ExportedLot.Tiles
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The ground tiles of this lot
  example: []
  syntax:
    content: >-
      [DataMember]

      public Tile[,] Tiles
    return:
      type: TinyLife.World.Tile[,]
    content.vb: >-
      <DataMember>

      Public Tiles As Tile(,)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.OtherFloorTiles
  commentId: F:TinyLife.World.ExportedLot.OtherFloorTiles
  id: OtherFloorTiles
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: OtherFloorTiles
  nameWithType: ExportedLot.OtherFloorTiles
  fullName: TinyLife.World.ExportedLot.OtherFloorTiles
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: A set of tiles on additional floors beside the ground floor. Note that array entries may contain <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> tiles.
  example: []
  syntax:
    content: >-
      [DataMember]

      public Dictionary<int, Tile[,]> OtherFloorTiles
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,TinyLife.World.Tile[0:,0:]}
    content.vb: >-
      <DataMember>

      Public OtherFloorTiles As Dictionary(Of Integer, Tile(,))
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.ExportedLot.AppliedMigrations
  commentId: F:TinyLife.World.ExportedLot.AppliedMigrations
  id: AppliedMigrations
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: AppliedMigrations
  nameWithType: ExportedLot.AppliedMigrations
  fullName: TinyLife.World.ExportedLot.AppliedMigrations
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    The set of names of the <xref href="TinyLife.Utilities.Migration" data-throw-if-not-resolved="false"></xref> instances that have already been applied to objects in this exported lot.

    When a new exported lot is created, this collection is initialized with all migrations that exist, as new objects are expected to not need migration.
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)]

      public HashSet<string> AppliedMigrations
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.IgnoreAndPopulate)>

      Public AppliedMigrations As HashSet(Of String)
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 3
- uid: TinyLife.World.ExportedLot.GetPrice
  commentId: M:TinyLife.World.ExportedLot.GetPrice
  id: GetPrice
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: ExportedLot.GetPrice()
  fullName: TinyLife.World.ExportedLot.GetPrice()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns this exported lot's current price, including the prices of all <xref href="TinyLife.World.ExportedLot.Furniture" data-throw-if-not-resolved="false"></xref> objects, <xref href="TinyLife.World.ExportedLot.WallLikes" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.World.ExportedLot.Roofs" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.ExportedLot.Tiles" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: This exported lot's total price.
    content.vb: Public Function GetPrice() As Single
  overload: TinyLife.World.ExportedLot.GetPrice*
- uid: TinyLife.World.ExportedLot.GetCoveredArea
  commentId: M:TinyLife.World.ExportedLot.GetCoveredArea
  id: GetCoveredArea
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: GetCoveredArea()
  nameWithType: ExportedLot.GetCoveredArea()
  fullName: TinyLife.World.ExportedLot.GetCoveredArea()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Returns a <xref href="MLEM.Maths.RectangleF" data-throw-if-not-resolved="false"></xref> that represents the area that this lot actually covers.

    The area covered by this lot is always bounded by its <xref href="TinyLife.World.ExportedLot.Area" data-throw-if-not-resolved="false"></xref>, but will be smaller if there are fewer objects on the lot.
  example: []
  syntax:
    content: public RectangleF GetCoveredArea()
    return:
      type: MLEM.Maths.RectangleF
      description: The area that this lot covers
    content.vb: Public Function GetCoveredArea() As RectangleF
  overload: TinyLife.World.ExportedLot.GetCoveredArea*
- uid: TinyLife.World.ExportedLot.GetMaxFloor
  commentId: M:TinyLife.World.ExportedLot.GetMaxFloor
  id: GetMaxFloor
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: GetMaxFloor()
  nameWithType: ExportedLot.GetMaxFloor()
  fullName: TinyLife.World.ExportedLot.GetMaxFloor()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns the maximum floor that this lot occupies.
  example: []
  syntax:
    content: public int GetMaxFloor()
    return:
      type: System.Int32
      description: The maximum floor that this lot occupies.
    content.vb: Public Function GetMaxFloor() As Integer
  overload: TinyLife.World.ExportedLot.GetMaxFloor*
- uid: TinyLife.World.ExportedLot.GetAllTiles
  commentId: M:TinyLife.World.ExportedLot.GetAllTiles
  id: GetAllTiles
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: GetAllTiles()
  nameWithType: ExportedLot.GetAllTiles()
  fullName: TinyLife.World.ExportedLot.GetAllTiles()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns a collection of all of the tiles that are present on this lot, including the ground floor and all other floors.
  example: []
  syntax:
    content: public List<(Point Pos, int Floor, Tile Tile)> GetAllTiles()
    return:
      type: System.Collections.Generic.List{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
      description: All tiles that are present on this lot.
    content.vb: Public Function GetAllTiles() As List(Of (Pos As Point, Floor As Integer, Tile As Tile))
  overload: TinyLife.World.ExportedLot.GetAllTiles*
- uid: TinyLife.World.ExportedLot.ValidateForPreview(TinyLife.World.Map)
  commentId: M:TinyLife.World.ExportedLot.ValidateForPreview(TinyLife.World.Map)
  id: ValidateForPreview(TinyLife.World.Map)
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: ValidateForPreview(Map)
  nameWithType: ExportedLot.ValidateForPreview(Map)
  fullName: TinyLife.World.ExportedLot.ValidateForPreview(TinyLife.World.Map)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Validates this exported lot's content for preview purposes, for example for use with the <xref href="TinyLife.Uis.Menus.CreateLotPreview(TinyLife.World.Map%2cSystem.String%2cMicrosoft.Xna.Framework.Point%2cSystem.Single%2cMicrosoft.Xna.Framework.Color%2cSystem.Boolean%2cSystem.Nullable%7bSystem.Int32%7d)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public void ValidateForPreview(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to validate this exported lot for.
    content.vb: Public Sub ValidateForPreview(map As Map)
  overload: TinyLife.World.ExportedLot.ValidateForPreview*
references:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  href: TinyLife.World.Lot.html
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Lot.Export
  commentId: M:TinyLife.World.Lot.Export
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Export
  name: Export()
  nameWithType: Lot.Export()
  fullName: TinyLife.World.Lot.Export()
  spec.csharp:
  - uid: TinyLife.World.Lot.Export
    name: Export
    href: TinyLife.World.Lot.html#TinyLife_World_Lot_Export
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.World.Lot.Export
    name: Export
    href: TinyLife.World.Lot.html#TinyLife_World_Lot_Export
  - name: (
  - name: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.ExportedLot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<ExportedLot>(ExportedLot)
  nameWithType: Extensions.JsonCopy<ExportedLot>(ExportedLot)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.ExportedLot>(TinyLife.World.ExportedLot)
  nameWithType.vb: Extensions.JsonCopy(Of ExportedLot)(ExportedLot)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.ExportedLot)(TinyLife.World.ExportedLot)
  name.vb: JsonCopy(Of ExportedLot)(ExportedLot)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.ExportedLot)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.ExportedLot)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: )
  - name: (
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.World.ExportedLot
  commentId: T:TinyLife.World.ExportedLot
  parent: TinyLife.World
  href: TinyLife.World.ExportedLot.html
  name: ExportedLot
  nameWithType: ExportedLot
  fullName: TinyLife.World.ExportedLot
- uid: TinyLife.Utilities.MigrationPhase.Early
  commentId: F:TinyLife.Utilities.MigrationPhase.Early
  href: TinyLife.Utilities.MigrationPhase.html#TinyLife_Utilities_MigrationPhase_Early
  name: Early
  nameWithType: MigrationPhase.Early
  fullName: TinyLife.Utilities.MigrationPhase.Early
- uid: TinyLife.Utilities.MigrationPhase.Late
  commentId: F:TinyLife.Utilities.MigrationPhase.Late
  href: TinyLife.Utilities.MigrationPhase.html#TinyLife_Utilities_MigrationPhase_Late
  name: Late
  nameWithType: MigrationPhase.Late
  fullName: TinyLife.Utilities.MigrationPhase.Late
- uid: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.ExportedLot}}
  commentId: T:System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.ExportedLot}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Migration<ExportedLot>>
  nameWithType: List<Migration<ExportedLot>>
  fullName: System.Collections.Generic.List<TinyLife.Utilities.Migration<TinyLife.World.ExportedLot>>
  nameWithType.vb: List(Of Migration(Of ExportedLot))
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Utilities.Migration(Of TinyLife.World.ExportedLot))
  name.vb: List(Of Migration(Of ExportedLot))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: <
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
    href: TinyLife.World.ExportedLot.html
  - name: )
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  href: TinyLife.World.LotType.html
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: TinyLife.World.ExportedLot.Furniture
  commentId: F:TinyLife.World.ExportedLot.Furniture
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_Furniture
  name: Furniture
  nameWithType: ExportedLot.Furniture
  fullName: TinyLife.World.ExportedLot.Furniture
- uid: System.Collections.Generic.List{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Furniture>
  nameWithType: List<Furniture>
  fullName: System.Collections.Generic.List<TinyLife.Objects.Furniture>
  nameWithType.vb: List(Of Furniture)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.Furniture)
  name.vb: List(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: )
- uid: System.Collections.Generic.List{TinyLife.Objects.WallLike}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.WallLike}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<WallLike>
  nameWithType: List<WallLike>
  fullName: System.Collections.Generic.List<TinyLife.Objects.WallLike>
  nameWithType.vb: List(Of WallLike)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.WallLike)
  name.vb: List(Of WallLike)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: )
- uid: System.Collections.Generic.List{TinyLife.World.Roof}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Roof}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Roof>
  nameWithType: List<Roof>
  fullName: System.Collections.Generic.List<TinyLife.World.Roof>
  nameWithType.vb: List(Of Roof)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Roof)
  name.vb: List(Of Roof)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.World.Roof
    name: Roof
    href: TinyLife.World.Roof.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Roof
    name: Roof
    href: TinyLife.World.Roof.html
  - name: )
- uid: System.Collections.Generic.List{TinyLife.World.Stairs}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Stairs}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Stairs>
  nameWithType: List<Stairs>
  fullName: System.Collections.Generic.List<TinyLife.World.Stairs>
  nameWithType.vb: List(Of Stairs)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Stairs)
  name.vb: List(Of Stairs)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.World.Stairs
    name: Stairs
    href: TinyLife.World.Stairs.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Stairs
    name: Stairs
    href: TinyLife.World.Stairs.html
  - name: )
- uid: TinyLife.World.Tile[,]
  isExternal: true
  href: TinyLife.World.Tile.html
  name: Tile[,]
  nameWithType: Tile[,]
  fullName: TinyLife.World.Tile[,]
  nameWithType.vb: Tile(,)
  fullName.vb: TinyLife.World.Tile(,)
  name.vb: Tile(,)
  spec.csharp:
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: '['
  - name: ','
  - name: ']'
  spec.vb:
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: (
  - name: ','
  - name: )
- uid: System.Collections.Generic.Dictionary{System.Int32,TinyLife.World.Tile[0:,0:]}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,TinyLife.World.Tile[0:,0:]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, Tile[,]>
  nameWithType: Dictionary<int, Tile[,]>
  fullName: System.Collections.Generic.Dictionary<int, TinyLife.World.Tile[,]>
  nameWithType.vb: Dictionary(Of Integer, Tile(,))
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, TinyLife.World.Tile(,))
  name.vb: Dictionary(Of Integer, Tile(,))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: '['
  - name: ','
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: (
  - name: ','
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: TinyLife.Utilities.Migration
  commentId: T:TinyLife.Utilities.Migration
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Migration.html
  name: Migration
  nameWithType: Migration
  fullName: TinyLife.Utilities.Migration
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: T:System.Collections.Generic.HashSet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<string>
  nameWithType: HashSet<string>
  fullName: System.Collections.Generic.HashSet<string>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.ExportedLot.WallLikes
  commentId: F:TinyLife.World.ExportedLot.WallLikes
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_WallLikes
  name: WallLikes
  nameWithType: ExportedLot.WallLikes
  fullName: TinyLife.World.ExportedLot.WallLikes
- uid: TinyLife.World.ExportedLot.Roofs
  commentId: F:TinyLife.World.ExportedLot.Roofs
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_Roofs
  name: Roofs
  nameWithType: ExportedLot.Roofs
  fullName: TinyLife.World.ExportedLot.Roofs
- uid: TinyLife.World.ExportedLot.Tiles
  commentId: F:TinyLife.World.ExportedLot.Tiles
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_Tiles
  name: Tiles
  nameWithType: ExportedLot.Tiles
  fullName: TinyLife.World.ExportedLot.Tiles
- uid: TinyLife.World.ExportedLot.GetPrice*
  commentId: Overload:TinyLife.World.ExportedLot.GetPrice
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_GetPrice
  name: GetPrice
  nameWithType: ExportedLot.GetPrice
  fullName: TinyLife.World.ExportedLot.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: MLEM.Maths.RectangleF
  commentId: T:MLEM.Maths.RectangleF
  parent: MLEM.Maths
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Maths.RectangleF
- uid: TinyLife.World.ExportedLot.Area
  commentId: F:TinyLife.World.ExportedLot.Area
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_Area
  name: Area
  nameWithType: ExportedLot.Area
  fullName: TinyLife.World.ExportedLot.Area
- uid: TinyLife.World.ExportedLot.GetCoveredArea*
  commentId: Overload:TinyLife.World.ExportedLot.GetCoveredArea
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_GetCoveredArea
  name: GetCoveredArea
  nameWithType: ExportedLot.GetCoveredArea
  fullName: TinyLife.World.ExportedLot.GetCoveredArea
- uid: MLEM.Maths
  commentId: N:MLEM.Maths
  isExternal: true
  name: MLEM.Maths
  nameWithType: MLEM.Maths
  fullName: MLEM.Maths
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
- uid: TinyLife.World.ExportedLot.GetMaxFloor*
  commentId: Overload:TinyLife.World.ExportedLot.GetMaxFloor
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_GetMaxFloor
  name: GetMaxFloor
  nameWithType: ExportedLot.GetMaxFloor
  fullName: TinyLife.World.ExportedLot.GetMaxFloor
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.World.ExportedLot.GetAllTiles*
  commentId: Overload:TinyLife.World.ExportedLot.GetAllTiles
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_GetAllTiles
  name: GetAllTiles
  nameWithType: ExportedLot.GetAllTiles
  fullName: TinyLife.World.ExportedLot.GetAllTiles
- uid: System.Collections.Generic.List{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
  commentId: T:System.Collections.Generic.List{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<(Point Pos, int Floor, Tile Tile)>
  nameWithType: List<(Point Pos, int Floor, Tile Tile)>
  fullName: System.Collections.Generic.List<(Microsoft.Xna.Framework.Point Pos, int Floor, TinyLife.World.Tile Tile)>
  nameWithType.vb: List(Of (Pos As Point, Floor As Integer, Tile As Tile))
  fullName.vb: System.Collections.Generic.List(Of (Pos As Microsoft.Xna.Framework.Point, Floor As Integer, Tile As TinyLife.World.Tile))
  name.vb: List(Of (Pos As Point, Floor As Integer, Tile As Tile))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Pos
    name: Pos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.pos
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Floor
    name: Floor
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.floor
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Tile
    name: Tile
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.tile
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Pos
    name: Pos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.pos
  - name: " "
  - name: As
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Floor
    name: Floor
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.floor
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Tile
    name: Tile
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.tile
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: )
  - name: )
- uid: TinyLife.Uis.Menus.CreateLotPreview(TinyLife.World.Map,System.String,Microsoft.Xna.Framework.Point,System.Single,Microsoft.Xna.Framework.Color,System.Boolean,System.Nullable{System.Int32})
  commentId: M:TinyLife.Uis.Menus.CreateLotPreview(TinyLife.World.Map,System.String,Microsoft.Xna.Framework.Point,System.Single,Microsoft.Xna.Framework.Color,System.Boolean,System.Nullable{System.Int32})
  isExternal: true
  href: TinyLife.Uis.Menus.html#TinyLife_Uis_Menus_CreateLotPreview_TinyLife_World_Map_System_String_Microsoft_Xna_Framework_Point_System_Single_Microsoft_Xna_Framework_Color_System_Boolean_System_Nullable_System_Int32__
  name: CreateLotPreview(Map, string, Point, float, Color, bool, int?)
  nameWithType: Menus.CreateLotPreview(Map, string, Point, float, Color, bool, int?)
  fullName: TinyLife.Uis.Menus.CreateLotPreview(TinyLife.World.Map, string, Microsoft.Xna.Framework.Point, float, Microsoft.Xna.Framework.Color, bool, int?)
  nameWithType.vb: Menus.CreateLotPreview(Map, String, Point, Single, Color, Boolean, Integer?)
  fullName.vb: TinyLife.Uis.Menus.CreateLotPreview(TinyLife.World.Map, String, Microsoft.Xna.Framework.Point, Single, Microsoft.Xna.Framework.Color, Boolean, Integer?)
  name.vb: CreateLotPreview(Map, String, Point, Single, Color, Boolean, Integer?)
  spec.csharp:
  - uid: TinyLife.Uis.Menus.CreateLotPreview(TinyLife.World.Map,System.String,Microsoft.Xna.Framework.Point,System.Single,Microsoft.Xna.Framework.Color,System.Boolean,System.Nullable{System.Int32})
    name: CreateLotPreview
    href: TinyLife.Uis.Menus.html#TinyLife_Uis_Menus_CreateLotPreview_TinyLife_World_Map_System_String_Microsoft_Xna_Framework_Point_System_Single_Microsoft_Xna_Framework_Color_System_Boolean_System_Nullable_System_Int32__
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.Uis.Menus.CreateLotPreview(TinyLife.World.Map,System.String,Microsoft.Xna.Framework.Point,System.Single,Microsoft.Xna.Framework.Color,System.Boolean,System.Nullable{System.Int32})
    name: CreateLotPreview
    href: TinyLife.Uis.Menus.html#TinyLife_Uis_Menus_CreateLotPreview_TinyLife_World_Map_System_String_Microsoft_Xna_Framework_Point_System_Single_Microsoft_Xna_Framework_Color_System_Boolean_System_Nullable_System_Int32__
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: )
- uid: TinyLife.World.ExportedLot.ValidateForPreview*
  commentId: Overload:TinyLife.World.ExportedLot.ValidateForPreview
  href: TinyLife.World.ExportedLot.html#TinyLife_World_ExportedLot_ValidateForPreview_TinyLife_World_Map_
  name: ValidateForPreview
  nameWithType: ExportedLot.ValidateForPreview
  fullName: TinyLife.World.ExportedLot.ValidateForPreview
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
