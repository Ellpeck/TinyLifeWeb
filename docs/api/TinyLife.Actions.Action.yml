### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  id: Action
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType)
  - TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
  - TinyLife.Actions.Action.CanStartNow
  - TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  - TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType,TinyLife.Objects.PersonLike)
  - TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  - TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  - TinyLife.Actions.Action.ElapsedTime
  - TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.Furniture,System.Boolean})
  - TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.PersonLike,System.Boolean})
  - TinyLife.Actions.Action.FindAllFreeWalls``1(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FullyInProgress
  - TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  - TinyLife.Actions.Action.GetChildren(System.Boolean)
  - TinyLife.Actions.Action.GetDisplayName
  - TinyLife.Actions.Action.GetExtraIcon
  - TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture)
  - TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture,System.Func{MLEM.Maths.Direction2,System.Boolean})
  - TinyLife.Actions.Action.GetIconObject
  - TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Action.GetProgress
  - TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan,System.TimeSpan)
  - TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.PersonLike)
  - TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.Id
  - TinyLife.Actions.Action.InProgressTime
  - TinyLife.Actions.Action.Info
  - TinyLife.Actions.Action.Initialize
  - TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike,System.Action{TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike})
  - TinyLife.Actions.Action.IsCompleted
  - TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot,TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  - TinyLife.Actions.Action.Migrations
  - TinyLife.Actions.Action.OnActionTypeConstructed
  - TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  - TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  - TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel},MLEM.Textures.TextureRegion,System.Single)
  - TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,System.Boolean,System.Nullable{System.Int32},MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  - TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  - TinyLife.Actions.Action.Parent
  - TinyLife.Actions.Action.Person
  - TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Nullable{System.Int32})
  - TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{System.Int32})
  - TinyLife.Actions.Action.PlayerPromptOpen
  - TinyLife.Actions.Action.Random
  - TinyLife.Actions.Action.ResetSpeech
  - TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  - TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike,Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteChoices},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType},System.Nullable{TinyLife.Actions.EmoteBubbleType})
  - TinyLife.Actions.Action.StartedAutomatically
  - TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteChoices,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  - TinyLife.Actions.Action.Type
  - TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.Action.Validate(TinyLife.Objects.PersonLike,TinyLife.Utilities.AppliedMigrations)
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    An action is something that a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> does.

    An action is always derived from an underlying <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref> that contains various action settings.

    Actions can be queued up for a person (<xref href="TinyLife.Objects.PersonLike.ActionQueue" data-throw-if-not-resolved="false"></xref>) or currently active (<xref href="TinyLife.Objects.PersonLike.CurrentActions" data-throw-if-not-resolved="false"></xref>).

    To create a more complex action, it is best to extend <xref href="TinyLife.Actions.MultiAction" data-throw-if-not-resolved="false"></xref>.

    You can find a multitude of action-related events in <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>, like <xref href="TinyLife.Objects.PersonLike.OnActionsCompleted" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [DataContract]

      public abstract class Action : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public MustInherit Class Action Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  derivedClasses:
  - TinyLife.Actions.ChangeOutfitIntentionAction
  - TinyLife.Actions.CleanEverythingAction
  - TinyLife.Actions.DebugAction
  - TinyLife.Actions.DeferredAction
  - TinyLife.Actions.DieAction
  - TinyLife.Actions.MultiAction
  - TinyLife.Actions.PathfindAction
  - TinyLife.Actions.PathfindToPersonAction
  - TinyLife.Actions.SocialAction.StartPartnerAction
  - TinyLife.Actions.TakeOffClothesAction
  - TinyLife.Actions.TellPeopleToLeaveRoomAction
  - TinyLife.Actions.TryMultipleAction
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Action.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.Random
  commentId: F:TinyLife.Actions.Action.Random
  id: Random
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: Action.Random
  fullName: TinyLife.Actions.Action.Random
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A <xref href="TinyLife.Actions.Action.Random" data-throw-if-not-resolved="false"></xref> instance that can be used by actions.

    This value has the default seed.
  example: []
  syntax:
    content: public static readonly Random Random
    return:
      type: System.Random
    content.vb: Public Shared ReadOnly Random As Random
- uid: TinyLife.Actions.Action.Migrations
  commentId: F:TinyLife.Actions.Action.Migrations
  id: Migrations
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Migrations
  nameWithType: Action.Migrations
  fullName: TinyLife.Actions.Action.Migrations
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The global set of action migrations, which will be applied to every loaded <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref>.

    To register migrations for specific action types only, use <xref href="TinyLife.Actions.ActionType.TypeSettings.Migrations" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly List<Migration<Action>> Migrations
    return:
      type: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.Actions.Action}}
    content.vb: Public Shared ReadOnly Migrations As List(Of Migration(Of Action))
- uid: TinyLife.Actions.Action.OnActionTypeConstructed
  commentId: E:TinyLife.Actions.Action.OnActionTypeConstructed
  id: OnActionTypeConstructed
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OnActionTypeConstructed
  nameWithType: Action.OnActionTypeConstructed
  fullName: TinyLife.Actions.Action.OnActionTypeConstructed
  type: Event
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    An event that is invoked when an <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref> instance is constructed using the private constructor invoked in <xref href="TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)" data-throw-if-not-resolved="false"></xref>.

    This event can be used to modify the <xref href="TinyLife.Actions.ActionType.TypeSettings" data-throw-if-not-resolved="false"></xref> of the Action type before they are made readonly.
  example: []
  syntax:
    content: public static event Action.ActionTypeConstructedDelegate OnActionTypeConstructed
    return:
      type: TinyLife.Actions.Action.ActionTypeConstructedDelegate
    content.vb: Public Shared Event OnActionTypeConstructed As Action.ActionTypeConstructedDelegate
- uid: TinyLife.Actions.Action.InProgressTime
  commentId: P:TinyLife.Actions.Action.InProgressTime
  id: InProgressTime
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: InProgressTime
  nameWithType: Action.InProgressTime
  fullName: TinyLife.Actions.Action.InProgressTime
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Represents the amount of time that this action has "properly" been in progress for.

    This is used by <xref href="TinyLife.Actions.MultiAction" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Actions.SocialAction" data-throw-if-not-resolved="false"></xref> and returns a time greater than <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref> only once the first actions are completed or the conversation has started, respectively.

    By default, <xref href="TinyLife.Actions.Action.ElapsedTime" data-throw-if-not-resolved="false"></xref> is returned.
  example: []
  syntax:
    content: public virtual TimeSpan InProgressTime { get; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The amount of time that this action has properly been in progress for
    content.vb: Public Overridable ReadOnly Property InProgressTime As TimeSpan
  overload: TinyLife.Actions.Action.InProgressTime*
- uid: TinyLife.Actions.Action.FullyInProgress
  commentId: P:TinyLife.Actions.Action.FullyInProgress
  id: FullyInProgress
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FullyInProgress
  nameWithType: Action.FullyInProgress
  fullName: TinyLife.Actions.Action.FullyInProgress
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns whether this action is currently "properly" in progress.

    This is used by <xref href="TinyLife.Actions.MultiAction" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Actions.SocialAction" data-throw-if-not-resolved="false"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.

    By default, this property always returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, since regular actions immediately start their main part.
  example: []
  syntax:
    content: public virtual bool FullyInProgress { get; }
    parameters: []
    return:
      type: System.Boolean
      description: Whether this action is fully in progress
    content.vb: Public Overridable ReadOnly Property FullyInProgress As Boolean
  overload: TinyLife.Actions.Action.FullyInProgress*
- uid: TinyLife.Actions.Action.Type
  commentId: F:TinyLife.Actions.Action.Type
  id: Type
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Action.Type
  fullName: TinyLife.Actions.Action.Type
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref> that this action instance derives from
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly ActionType Type
    return:
      type: TinyLife.Actions.ActionType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As ActionType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.Info
  commentId: F:TinyLife.Actions.Action.Info
  id: Info
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Info
  nameWithType: Action.Info
  fullName: TinyLife.Actions.Action.Info
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> for this action that contains the clicked (or otherwise targeted) objects and more
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly ActionInfo Info
    return:
      type: TinyLife.Actions.ActionInfo
    content.vb: >-
      <DataMember>

      Public ReadOnly Info As ActionInfo
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.Id
  commentId: F:TinyLife.Actions.Action.Id
  id: Id
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Action.Id
  fullName: TinyLife.Actions.Action.Id
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    This action's unique id, which was randomly generated using <xref href="System.Guid.NewGuid" data-throw-if-not-resolved="false"></xref> when this action was constructed.

    An action's unique id can be used to reference this action in other places, and child actions can be retrieved using <xref href="TinyLife.Actions.Action.GetChildren(System.Boolean)" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Actions.Action.GetChild%60%601(System.Guid%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> or through a <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> using <xref href="TinyLife.Objects.PersonLike.GetAction%60%601(System.Guid%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Guid Id
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public ReadOnly Id As Guid
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  id: StartedAutomatically
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: If this value is true, this action was started using <xref href="TinyLife.Objects.PersonAi" data-throw-if-not-resolved="false"></xref> or through another action rather than by the player
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool StartedAutomatically { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property StartedAutomatically As Boolean
  overload: TinyLife.Actions.Action.StartedAutomatically*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.Parent
  commentId: P:TinyLife.Actions.Action.Parent
  id: Parent
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref> that created or otherwise owns this action, which also means this action will be part of the parent's <xref href="TinyLife.Actions.Action.GetChildren(System.Boolean)" data-throw-if-not-resolved="false"></xref>.

    This is nonnull if this action is part of a <xref href="TinyLife.Actions.Handlers.UnderlyingActionHandler" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Actions.Handlers.MultiActionHandler" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Action Parent { get; }
    parameters: []
    return:
      type: TinyLife.Actions.Action
    content.vb: Public Property Parent As Action
  overload: TinyLife.Actions.Action.Parent*
- uid: TinyLife.Actions.Action.Person
  commentId: P:TinyLife.Actions.Action.Person
  id: Person
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> that this action is being executed by
  example: []
  syntax:
    content: public PersonLike Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.PersonLike
    content.vb: Public ReadOnly Property Person As PersonLike
  overload: TinyLife.Actions.Action.Person*
- uid: TinyLife.Actions.Action.ElapsedTime
  commentId: P:TinyLife.Actions.Action.ElapsedTime
  id: ElapsedTime
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The amount of in-game time that has elapsed since this action has started
  example: []
  syntax:
    content: >-
      [DataMember]

      public TimeSpan ElapsedTime { get; protected set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public Property ElapsedTime As TimeSpan
  overload: TinyLife.Actions.Action.ElapsedTime*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Action.PlayerPromptOpen
  id: PlayerPromptOpen
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A property that stores whether a player prompt is currently open. A prompt can be opened using <xref href="TinyLife.Actions.Action.OpenPlayerPrompt(System.String%2cSystem.Predicate%7bMLEM.Ui.Elements.Panel%7d%2cSystem.Action%7bMLEM.Ui.Elements.Panel%7d%2cSystem.Boolean%2cSystem.Action%7bTinyLife.Uis.CoveringGroup%2cMLEM.Ui.Elements.Panel%7d%2cMLEM.Textures.TextureRegion%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>.

    This property can be used to ensure that an action is not paused or canceled while a player prompt is open, as, based on the implementation of the action, there might be certain update frames that still occur while the prompt is open.
  example: []
  syntax:
    content: public bool PlayerPromptOpen { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property PlayerPromptOpen As Boolean
  overload: TinyLife.Actions.Action.PlayerPromptOpen*
- uid: TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Action(ActionInfo)
  nameWithType: Action.Action(ActionInfo)
  fullName: TinyLife.Actions.Action.Action(TinyLife.Actions.ActionInfo)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Creates a new typeless action with the given action information.
  example: []
  syntax:
    content: protected Action(ActionInfo info)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action.
    content.vb: Protected Sub New(info As ActionInfo)
  overload: TinyLife.Actions.Action.#ctor*
  nameWithType.vb: Action.New(ActionInfo)
  fullName.vb: TinyLife.Actions.Action.New(TinyLife.Actions.ActionInfo)
  name.vb: New(ActionInfo)
- uid: TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Action(ActionType, ActionInfo)
  nameWithType: Action.Action(ActionType, ActionInfo)
  fullName: TinyLife.Actions.Action.Action(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Creates a new action with the given action information.
  example: []
  syntax:
    content: protected Action(ActionType type, ActionInfo info)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type for this action.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action.
    content.vb: Protected Sub New(type As ActionType, info As ActionInfo)
  overload: TinyLife.Actions.Action.#ctor*
  nameWithType.vb: Action.New(ActionType, ActionInfo)
  fullName.vb: TinyLife.Actions.Action.New(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  name.vb: New(ActionType, ActionInfo)
- uid: TinyLife.Actions.Action.Initialize
  commentId: M:TinyLife.Actions.Action.Initialize
  id: Initialize
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: Action.Initialize()
  fullName: TinyLife.Actions.Action.Initialize()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    This method is called when the action is first started by a <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>.

    Note that it is not called when the action gets added to the <xref href="TinyLife.Objects.PersonLike.ActionQueue" data-throw-if-not-resolved="false"></xref>, but when it is moved to <xref href="TinyLife.Objects.PersonLike.CurrentActions" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual void Initialize()
    content.vb: Public Overridable Sub Initialize()
  overload: TinyLife.Actions.Action.Initialize*
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, float)
  nameWithType: Action.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    This method is called every update frame if this action is currently active.

    By default, only the <xref href="TinyLife.Actions.Action.ElapsedTime" data-throw-if-not-resolved="false"></xref> is modified in this method and <xref href="TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> is called.
  example: []
  syntax:
    content: public virtual void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Actions.Action.Update*
  nameWithType.vb: Action.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
- uid: TinyLife.Actions.Action.IsCompleted
  commentId: M:TinyLife.Actions.Action.IsCompleted
  id: IsCompleted
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: Action.IsCompleted()
  fullName: TinyLife.Actions.Action.IsCompleted()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    This method is called every update frame by a <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> if this action is currently active to check if it should be stopped.

    If this returns a result other than <xref href="TinyLife.Actions.CompletionType.Completed" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)" data-throw-if-not-resolved="false"></xref> will be called and the action is stopped.

    By default, only the default behavior of <xref href="TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)" data-throw-if-not-resolved="false"></xref> modifies the completion type, otherwise <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> is returned.
  example: []
  syntax:
    content: public virtual CompletionType IsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: The current completion type of this action
    content.vb: Public Overridable Function IsCompleted() As CompletionType
  overload: TinyLife.Actions.Action.IsCompleted*
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    This method is called when this action <xref href="TinyLife.Actions.Action.IsCompleted" data-throw-if-not-resolved="false"></xref>, or if it is canceled from an outside source.

    Note that, if this method is called as a result of <xref href="TinyLife.Actions.Action.IsCompleted" data-throw-if-not-resolved="false"></xref>, the <xref href="TinyLife.Actions.CompletionType" data-throw-if-not-resolved="false"></xref> passed will be the same.

    By default, only <xref href="TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> is called.
  example: []
  syntax:
    content: public virtual void OnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The type that this action completed with
    content.vb: Public Overridable Sub OnCompleted(type As CompletionType)
  overload: TinyLife.Actions.Action.OnCompleted*
- uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.PersonLike,TinyLife.Utilities.AppliedMigrations)
  commentId: M:TinyLife.Actions.Action.Validate(TinyLife.Objects.PersonLike,TinyLife.Utilities.AppliedMigrations)
  id: Validate(TinyLife.Objects.PersonLike,TinyLife.Utilities.AppliedMigrations)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Validate(PersonLike, AppliedMigrations)
  nameWithType: Action.Validate(PersonLike, AppliedMigrations)
  fullName: TinyLife.Actions.Action.Validate(TinyLife.Objects.PersonLike, TinyLife.Utilities.AppliedMigrations)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Validates this action's data.

    This is called when a map is loaded from disk.

    When returning false on this method, the action is removed from the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual bool Validate(PersonLike person, AppliedMigrations appliedMigrations)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that this action belongs to
    - id: appliedMigrations
      type: TinyLife.Utilities.AppliedMigrations
      description: The migrations that have been applied so far
    return:
      type: System.Boolean
      description: Whether or not the action is still valid (or if it has invalid data)
    content.vb: Public Overridable Function Validate(person As PersonLike, appliedMigrations As AppliedMigrations) As Boolean
  overload: TinyLife.Actions.Action.Validate*
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Return true on this method if this action can be multi-tasked along with the passed <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref>.

    To actually check this property, <xref href="TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action%2cTinyLife.Actions.Action)" data-throw-if-not-resolved="false"></xref> should be used as it compares both objects.

    A multi-tasking is an action that is currently active along with another action.

    By default, multi-tasking is disallowed for any action.
  example: []
  syntax:
    content: public virtual Action.CanMultitaskResult CanMultitask(Action other)
    parameters:
    - id: other
      type: TinyLife.Actions.Action
      description: The action to multi-task with
    return:
      type: TinyLife.Actions.Action.CanMultitaskResult
      description: Whether this action can be multi-tasked
    content.vb: Public Overridable Function CanMultitask(other As Action) As Action.CanMultitaskResult
  overload: TinyLife.Actions.Action.CanMultitask*
- uid: TinyLife.Actions.Action.CanStartNow
  commentId: M:TinyLife.Actions.Action.CanStartNow
  id: CanStartNow
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanStartNow()
  nameWithType: Action.CanStartNow()
  fullName: TinyLife.Actions.Action.CanStartNow()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Return <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> on this method if this action can be started right now. This method is queried when this action moves from a person's <xref href="TinyLife.Objects.PersonLike.ActionQueue" data-throw-if-not-resolved="false"></xref> to their <xref href="TinyLife.Objects.PersonLike.CurrentActions" data-throw-if-not-resolved="false"></xref>. If this method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, it stays in the <xref href="TinyLife.Objects.PersonLike.ActionQueue" data-throw-if-not-resolved="false"></xref>.


    By default, <xref href="TinyLife.Actions.MultiAction" data-throw-if-not-resolved="false"></xref> overrides this behavior to only allow the action to be started if the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> is not being held, and not currently occupying an action spot that has the <code>Stay</code> flag set.
  example: []
  syntax:
    content: public virtual bool CanStartNow()
    return:
      type: System.Boolean
      description: Whether this action can start now.
    content.vb: Public Overridable Function CanStartNow() As Boolean
  overload: TinyLife.Actions.Action.CanStartNow*
- uid: TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
  id: CanActionInterrupt(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanActionInterrupt(Action)
  nameWithType: Action.CanActionInterrupt(Action)
  fullName: TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Determines whether the given <code class="paramref">action</code> can interrupt this action.

    If this method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, it is usually followed by a call to <xref href="TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)" data-throw-if-not-resolved="false"></xref>. To call this method effectively, use <xref href="TinyLife.Objects.PersonLike.ActionInterruptAction(TinyLife.Actions.Action%2cTinyLife.Actions.Action%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.

    This method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> by default, and <xref href="TinyLife.Actions.MultiAction" data-throw-if-not-resolved="false"></xref> returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> only if the main action has not yet started.
  example: []
  syntax:
    content: public virtual bool CanActionInterrupt(Action action)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action trying to interrupt this action.
    return:
      type: System.Boolean
      description: Whether the action can interrupt this action.
    content.vb: Public Overridable Function CanActionInterrupt(action As Action) As Boolean
  overload: TinyLife.Actions.Action.CanActionInterrupt*
- uid: TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)
  commentId: M:TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)
  id: CanGenericInterrupt(System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanGenericInterrupt(bool)
  nameWithType: Action.CanGenericInterrupt(bool)
  fullName: TinyLife.Actions.Action.CanGenericInterrupt(bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Determines whether this action can be interrupted by a generic interruption source.

    If this method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, it is usually followed by a call to <xref href="TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)" data-throw-if-not-resolved="false"></xref>. To call this method effectively, use <xref href="TinyLife.Objects.PersonLike.GenericInterruptAction(TinyLife.Actions.Action%2cSystem.Boolean%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.

    This method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> by default.
  example: []
  syntax:
    content: public virtual bool CanGenericInterrupt(bool isPlayer)
    parameters:
    - id: isPlayer
      type: System.Boolean
      description: Whether the generic interruption source is the player.
    return:
      type: System.Boolean
      description: Whether a generic interruption source can interrupt this action.
    content.vb: Public Overridable Function CanGenericInterrupt(isPlayer As Boolean) As Boolean
  overload: TinyLife.Actions.Action.CanGenericInterrupt*
  nameWithType.vb: Action.CanGenericInterrupt(Boolean)
  fullName.vb: TinyLife.Actions.Action.CanGenericInterrupt(Boolean)
  name.vb: CanGenericInterrupt(Boolean)
- uid: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
  commentId: M:TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
  id: CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanObjectInterrupt(MapObject, CanExecuteResult)
  nameWithType: Action.CanObjectInterrupt(MapObject, CanExecuteResult)
  fullName: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject, TinyLife.Actions.CanExecuteResult)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Determines whether the given <code class="paramref">source</code> object can interrupt this action.

    If this method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, it is usually followed by a call to <xref href="TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)" data-throw-if-not-resolved="false"></xref>.

    This method queries its <xref href="TinyLife.Actions.Action.Type" data-throw-if-not-resolved="false"></xref>'s <xref href="TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions" data-throw-if-not-resolved="false"></xref> by default, and returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> otherwise.
  example: []
  syntax:
    content: public virtual bool CanObjectInterrupt(MapObject source, CanExecuteResult reason)
    parameters:
    - id: source
      type: TinyLife.Objects.MapObject
      description: The object trying to interrupt this action.
    - id: reason
      type: TinyLife.Actions.CanExecuteResult
      description: The reason the object is trying to interrupt this action for.
    return:
      type: System.Boolean
      description: Whether the object can interrupt this action.
    content.vb: Public Overridable Function CanObjectInterrupt(source As MapObject, reason As CanExecuteResult) As Boolean
  overload: TinyLife.Actions.Action.CanObjectInterrupt*
- uid: TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
  id: Interrupt(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Interrupt(CompletionType)
  nameWithType: Action.Interrupt(CompletionType)
  fullName: TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Causes this action to be interrupted due to the given <xref href="TinyLife.Actions.CompletionType" data-throw-if-not-resolved="false"></xref>.

    An interrupted action may continue executing under certain conditions, in which case its <xref href="TinyLife.Actions.Action.IsCompleted" data-throw-if-not-resolved="false"></xref> method may not yet return the passed completion type.

    When canceling actions from outside the action itself, <xref href="TinyLife.Objects.PersonLike.GenericInterruptAction(TinyLife.Actions.Action%2cSystem.Boolean%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.PersonLike.ActionInterruptAction(TinyLife.Actions.Action%2cTinyLife.Actions.Action%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> should be used instead, as they handle additional cases and query <xref href="TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)" data-throw-if-not-resolved="false"></xref> automatically by default.

    Additionally, note that this method may be called in certain situations even when <xref href="TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject%2cTinyLife.Actions.CanExecuteResult)" data-throw-if-not-resolved="false"></xref> all return <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, which should be taken into account by implementors.
  example: []
  syntax:
    content: public virtual void Interrupt(CompletionType completion)
    parameters:
    - id: completion
      type: TinyLife.Actions.CompletionType
      description: The completion type to interrupt the action with.
    content.vb: Public Overridable Sub Interrupt(completion As CompletionType)
  overload: TinyLife.Actions.Action.Interrupt*
- uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  id: GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetNextAction(CompletionType)
  nameWithType: Action.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns an action that should be queued up immediately after this action completes in any way, including after being interrupted using <xref href="TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)" data-throw-if-not-resolved="false"></xref>.

    The queued up action is immediately started in the slot that this action occupied.

    Can be null, and is null by default.
  example: []
  syntax:
    content: public virtual Action GetNextAction(CompletionType completion)
    parameters:
    - id: completion
      type: TinyLife.Actions.CompletionType
      description: The type that this action completed with
    return:
      type: TinyLife.Actions.Action
      description: The follow-up action
    content.vb: Public Overridable Function GetNextAction(completion As CompletionType) As Action
  overload: TinyLife.Actions.Action.GetNextAction*
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  id: GetIconObject
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns the map object that is displayed in the action queue in the top left of the screen using <xref href="TinyLife.Objects.MapObject.DrawIcon(MLEM.Ui.Elements.Element%2cMicrosoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch)" data-throw-if-not-resolved="false"></xref>.

    Note that this value is ignored if this action's type has a <xref href="TinyLife.Actions.ActionType.TypeSettings.Texture" data-throw-if-not-resolved="false"></xref>.

    By default, the <xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref> is returned.
  example: []
  syntax:
    content: public virtual MapObject GetIconObject()
    return:
      type: TinyLife.Objects.MapObject
      description: The icon object
    content.vb: Public Overridable Function GetIconObject() As MapObject
  overload: TinyLife.Actions.Action.GetIconObject*
- uid: TinyLife.Actions.Action.GetExtraIcon
  commentId: M:TinyLife.Actions.Action.GetExtraIcon
  id: GetExtraIcon
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetExtraIcon()
  nameWithType: Action.GetExtraIcon()
  fullName: TinyLife.Actions.Action.GetExtraIcon()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns an extra icon in the form of a <xref href="MLEM.Textures.TextureRegion" data-throw-if-not-resolved="false"></xref>, which, if non-<a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, will be displayed in the top-right corner of the action in the action queue.

    By default, this method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, and <xref href="TinyLife.Actions.MultiAction" data-throw-if-not-resolved="false"></xref> returns an interrupted icon if it has been interrupted and is still executing.
  example: []
  syntax:
    content: public virtual TextureRegion GetExtraIcon()
    return:
      type: MLEM.Textures.TextureRegion
      description: The extra icon to display in the action queue.
    content.vb: Public Overridable Function GetExtraIcon() As TextureRegion
  overload: TinyLife.Actions.Action.GetExtraIcon*
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  commentId: M:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  id: CausesExtremelyFastSpeed
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CausesExtremelyFastSpeed()
  nameWithType: Action.CausesExtremelyFastSpeed()
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns true if this action, while it is currently active, should cause the <xref href="TinyLife.GameSpeed.ExtremelyFast" data-throw-if-not-resolved="false"></xref> speed to be available.

    By default, this method returns false.
  example: []
  syntax:
    content: public virtual bool CausesExtremelyFastSpeed()
    return:
      type: System.Boolean
      description: Whether the extremely fast speed should be available
    content.vb: Public Overridable Function CausesExtremelyFastSpeed() As Boolean
  overload: TinyLife.Actions.Action.CausesExtremelyFastSpeed*
- uid: TinyLife.Actions.Action.GetDisplayName
  commentId: M:TinyLife.Actions.Action.GetDisplayName
  id: GetDisplayName
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetDisplayName()
  nameWithType: Action.GetDisplayName()
  fullName: TinyLife.Actions.Action.GetDisplayName()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns a localized string that explains this action in short.

    By default, this method returns <xref href="TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual string GetDisplayName()
    return:
      type: System.String
      description: This action's display name
    content.vb: Public Overridable Function GetDisplayName() As String
  overload: TinyLife.Actions.Action.GetDisplayName*
- uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType)
  id: CanEnqueueConversation(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanEnqueueConversation(PersonLike, ActionType)
  nameWithType: Action.CanEnqueueConversation(PersonLike, ActionType)
  fullName: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.PersonLike, TinyLife.Actions.ActionType)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns true if the given <code class="paramref">person</code> can (automatically) enqueue a social action with the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> that is executing this action.

    Note that enqueueing a social action manually is still possible even if this method returns false.

    By default, only <xref href="TinyLife.Actions.SleepAction" data-throw-if-not-resolved="false"></xref> returns false on this method.
  example: []
  syntax:
    content: public virtual bool CanEnqueueConversation(PersonLike person, ActionType type)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that wants to converse with us.
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action that should be enqueued. Might be null, in which case a generic or unknown action is querying this function.
    return:
      type: System.Boolean
      description: Whether or not enqueueing a social action is possible.
    content.vb: Public Overridable Function CanEnqueueConversation(person As PersonLike, type As ActionType) As Boolean
  overload: TinyLife.Actions.Action.CanEnqueueConversation*
- uid: TinyLife.Actions.Action.GetProgress
  commentId: M:TinyLife.Actions.Action.GetProgress
  id: GetProgress
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetProgress()
  nameWithType: Action.GetProgress()
  fullName: TinyLife.Actions.Action.GetProgress()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Optionally returns the progress that this action's execution currently exhibits, in a range between 0 and 1.

    The returned progress will be displayed below the action icon in the top left as a green bar that is expected to fill up slowly as progress is made.

    Returning an empty value causes no progress bar to be displayed, and is also the default behavior.
  example: []
  syntax:
    content: public virtual float? GetProgress()
    return:
      type: System.Nullable{System.Single}
      description: This action's progress.
    content.vb: Public Overridable Function GetProgress() As Single?
  overload: TinyLife.Actions.Action.GetProgress*
- uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  id: OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OnChildCompleted(Action, CompletionType, bool)
  nameWithType: Action.OnChildCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    This method is invoked automatically when an action completes that is marked as this action's child.

    A child action is one started through a <xref href="TinyLife.Actions.Handlers.MultiActionHandler" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Actions.Handlers.UnderlyingActionHandler" data-throw-if-not-resolved="false"></xref>.

    By default, this method calls <xref href="TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> on this action's <xref href="TinyLife.Actions.Action.Parent" data-throw-if-not-resolved="false"></xref>, if there is one.
  example: []
  syntax:
    content: protected virtual void OnChildCompleted(Action child, CompletionType type, bool grandchild)
    parameters:
    - id: child
      type: TinyLife.Actions.Action
      description: The child that completed.
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The child's completion type.
    - id: grandchild
      type: System.Boolean
      description: Whether the given child is a grandchild, rather than a direct child.
    content.vb: Protected Overridable Sub OnChildCompleted(child As Action, type As CompletionType, grandchild As Boolean)
  overload: TinyLife.Actions.Action.OnChildCompleted*
  nameWithType.vb: Action.OnChildCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnChildCompleted(Action, CompletionType, Boolean)
- uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel},MLEM.Textures.TextureRegion,System.Single)
  commentId: M:TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel},MLEM.Textures.TextureRegion,System.Single)
  id: OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel},MLEM.Textures.TextureRegion,System.Single)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Action<CoveringGroup, Panel>, TextureRegion, float)
  nameWithType: Action.OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Action<CoveringGroup, Panel>, TextureRegion, float)
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt(string, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, bool, System.Action<TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel>, MLEM.Textures.TextureRegion, float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Opens a prompt for the player with the given elements, also pausing the game.

    This behavior is used for things like the <xref href="TinyLife.Actions.ActionType.QuitJob" data-throw-if-not-resolved="false"></xref> action, where a confirmation panel pops up.

    To check whether a player prompt is currently opened, see <xref href="TinyLife.Actions.Action.PlayerPromptOpen" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CoveringGroup OpenPlayerPrompt(string title, Predicate<Panel> canFinish, Action<Panel> onFinished, bool canExit, Action<CoveringGroup, Panel> addChildren, TextureRegion portrait = null, float panelWidth = 100)
    parameters:
    - id: title
      type: System.String
      description: The title that should be displayed in the box, has to be localized if required
    - id: canFinish
      type: System.Predicate{MLEM.Ui.Elements.Panel}
      description: A function that determines whether the Okay button can be pressed. If the function is null, no button is displayed.
    - id: onFinished
      type: System.Action{MLEM.Ui.Elements.Panel}
      description: A function that is called once the Okay button is pressed. Can be null.
    - id: canExit
      type: System.Boolean
      description: Whether the user can exit the window without making a decision by clicking the background
    - id: addChildren
      type: System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel}
      description: A function that should be used to add elements that should be displayed in this prompt, along with the title and possibly the Okay button if <code class="paramref">canFinish</code> is used.
    - id: portrait
      type: MLEM.Textures.TextureRegion
      description: The portrait to display. If this is null, the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>'s portrait is used.
    - id: panelWidth
      type: System.Single
      description: The width of the displayed panel. Defaults to 100.
    return:
      type: TinyLife.Uis.CoveringGroup
    content.vb: Public Function OpenPlayerPrompt(title As String, canFinish As Predicate(Of Panel), onFinished As Action(Of Panel), canExit As Boolean, addChildren As Action(Of CoveringGroup, Panel), portrait As TextureRegion = Nothing, panelWidth As Single = 100) As CoveringGroup
  overload: TinyLife.Actions.Action.OpenPlayerPrompt*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if this action's <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> is not part of the <xref href="TinyLife.GameImpl.CurrentHousehold" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: Action.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Action(Of CoveringGroup, Panel), TextureRegion, Single)
  fullName.vb: TinyLife.Actions.Action.OpenPlayerPrompt(String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), Boolean, System.Action(Of TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel), MLEM.Textures.TextureRegion, Single)
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Action(Of CoveringGroup, Panel), TextureRegion, Single)
- uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  commentId: M:TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  id: OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenYesNoPrompt(string, Action, Action, TextureRegion, Action<CoveringGroup, Panel>)
  nameWithType: Action.OpenYesNoPrompt(string, Action, Action, TextureRegion, Action<CoveringGroup, Panel>)
  fullName: TinyLife.Actions.Action.OpenYesNoPrompt(string, System.Action, System.Action, MLEM.Textures.TextureRegion, System.Action<TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Opens a prompt for the player that contains a yes and a no button along with some text.

    This prompt can be used to ensure that a player selected the right option in an important decision.

    To check whether a player prompt is currently opened, see <xref href="TinyLife.Actions.Action.PlayerPromptOpen" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CoveringGroup OpenYesNoPrompt(string title, Action onYes, Action onNo = null, TextureRegion portrait = null, Action<CoveringGroup, Panel> addChildren = null)
    parameters:
    - id: title
      type: System.String
      description: The text to display in the prompt
    - id: onYes
      type: System.Action
      description: The action that should be executed when the yes button is pressed
    - id: onNo
      type: System.Action
      description: The action that should be executed when the no button is pressed
    - id: portrait
      type: MLEM.Textures.TextureRegion
      description: The portrait to display. If this is null, the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>'s portrait is used.
    - id: addChildren
      type: System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel}
      description: A function that should be used to add additional elements that should be displayed in this prompt.
    return:
      type: TinyLife.Uis.CoveringGroup
    content.vb: Public Function OpenYesNoPrompt(title As String, onYes As Action, onNo As Action = Nothing, portrait As TextureRegion = Nothing, addChildren As Action(Of CoveringGroup, Panel) = Nothing) As CoveringGroup
  overload: TinyLife.Actions.Action.OpenYesNoPrompt*
  nameWithType.vb: Action.OpenYesNoPrompt(String, Action, Action, TextureRegion, Action(Of CoveringGroup, Panel))
  fullName.vb: TinyLife.Actions.Action.OpenYesNoPrompt(String, System.Action, System.Action, MLEM.Textures.TextureRegion, System.Action(Of TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel))
  name.vb: OpenYesNoPrompt(String, Action, Action, TextureRegion, Action(Of CoveringGroup, Panel))
- uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,System.Boolean,System.Nullable{System.Int32},MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  commentId: M:TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,System.Boolean,System.Nullable{System.Int32},MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  id: OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,System.Boolean,System.Nullable{System.Int32},MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenTextPrompt(string, Action<string>, Predicate<string>, Rule, string, bool, int?, TextureRegion, Action<CoveringGroup, Panel>)
  nameWithType: Action.OpenTextPrompt(string, Action<string>, Predicate<string>, TextField.Rule, string, bool, int?, TextureRegion, Action<CoveringGroup, Panel>)
  fullName: TinyLife.Actions.Action.OpenTextPrompt(string, System.Action<string>, System.Predicate<string>, MLEM.Ui.Elements.TextField.Rule, string, bool, int?, MLEM.Textures.TextureRegion, System.Action<TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Opens a prompt with a text box that allows the player to input a string.

    To check whether a player prompt is currently opened, see <xref href="TinyLife.Actions.Action.PlayerPromptOpen" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CoveringGroup OpenTextPrompt(string title, Action<string> onFinished, Predicate<string> isNameValid, TextField.Rule rule = null, string defaultText = null, bool multiline = false, int? maxCharacters = null, TextureRegion portrait = null, Action<CoveringGroup, Panel> addChildren = null)
    parameters:
    - id: title
      type: System.String
      description: The text to display in the prompt
    - id: onFinished
      type: System.Action{System.String}
      description: An action that is executed when the okay button is pressed, which contains the string that was input into the text box
    - id: isNameValid
      type: System.Predicate{System.String}
      description: A function that determines whether the give name, which may be an empty string, is valid.
    - id: rule
      type: MLEM.Ui.Elements.TextField.Rule
      description: A rule to use for the <xref href="MLEM.Ui.Elements.TextField" data-throw-if-not-resolved="false"></xref>
    - id: defaultText
      type: System.String
      description: The text that should be displayed in the text field by default, or null to display no default text
    - id: multiline
      type: System.Boolean
      description: Whether the text box should be multiline rather than a single line. Multiline input allows newline characters to be included, and makes the box bigger.
    - id: maxCharacters
      type: System.Nullable{System.Int32}
      description: The maximum amount of characters that can be input into the text box.
    - id: portrait
      type: MLEM.Textures.TextureRegion
      description: The portrait to display. If this is null, the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>'s portrait is used.
    - id: addChildren
      type: System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel}
      description: A function that should be used to add additional elements that should be displayed in this prompt.
    return:
      type: TinyLife.Uis.CoveringGroup
    content.vb: Public Function OpenTextPrompt(title As String, onFinished As Action(Of String), isNameValid As Predicate(Of String), rule As TextField.Rule = Nothing, defaultText As String = Nothing, multiline As Boolean = False, maxCharacters As Integer? = Nothing, portrait As TextureRegion = Nothing, addChildren As Action(Of CoveringGroup, Panel) = Nothing) As CoveringGroup
  overload: TinyLife.Actions.Action.OpenTextPrompt*
  nameWithType.vb: Action.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String, Boolean, Integer?, TextureRegion, Action(Of CoveringGroup, Panel))
  fullName.vb: TinyLife.Actions.Action.OpenTextPrompt(String, System.Action(Of String), System.Predicate(Of String), MLEM.Ui.Elements.TextField.Rule, String, Boolean, Integer?, MLEM.Textures.TextureRegion, System.Action(Of TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel))
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), Rule, String, Boolean, Integer?, TextureRegion, Action(Of CoveringGroup, Panel))
- uid: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  commentId: M:TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  id: OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenChoicePrompt(ChoicePromptInfo)
  nameWithType: Action.OpenChoicePrompt(ChoicePromptInfo)
  fullName: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Opens a text prompt (<xref href="TinyLife.Actions.Action.OpenTextPrompt(System.String%2cSystem.Action%7bSystem.String%7d%2cSystem.Predicate%7bSystem.String%7d%2cMLEM.Ui.Elements.TextField.Rule%2cSystem.String%2cSystem.Boolean%2cSystem.Nullable%7bSystem.Int32%7d%2cMLEM.Textures.TextureRegion%2cSystem.Action%7bTinyLife.Uis.CoveringGroup%2cMLEM.Ui.Elements.Panel%7d)" data-throw-if-not-resolved="false"></xref>) that uses the <xref href="TinyLife.Actions.ChoicePromptInfo" data-throw-if-not-resolved="false"></xref> system to display a set of options to the player, one of which is randomly chosen to be "correct", causing a positive effect to happen.
  example: []
  syntax:
    content: public CoveringGroup OpenChoicePrompt(ChoicePromptInfo info)
    parameters:
    - id: info
      type: TinyLife.Actions.ChoicePromptInfo
      description: The choice prompt information to display.
    return:
      type: TinyLife.Uis.CoveringGroup
      description: The <xref href="TinyLife.Uis.CoveringGroup" data-throw-if-not-resolved="false"></xref> that contains the choice prompt.
    content.vb: Public Function OpenChoicePrompt(info As ChoicePromptInfo) As CoveringGroup
  overload: TinyLife.Actions.Action.OpenChoicePrompt*
- uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  commentId: M:TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  id: SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: SpeakAlone(GameTime, float, EmoteChoices?, SpeakStyle, int, float, float, float, float, EmoteBubbleType?)
  nameWithType: Action.SpeakAlone(GameTime, float, EmoteChoices?, SpeakStyle, int, float, float, float, float, EmoteBubbleType?)
  fullName: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle, int, float, float, float, float, TinyLife.Actions.EmoteBubbleType?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Displays emotes for this action's <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> with the given settings as if they were talking to themselves out loud.

    This is used by actions like <xref href="TinyLife.Actions.ActionType.PracticeJokes" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Actions.ActionType.PracticeSpeech" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool SpeakAlone(GameTime time, float speedMultiplier, EmoteChoices? emoteChoices, SpeakStyle speakStyles, int totalAmount = 2147483647, float minimumSeconds = 1, float maximumSeconds = 3, float minimumBreakSeconds = -0.5, float maximumBreakSeconds = 1, EmoteBubbleType? type = null)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's current time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: emoteChoices
      type: System.Nullable{TinyLife.Actions.EmoteChoices}
      description: The emotes to pick from when displaying emotes
    - id: speakStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to use for speech sounds, can be a combined flag
    - id: totalAmount
      type: System.Int32
      description: The total amount of emotes to display, defaults to an infinite amount (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>)
    - id: minimumSeconds
      type: System.Single
      description: The minimum amount of seconds that a speech segment should last.
    - id: maximumSeconds
      type: System.Single
      description: The maximum amount of seconds that a speech segment should last.
    - id: minimumBreakSeconds
      type: System.Single
      description: The minimum amount of seconds of break to take between speech segments.
    - id: maximumBreakSeconds
      type: System.Single
      description: The maximum amount of seconds of break to take between speech segments.
    - id: type
      type: System.Nullable{TinyLife.Actions.EmoteBubbleType}
      description: The emote bubble type to use. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, the bubble is a speech bubble if <code class="paramref">speakStyles</code> is supplied, and a thought bubble otherwise.
    return:
      type: System.Boolean
      description: Whether all emotes were successfully displayed. This method only returns true if <code class="paramref">totalAmount</code> is less than the default value
    content.vb: Public Function SpeakAlone(time As GameTime, speedMultiplier As Single, emoteChoices As EmoteChoices?, speakStyles As SpeakStyle, totalAmount As Integer = 2147483647, minimumSeconds As Single = 1, maximumSeconds As Single = 3, minimumBreakSeconds As Single = -0.5, maximumBreakSeconds As Single = 1, type As EmoteBubbleType? = Nothing) As Boolean
  overload: TinyLife.Actions.Action.SpeakAlone*
  nameWithType.vb: Action.SpeakAlone(GameTime, Single, EmoteChoices?, SpeakStyle, Integer, Single, Single, Single, Single, EmoteBubbleType?)
  fullName.vb: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle, Integer, Single, Single, Single, Single, TinyLife.Actions.EmoteBubbleType?)
  name.vb: SpeakAlone(GameTime, Single, EmoteChoices?, SpeakStyle, Integer, Single, Single, Single, Single, EmoteBubbleType?)
- uid: TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteChoices,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  commentId: M:TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteChoices,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  id: ThinkAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteChoices,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: ThinkAlone(GameTime, float, EmoteChoices, float, float, float, float, int, EmoteBubbleType?)
  nameWithType: Action.ThinkAlone(GameTime, float, EmoteChoices, float, float, float, float, int, EmoteBubbleType?)
  fullName: TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteChoices, float, float, float, float, int, TinyLife.Actions.EmoteBubbleType?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Displays thought bubbles for this action's <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> with the given settings as if they were thinking to themselves.

    This is used by actions like <xref href="TinyLife.Actions.ActionType.Sleep" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool ThinkAlone(GameTime time, float speedMultiplier, EmoteChoices emoteChoices, float minimumSeconds = 1, float maximumSeconds = 3, float minimumBreakSeconds = 0.5, float maximumBreakSeconds = 2, int totalAmount = 2147483647, EmoteBubbleType? type = null)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's current time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: emoteChoices
      type: TinyLife.Actions.EmoteChoices
      description: The emotes to pick from when displaying emotes
    - id: minimumSeconds
      type: System.Single
      description: The minimum amount of seconds that a speech segment should last.
    - id: maximumSeconds
      type: System.Single
      description: The maximum amount of seconds that a speech segment should last.
    - id: minimumBreakSeconds
      type: System.Single
      description: The minimum amount of seconds of break to take between speech segments.
    - id: maximumBreakSeconds
      type: System.Single
      description: The maximum amount of seconds of break to take between speech segments.
    - id: totalAmount
      type: System.Int32
      description: The total amount of emotes to display, defaults to an infinite amount (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>)
    - id: type
      type: System.Nullable{TinyLife.Actions.EmoteBubbleType}
      description: The emote bubble type to use. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, the bubble is a thought bubble.
    return:
      type: System.Boolean
      description: Whether all emotes were successfully displayed. This method only returns true if <code class="paramref">totalAmount</code> is less than the default value
    content.vb: Public Function ThinkAlone(time As GameTime, speedMultiplier As Single, emoteChoices As EmoteChoices, minimumSeconds As Single = 1, maximumSeconds As Single = 3, minimumBreakSeconds As Single = 0.5, maximumBreakSeconds As Single = 2, totalAmount As Integer = 2147483647, type As EmoteBubbleType? = Nothing) As Boolean
  overload: TinyLife.Actions.Action.ThinkAlone*
  nameWithType.vb: Action.ThinkAlone(GameTime, Single, EmoteChoices, Single, Single, Single, Single, Integer, EmoteBubbleType?)
  fullName.vb: TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteChoices, Single, Single, Single, Single, Integer, TinyLife.Actions.EmoteBubbleType?)
  name.vb: ThinkAlone(GameTime, Single, EmoteChoices, Single, Single, Single, Single, Integer, EmoteBubbleType?)
- uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike,Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteChoices},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType},System.Nullable{TinyLife.Actions.EmoteBubbleType})
  commentId: M:TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike,Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteChoices},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType},System.Nullable{TinyLife.Actions.EmoteBubbleType})
  id: SpeakInConversation(TinyLife.Objects.PersonLike,Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteChoices},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType},System.Nullable{TinyLife.Actions.EmoteBubbleType})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: SpeakInConversation(PersonLike, GameTime, float, EmoteChoices?, SpeakStyle, EmoteChoices?, SpeakStyle?, int, float, float, float, float, EmoteBubbleType?, EmoteBubbleType?)
  nameWithType: Action.SpeakInConversation(PersonLike, GameTime, float, EmoteChoices?, SpeakStyle, EmoteChoices?, SpeakStyle?, int, float, float, float, float, EmoteBubbleType?, EmoteBubbleType?)
  fullName: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike, Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle?, int, float, float, float, float, TinyLife.Actions.EmoteBubbleType?, TinyLife.Actions.EmoteBubbleType?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Helper method to display emotes over each conversation partner in a back and forth fashion to make it seem like they are conversing.

    When used in <xref href="TinyLife.Actions.SocialAction" data-throw-if-not-resolved="false"></xref>, only the action that <xref href="TinyLife.Actions.SocialAction.IsMain" data-throw-if-not-resolved="false"></xref> should call this method.
  example: []
  syntax:
    content: public bool SpeakInConversation(PersonLike partner, GameTime time, float speedMultiplier, EmoteChoices? emoteChoices, SpeakStyle speakStyles, EmoteChoices? partnerEmoteChoices = null, SpeakStyle? partnerSpeakStyles = null, int totalAmount = 2147483647, float minimumSeconds = 1, float maximumSeconds = 3, float minimumBreakSeconds = -0.5, float maximumBreakSeconds = 1, EmoteBubbleType? type = null, EmoteBubbleType? partnerType = null)
    parameters:
    - id: partner
      type: TinyLife.Objects.PersonLike
      description: The partner to speak in conversation with.
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: emoteChoices
      type: System.Nullable{TinyLife.Actions.EmoteChoices}
      description: The emotes to pick from when displaying emotes
    - id: speakStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to use for speech sounds, can be a combined flag
    - id: partnerEmoteChoices
      type: System.Nullable{TinyLife.Actions.EmoteChoices}
      description: The emotes to pick from when displaying emotes for the <code class="paramref">partner</code> to use, or null to use <code class="paramref">emoteChoices</code>
    - id: partnerSpeakStyles
      type: System.Nullable{TinyLife.Objects.SpeakStyle}
      description: The speak styles for the interaction partner to use, or null to use <code class="paramref">speakStyles</code>
    - id: totalAmount
      type: System.Int32
      description: The total amount of emotes that should be shown (not per person, but in total)
    - id: minimumSeconds
      type: System.Single
      description: The minimum amount of seconds that a speech segment should last.
    - id: maximumSeconds
      type: System.Single
      description: The maximum amount of seconds that a speech segment should last.
    - id: minimumBreakSeconds
      type: System.Single
      description: The minimum amount of seconds of break to take between speech segments.
    - id: maximumBreakSeconds
      type: System.Single
      description: The maximum amount of seconds of break to take between speech segments.
    - id: type
      type: System.Nullable{TinyLife.Actions.EmoteBubbleType}
      description: The emote bubble type to use. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, the bubble is a speech bubble if <code class="paramref">speakStyles</code> is supplied, and a thought bubble otherwise.
    - id: partnerType
      type: System.Nullable{TinyLife.Actions.EmoteBubbleType}
      description: The emote bubble type to use for the <code class="paramref">partner</code>. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, the bubble is a speech bubble if <code class="paramref">partnerSpeakStyles</code> is supplied, and a thought bubble otherwise.
    return:
      type: System.Boolean
      description: If <code class="paramref">totalAmount</code> is set, true is returned if the emote back-and-forth is completed
    content.vb: Public Function SpeakInConversation(partner As PersonLike, time As GameTime, speedMultiplier As Single, emoteChoices As EmoteChoices?, speakStyles As SpeakStyle, partnerEmoteChoices As EmoteChoices? = Nothing, partnerSpeakStyles As SpeakStyle? = Nothing, totalAmount As Integer = 2147483647, minimumSeconds As Single = 1, maximumSeconds As Single = 3, minimumBreakSeconds As Single = -0.5, maximumBreakSeconds As Single = 1, type As EmoteBubbleType? = Nothing, partnerType As EmoteBubbleType? = Nothing) As Boolean
  overload: TinyLife.Actions.Action.SpeakInConversation*
  nameWithType.vb: Action.SpeakInConversation(PersonLike, GameTime, Single, EmoteChoices?, SpeakStyle, EmoteChoices?, SpeakStyle?, Integer, Single, Single, Single, Single, EmoteBubbleType?, EmoteBubbleType?)
  fullName.vb: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike, Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle?, Integer, Single, Single, Single, Single, TinyLife.Actions.EmoteBubbleType?, TinyLife.Actions.EmoteBubbleType?)
  name.vb: SpeakInConversation(PersonLike, GameTime, Single, EmoteChoices?, SpeakStyle, EmoteChoices?, SpeakStyle?, Integer, Single, Single, Single, Single, EmoteBubbleType?, EmoteBubbleType?)
- uid: TinyLife.Actions.Action.ResetSpeech
  commentId: M:TinyLife.Actions.Action.ResetSpeech
  id: ResetSpeech
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: ResetSpeech()
  nameWithType: Action.ResetSpeech()
  fullName: TinyLife.Actions.Action.ResetSpeech()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Resets speech for this action's <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>, including causing them to stop speaking and emoting, and resetting the timer used by <xref href="TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime%2cSystem.Single%2cSystem.Nullable%7bTinyLife.Actions.EmoteChoices%7d%2cTinyLife.Objects.SpeakStyle%2cSystem.Int32%2cSystem.Single%2cSystem.Single%2cSystem.Single%2cSystem.Single%2cSystem.Nullable%7bTinyLife.Actions.EmoteBubbleType%7d)" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike%2cMicrosoft.Xna.Framework.GameTime%2cSystem.Single%2cSystem.Nullable%7bTinyLife.Actions.EmoteChoices%7d%2cTinyLife.Objects.SpeakStyle%2cSystem.Nullable%7bTinyLife.Actions.EmoteChoices%7d%2cSystem.Nullable%7bTinyLife.Objects.SpeakStyle%7d%2cSystem.Int32%2cSystem.Single%2cSystem.Single%2cSystem.Single%2cSystem.Single%2cSystem.Nullable%7bTinyLife.Actions.EmoteBubbleType%7d%2cSystem.Nullable%7bTinyLife.Actions.EmoteBubbleType%7d)" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime%2cSystem.Single%2cTinyLife.Actions.EmoteChoices%2cSystem.Single%2cSystem.Single%2cSystem.Single%2cSystem.Single%2cSystem.Int32%2cSystem.Nullable%7bTinyLife.Actions.EmoteBubbleType%7d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void ResetSpeech()
    content.vb: Public Sub ResetSpeech()
  overload: TinyLife.Actions.Action.ResetSpeech*
- uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType,TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType,TinyLife.Objects.PersonLike)
  id: CompleteIfNeedFull(TinyLife.NeedType,TinyLife.Objects.PersonLike)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CompleteIfNeedFull(NeedType, PersonLike)
  nameWithType: Action.CompleteIfNeedFull(NeedType, PersonLike)
  fullName: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType, TinyLife.Objects.PersonLike)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A helper method that returns <xref href="TinyLife.Actions.CompletionType.Completed" data-throw-if-not-resolved="false"></xref> if the given <xref href="TinyLife.Need" data-throw-if-not-resolved="false"></xref>'s value is at <xref href="TinyLife.Need.Max" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CompletionType CompleteIfNeedFull(NeedType type, PersonLike person = null)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The need that should be completed
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> whose need needs to be full, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to use this action's <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.CompletionType
      description: The appropriate completion type
    content.vb: Public Function CompleteIfNeedFull(type As NeedType, person As PersonLike = Nothing) As CompletionType
  overload: TinyLife.Actions.Action.CompleteIfNeedFull*
- uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  commentId: M:TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  id: CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CompleteIfTimeUp(TimeSpan, bool, SkillType, float, bool)
  nameWithType: Action.CompleteIfTimeUp(TimeSpan, bool, SkillType, float, bool)
  fullName: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, bool, TinyLife.Skills.SkillType, float, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A helper method that returns <xref href="TinyLife.Actions.CompletionType.Completed" data-throw-if-not-resolved="false"></xref> if the given <code class="paramref">time</code> has passed.

    This method makes use of <xref href="TinyLife.Objects.PersonLike.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> to return true faster or slower based on the person's current mood and skill levels.
  example: []
  syntax:
    content: public CompletionType CompleteIfTimeUp(TimeSpan time, bool efficiencyMatters = false, SkillType skill = null, float levelModifier = 0.1, bool autoOnly = false)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The (total!) amount of time after which this action should be completed
    - id: efficiencyMatters
      type: System.Boolean
      description: Whether the person's efficiency modifier (<xref href="TinyLife.Objects.PersonLike.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>) should be taken into account for the total time required
    - id: skill
      type: TinyLife.Skills.SkillType
      description: A skill that optionally influences the completion time
    - id: levelModifier
      type: System.Single
      description: The amount that each <code class="paramref">skill</code> level should influence the returned time by. Defaults to 0.1.
    - id: autoOnly
      type: System.Boolean
      description: Whether the action should only be completed in the given amount of time if it has been <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref>. If both this value and <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref> are true, this method always returns <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.CompletionType
      description: <xref href="TinyLife.Actions.CompletionType.Completed" data-throw-if-not-resolved="false"></xref> if the time has passed, <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Function CompleteIfTimeUp(time As TimeSpan, efficiencyMatters As Boolean = False, skill As SkillType = Nothing, levelModifier As Single = 0.1, autoOnly As Boolean = False) As CompletionType
  overload: TinyLife.Actions.Action.CompleteIfTimeUp*
  nameWithType.vb: Action.CompleteIfTimeUp(TimeSpan, Boolean, SkillType, Single, Boolean)
  fullName.vb: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, Boolean, TinyLife.Skills.SkillType, Single, Boolean)
  name.vb: CompleteIfTimeUp(TimeSpan, Boolean, SkillType, Single, Boolean)
- uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  commentId: M:TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  id: CompleteIfTimeUp(System.TimeSpan,System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CompleteIfTimeUp(TimeSpan, TimeSpan, bool, SkillType, float, bool)
  nameWithType: Action.CompleteIfTimeUp(TimeSpan, TimeSpan, bool, SkillType, float, bool)
  fullName: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, System.TimeSpan, bool, TinyLife.Skills.SkillType, float, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A helper method that returns <xref href="TinyLife.Actions.CompletionType.Completed" data-throw-if-not-resolved="false"></xref> if a random time calculated using <xref href="TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan%2cSystem.TimeSpan)" data-throw-if-not-resolved="false"></xref>, based on <code class="paramref">min</code> and <code class="paramref">max</code>, has passed.

    This method makes use of <xref href="TinyLife.Objects.PersonLike.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> to return true faster or slower based on the person's current mood and skill levels.
  example: []
  syntax:
    content: public CompletionType CompleteIfTimeUp(TimeSpan min, TimeSpan max, bool efficiencyMatters = false, SkillType skill = null, float levelModifier = 0.1, bool autoOnly = false)
    parameters:
    - id: min
      type: System.TimeSpan
      description: The minimum amount of time after which this action should be completed
    - id: max
      type: System.TimeSpan
      description: The maximum amount of time after which this action should be completed
    - id: efficiencyMatters
      type: System.Boolean
      description: Whether the person's efficiency modifier (<xref href="TinyLife.Objects.PersonLike.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>) should be taken into account for the total time required
    - id: skill
      type: TinyLife.Skills.SkillType
      description: A skill that optionally influences the completion time
    - id: levelModifier
      type: System.Single
      description: The amount that each <code class="paramref">skill</code> level should influence the returned time by. Defaults to 0.1.
    - id: autoOnly
      type: System.Boolean
      description: Whether the action should only be completed in the given amount of time if it has been <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref>. If both this value and <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref> are true, this method always returns <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.CompletionType
      description: <xref href="TinyLife.Actions.CompletionType.Completed" data-throw-if-not-resolved="false"></xref> if the time has passed, <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Function CompleteIfTimeUp(min As TimeSpan, max As TimeSpan, efficiencyMatters As Boolean = False, skill As SkillType = Nothing, levelModifier As Single = 0.1, autoOnly As Boolean = False) As CompletionType
  overload: TinyLife.Actions.Action.CompleteIfTimeUp*
  nameWithType.vb: Action.CompleteIfTimeUp(TimeSpan, TimeSpan, Boolean, SkillType, Single, Boolean)
  fullName.vb: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, System.TimeSpan, Boolean, TinyLife.Skills.SkillType, Single, Boolean)
  name.vb: CompleteIfTimeUp(TimeSpan, TimeSpan, Boolean, SkillType, Single, Boolean)
- uid: TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan,System.TimeSpan)
  commentId: M:TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan,System.TimeSpan)
  id: GetRandomCompletionTime(System.TimeSpan,System.TimeSpan)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetRandomCompletionTime(TimeSpan, TimeSpan)
  nameWithType: Action.GetRandomCompletionTime(TimeSpan, TimeSpan)
  fullName: TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan, System.TimeSpan)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Generates a random completion time for this action based on the <code class="paramref">min</code> and <code class="paramref">max</code> times passed.

    The returned value will be the same for the same action <xref href="TinyLife.Actions.Action.Id" data-throw-if-not-resolved="false"></xref> and the same <code class="paramref">min</code> and <code class="paramref">max</code> values, as it is generated using a <xref href="MLEM.Maths.SeedSource" data-throw-if-not-resolved="false"></xref> with those parameteers.
  example: []
  syntax:
    content: public TimeSpan GetRandomCompletionTime(TimeSpan min, TimeSpan max)
    parameters:
    - id: min
      type: System.TimeSpan
      description: The minimum amount of time after which this action should be completed
    - id: max
      type: System.TimeSpan
      description: The maximum amount of time after which this action should be completed
    return:
      type: System.TimeSpan
      description: The final amount of time after which this action should be completed.
    content.vb: Public Function GetRandomCompletionTime(min As TimeSpan, max As TimeSpan) As TimeSpan
  overload: TinyLife.Actions.Action.GetRandomCompletionTime*
- uid: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  commentId: M:TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  id: CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CancelIfEmotional(params EmotionType[])
  nameWithType: Action.CancelIfEmotional(params EmotionType[])
  fullName: TinyLife.Actions.Action.CancelIfEmotional(params TinyLife.Emotions.EmotionType[])
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A helper method that returns <xref href="TinyLife.Actions.CompletionType.Canceled" data-throw-if-not-resolved="false"></xref> if this action's <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> has any of the given <code class="paramref">emotions</code>, and <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> otherwise.
  example: []
  syntax:
    content: public CompletionType CancelIfEmotional(params EmotionType[] emotions)
    parameters:
    - id: emotions
      type: TinyLife.Emotions.EmotionType[]
      description: The emotions to cancel based on.
    return:
      type: TinyLife.Actions.CompletionType
      description: A completion type based on whether any of the <code class="paramref">emotions</code> are present.
    content.vb: Public Function CancelIfEmotional(ParamArray emotions As EmotionType()) As CompletionType
  overload: TinyLife.Actions.Action.CancelIfEmotional*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the <code class="paramref">emotions</code> array has no entries.
  nameWithType.vb: Action.CancelIfEmotional(ParamArray EmotionType())
  fullName.vb: TinyLife.Actions.Action.CancelIfEmotional(ParamArray TinyLife.Emotions.EmotionType())
  name.vb: CancelIfEmotional(ParamArray EmotionType())
- uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  id: Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Sit(Furniture, float, ActionSpot)
  nameWithType: Action.Sit(Furniture, float, ActionSpot)
  fullName: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, float, TinyLife.Objects.ActionSpot)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A helper method that causes the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> to sit on the given object.

    This method causes the action spot to be occupied and the person's <xref href="TinyLife.Objects.PersonLike.CurrentPose" data-throw-if-not-resolved="false"></xref> to be changed to <xref href="TinyLife.Objects.Pose.Sitting" data-throw-if-not-resolved="false"></xref>.

    Additionally, the <xref href="TinyLife.NeedType.Energy" data-throw-if-not-resolved="false"></xref> need is restored a little bit.

    Note that this method has to be called every <xref href="TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> frame for the person to stay sat down.
  example: []
  syntax:
    content: public bool Sit(Furniture chair, float speedMultiplier, ActionSpot spot = null)
    parameters:
    - id: chair
      type: TinyLife.Objects.Furniture
      description: The chair to sit on
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: The action spot to sit on, or null to select one automatically
    return:
      type: System.Boolean
      description: Whether or not the chair can be sat on
    content.vb: Public Function Sit(chair As Furniture, speedMultiplier As Single, spot As ActionSpot = Nothing) As Boolean
  overload: TinyLife.Actions.Action.Sit*
  nameWithType.vb: Action.Sit(Furniture, Single, ActionSpot)
  fullName.vb: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, Single, TinyLife.Objects.ActionSpot)
  name.vb: Sit(Furniture, Single, ActionSpot)
- uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChildren(System.Boolean)
  id: GetChildren(System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetChildren(bool)
  nameWithType: Action.GetChildren(bool)
  fullName: TinyLife.Actions.Action.GetChildren(bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns a set of actions that are child actions of this action, which are actions that have their <xref href="TinyLife.Actions.Action.Parent" data-throw-if-not-resolved="false"></xref> set to this action.

    Optionally, grandchildren can be included in the returned set.
  example: []
  syntax:
    content: public IEnumerable<Action> GetChildren(bool regardGrandchildren = false)
    parameters:
    - id: regardGrandchildren
      type: System.Boolean
      description: Whether to include grandchildren, which are children of children, and so on.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: The child actions of this action.
    content.vb: Public Function GetChildren(regardGrandchildren As Boolean = False) As IEnumerable(Of Action)
  overload: TinyLife.Actions.Action.GetChildren*
  nameWithType.vb: Action.GetChildren(Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChildren(Boolean)
  name.vb: GetChildren(Boolean)
- uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  id: GetChild``1(System.Guid,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetChild<T>(Guid, bool)
  nameWithType: Action.GetChild<T>(Guid, bool)
  fullName: TinyLife.Actions.Action.GetChild<T>(System.Guid, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns the first child action of this action with the given type <code class="typeparamref">T</code> that has the given id <code class="paramref">id</code>. Child actions are actions that have their <xref href="TinyLife.Actions.Action.Parent" data-throw-if-not-resolved="false"></xref> set to this action.

    Optionally, grandchildren can be included in the search.
  example: []
  syntax:
    content: 'public T GetChild<T>(Guid id, bool regardGrandchildren = false) where T : Action'
    parameters:
    - id: id
      type: System.Guid
      description: The <xref href="TinyLife.Actions.Action.Id" data-throw-if-not-resolved="false"></xref> of the action to find.
    - id: regardGrandchildren
      type: System.Boolean
      description: Whether to include grandchildren, which are children of children, and so on.
    typeParameters:
    - id: T
      description: The type of child action to find.
    return:
      type: '{T}'
      description: The found child action, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if there is no child action that matches the given conditions.
    content.vb: Public Function GetChild(Of T As Action)(id As Guid, regardGrandchildren As Boolean = False) As T
  overload: TinyLife.Actions.Action.GetChild*
  nameWithType.vb: Action.GetChild(Of T)(Guid, Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChild(Of T)(System.Guid, Boolean)
  name.vb: GetChild(Of T)(Guid, Boolean)
- uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{System.Int32})
  commentId: M:TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{System.Int32})
  id: PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{System.Int32})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, bool, int?)
  nameWithType: Action.PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, bool, int?)
  fullName: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory, bool, int?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A helper method that returns a set of actions which cause the <code class="paramref">info</code>'s <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> to set up a holdable item on an expected parent object in such a way that interacting with it is possible afterwards. This utility method is used for actions like <xref href="TinyLife.Actions.ActionType.Eat" data-throw-if-not-resolved="false"></xref>, where it is desired that a person picks up a food item from a counter and brings it to a table, if required.

    <xref href="TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo%2cTinyLife.Objects.ObjectCategory%2cSystem.Func%7bTinyLife.Objects.Furniture%2cSystem.Boolean%7d%2cSystem.Nullable%7bTinyLife.Actions.CanExecuteResult%7d%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> provides a <xref href="TinyLife.Actions.ActionType.CanExecuteDelegate" data-throw-if-not-resolved="false"></xref> equivalent to this method.
  example: []
  syntax:
    content: public static IEnumerable<Action> PickUpAndGoTo(ActionInfo info, ObjectCategory expectedParent, ObjectCategory expectedItem, bool putDown = true, int? radius = null)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: expectedParent
      type: TinyLife.Objects.ObjectCategory
      description: A set of object categories that the goal parent is expected to have.
    - id: expectedItem
      type: TinyLife.Objects.ObjectCategory
      description: A set of object categories that the item to hold and carry is expected to have.
    - id: putDown
      type: System.Boolean
      description: Whether the <code class="paramref">expectedItem</code> should be put down. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, the person will only go to the goal location, but not put the item down on it.
    - id: radius
      type: System.Nullable{System.Int32}
      description: The radius that should be searched for applicable destinations in, or 32 by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: The actions to execute to cause this behavior.
    content.vb: Public Shared Function PickUpAndGoTo(info As ActionInfo, expectedParent As ObjectCategory, expectedItem As ObjectCategory, putDown As Boolean = True, radius As Integer? = Nothing) As IEnumerable(Of Action)
  overload: TinyLife.Actions.Action.PickUpAndGoTo*
  nameWithType.vb: Action.PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, Boolean, Integer?)
  fullName.vb: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory, Boolean, Integer?)
  name.vb: PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, Boolean, Integer?)
- uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Nullable{System.Int32})
  commentId: M:TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Nullable{System.Int32})
  id: PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Nullable{System.Int32})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: PickUpAndGoTo(ActionInfo, Func<Furniture, bool>, Func<Furniture, bool>, bool, int?)
  nameWithType: Action.PickUpAndGoTo(ActionInfo, Func<Furniture, bool>, Func<Furniture, bool>, bool, int?)
  fullName: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, System.Func<TinyLife.Objects.Furniture, bool>, System.Func<TinyLife.Objects.Furniture, bool>, bool, int?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A helper method that returns a set of actions which cause the <code class="paramref">info</code>'s <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> to set up a holdable item on an expected parent object in such a way that interacting with it is possible afterwards. This utility method is used for actions like <xref href="TinyLife.Actions.ActionType.Eat" data-throw-if-not-resolved="false"></xref>, where it is desired that a person picks up a food item from a counter and brings it to a table, if required.

    <xref href="TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo%2cTinyLife.Objects.ObjectCategory%2cSystem.Func%7bTinyLife.Objects.Furniture%2cSystem.Boolean%7d%2cSystem.Nullable%7bTinyLife.Actions.CanExecuteResult%7d%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> provides a <xref href="TinyLife.Actions.ActionType.CanExecuteDelegate" data-throw-if-not-resolved="false"></xref> equivalent to this method.
  example: []
  syntax:
    content: public static IEnumerable<Action> PickUpAndGoTo(ActionInfo info, Func<Furniture, bool> isParentValid, Func<Furniture, bool> isItemValid, bool putDown = true, int? radius = null)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: isParentValid
      type: System.Func{TinyLife.Objects.Furniture,System.Boolean}
      description: A predicate that determines whether the given furniture item is a valid parent.
    - id: isItemValid
      type: System.Func{TinyLife.Objects.Furniture,System.Boolean}
      description: A predicate that determines whether the given furniture item is a valid holdable and carryable item for this purpose.
    - id: putDown
      type: System.Boolean
      description: Whether the holdable item should be put down. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, the person will only go to the goal location, but not put the item down on it.
    - id: radius
      type: System.Nullable{System.Int32}
      description: The radius that should be searched for applicable destinations in, or 32 by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: The actions to execute to cause this behavior.
    content.vb: Public Shared Function PickUpAndGoTo(info As ActionInfo, isParentValid As Func(Of Furniture, Boolean), isItemValid As Func(Of Furniture, Boolean), putDown As Boolean = True, radius As Integer? = Nothing) As IEnumerable(Of Action)
  overload: TinyLife.Actions.Action.PickUpAndGoTo*
  nameWithType.vb: Action.PickUpAndGoTo(ActionInfo, Func(Of Furniture, Boolean), Func(Of Furniture, Boolean), Boolean, Integer?)
  fullName.vb: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, System.Func(Of TinyLife.Objects.Furniture, Boolean), System.Func(Of TinyLife.Objects.Furniture, Boolean), Boolean, Integer?)
  name.vb: PickUpAndGoTo(ActionInfo, Func(Of Furniture, Boolean), Func(Of Furniture, Boolean), Boolean, Integer?)
- uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture)
  id: GetFreeChair(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetFreeChair(PersonLike, Furniture)
  nameWithType: Action.GetFreeChair(PersonLike, Furniture)
  fullName: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike, TinyLife.Objects.Furniture)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A helper method that returns an <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> for a <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref> on a <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> with the <xref href="TinyLife.Objects.ObjectCategory.Chair" data-throw-if-not-resolved="false"></xref> category that is closest to the given object which is on a desk or table.

    The furniture returned is the one that the person should <xref href="TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture%2cSystem.Single%2cTinyLife.Objects.ActionSpot)" data-throw-if-not-resolved="false"></xref> on when interacting with the passed <code class="paramref">deskObject</code>.

    This method will return the <code class="paramref">deskObject</code>'s parent itself if it is a picnic-style table that has benches directly attached to it.
  example: []
  syntax:
    content: public static (Furniture Chair, ActionSpot Spot, Direction2 Direction) GetFreeChair(PersonLike person, Furniture deskObject)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person to get the free chair for
    - id: deskObject
      type: TinyLife.Objects.Furniture
      description: The object that is sat on a desk
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}
      description: The corresponding chair, <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref> and the action spot's rotation, or default if there is none
    content.vb: Public Shared Function GetFreeChair(person As PersonLike, deskObject As Furniture) As (Chair As Furniture, Spot As ActionSpot, Direction As Direction2)
  overload: TinyLife.Actions.Action.GetFreeChair*
- uid: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture,System.Func{MLEM.Maths.Direction2,System.Boolean})
  commentId: M:TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture,System.Func{MLEM.Maths.Direction2,System.Boolean})
  id: GetFreeChairs(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture,System.Func{MLEM.Maths.Direction2,System.Boolean})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetFreeChairs(PersonLike, Furniture, Func<Direction2, bool>)
  nameWithType: Action.GetFreeChairs(PersonLike, Furniture, Func<Direction2, bool>)
  fullName: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.PersonLike, TinyLife.Objects.Furniture, System.Func<MLEM.Maths.Direction2, bool>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns a set of free chair furniture paired with an <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref> and accessible direction.

    This method is used by <xref href="TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike%2cTinyLife.Objects.Furniture)" data-throw-if-not-resolved="false"></xref>.

    This method will return the <code class="paramref">table</code> itself if it is a picnic-style table that has benches directly attached to it.
  example: []
  syntax:
    content: public static IEnumerable<(Furniture Chair, ActionSpot Spot, Direction2 Direction)> GetFreeChairs(PersonLike person, Furniture table, Func<Direction2, bool> canSitThisWay = null)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person to get the free chairs for
    - id: table
      type: TinyLife.Objects.Furniture
      description: The table that the chairs should be connected to
    - id: canSitThisWay
      type: System.Func{MLEM.Maths.Direction2,System.Boolean}
      description: A function that determines whether a person can sit the given way, or null to allow all seating directions
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}}
      description: A set of chairs, their action spots and their seating directions
    content.vb: Public Shared Function GetFreeChairs(person As PersonLike, table As Furniture, canSitThisWay As Func(Of Direction2, Boolean) = Nothing) As IEnumerable(Of (Chair As Furniture, Spot As ActionSpot, Direction As Direction2))
  overload: TinyLife.Actions.Action.GetFreeChairs*
  nameWithType.vb: Action.GetFreeChairs(PersonLike, Furniture, Func(Of Direction2, Boolean))
  fullName.vb: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.PersonLike, TinyLife.Objects.Furniture, System.Func(Of MLEM.Maths.Direction2, Boolean))
  name.vb: GetFreeChairs(PersonLike, Furniture, Func(Of Direction2, Boolean))
- uid: TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.PersonLike)
  id: GetSeatCategory(TinyLife.Objects.PersonLike)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetSeatCategory(PersonLike)
  nameWithType: Action.GetSeatCategory(PersonLike)
  fullName: TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.PersonLike)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns the <xref href="TinyLife.Objects.ObjectCategory" data-throw-if-not-resolved="false"></xref> that an object needs to have for the given <code class="paramref">person</code> to be able to sit on it.

    This method returns <xref href="TinyLife.Objects.ObjectCategory.BabySittable" data-throw-if-not-resolved="false"></xref> for babies, and <xref href="TinyLife.Objects.ObjectCategory.Chair" data-throw-if-not-resolved="false"></xref> otherwise.
  example: []
  syntax:
    content: public static ObjectCategory GetSeatCategory(PersonLike person)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person who should sit.
    return:
      type: TinyLife.Objects.ObjectCategory
      description: The object category for seats.
    content.vb: Public Shared Function GetSeatCategory(person As PersonLike) As ObjectCategory
  overload: TinyLife.Actions.Action.GetSeatCategory*
- uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.PersonLike,System.Boolean})
  commentId: M:TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.PersonLike,System.Boolean})
  id: FindAllFreePeople(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.PersonLike,System.Boolean})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreePeople(PersonLike, ActionType, Map, Vector2?, float?, float?, bool, bool, bool, bool, Func<PersonLike, bool>)
  nameWithType: Action.FindAllFreePeople(PersonLike, ActionType, Map, Vector2?, float?, float?, bool, bool, bool, bool, Func<PersonLike, bool>)
  fullName: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.PersonLike, TinyLife.Actions.ActionType, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, float?, float?, bool, bool, bool, bool, System.Func<TinyLife.Objects.PersonLike, bool>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A helper method to find a set of all <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> instances that are currently valid for interaction with the passed <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>, ordered by their priority, where the first entry is the best possible <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<PersonLike> FindAllFreePeople(PersonLike person, ActionType type = null, Map map = null, Vector2? position = null, float? floor = null, float? radius = null, bool ignoreVisibility = false, bool allowOffLot = true, bool ignoreNeeds = false, bool needsFreeActionSpot = true, Func<PersonLike, bool> predicate = null)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that wants to start the aciton
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action we want to start
    - id: map
      type: TinyLife.World.Map
      description: The map to find people on.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person's position
    - id: floor
      type: System.Nullable{System.Single}
      description: The floor to find people on.
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cTinyLife.World.Map%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) of the object should be ignored. Defaults to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    - id: allowOffLot
      type: System.Boolean
      description: Whether objects that aren't on a lot should be considered for inclusion in the returned collection. If <code class="paramref">ignoreVisibility</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, this parameter is ignored, and objects that aren't on a lot are included.
    - id: ignoreNeeds
      type: System.Boolean
      description: Whether the free people's needs should be ignored.
    - id: needsFreeActionSpot
      type: System.Boolean
      description: Whether a free action spot is required on the free people.
    - id: predicate
      type: System.Func{TinyLife.Objects.PersonLike,System.Boolean}
      description: A predicate that should be validated before the other conditions are checked. If this is a simple check, it will greatly speed up performance as the other checks can be skipped for invalid objects. If it is a complicated check, consider filtering the objects after they are returned from this method.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.PersonLike}
      description: A set of valid interaction partners
    content.vb: Public Shared Function FindAllFreePeople(person As PersonLike, type As ActionType = Nothing, map As Map = Nothing, position As Vector2? = Nothing, floor As Single? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False, allowOffLot As Boolean = True, ignoreNeeds As Boolean = False, needsFreeActionSpot As Boolean = True, predicate As Func(Of PersonLike, Boolean) = Nothing) As IEnumerable(Of PersonLike)
  overload: TinyLife.Actions.Action.FindAllFreePeople*
  nameWithType.vb: Action.FindAllFreePeople(PersonLike, ActionType, Map, Vector2?, Single?, Single?, Boolean, Boolean, Boolean, Boolean, Func(Of PersonLike, Boolean))
  fullName.vb: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.PersonLike, TinyLife.Actions.ActionType, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Single?, Single?, Boolean, Boolean, Boolean, Boolean, System.Func(Of TinyLife.Objects.PersonLike, Boolean))
  name.vb: FindAllFreePeople(PersonLike, ActionType, Map, Vector2?, Single?, Single?, Boolean, Boolean, Boolean, Boolean, Func(Of PersonLike, Boolean))
- uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.Furniture,System.Boolean})
  commentId: M:TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.Furniture,System.Boolean})
  id: FindAllFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.Furniture,System.Boolean})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeFurniture(PersonLike, ObjectCategory, FurnitureType, bool, Map, Vector2?, float?, float?, bool, bool, bool, Func<Furniture, bool>)
  nameWithType: Action.FindAllFreeFurniture(PersonLike, ObjectCategory, FurnitureType, bool, Map, Vector2?, float?, float?, bool, bool, bool, Func<Furniture, bool>)
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, bool, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, float?, float?, bool, bool, bool, System.Func<TinyLife.Objects.Furniture, bool>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A helper method to find a set of all <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> instances that are currently valid for interaction with the passed <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>, ordered by their priority, where the first entry is the best possible <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> object.
  example: []
  syntax:
    content: public static IEnumerable<Furniture> FindAllFreeFurniture(PersonLike person, ObjectCategory categories = null, FurnitureType objectSpotType = null, bool needsFreeActionSpot = true, Map map = null, Vector2? position = null, float? floor = null, float? radius = null, bool allowBroken = false, bool ignoreVisibility = false, bool allowOffLot = false, Func<Furniture, bool> predicate = null)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that wants to start the action
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that the furniture should have
    - id: objectSpotType
      type: TinyLife.Objects.FurnitureType
      description: The type of item that an object spot should be available for, or null if this is not required
    - id: needsFreeActionSpot
      type: System.Boolean
      description: Whether or not the furniture returned needs a non-occupied <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref>
    - id: map
      type: TinyLife.World.Map
      description: The map to find furniture on.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person's position
    - id: floor
      type: System.Nullable{System.Single}
      description: The floor to find furniture on.
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: allowBroken
      type: System.Boolean
      description: Whether furniture that is <xref href="TinyLife.Objects.IBreakableObject.Broken" data-throw-if-not-resolved="false"></xref> can be returned
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cTinyLife.World.Map%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) of the object should be ignored. Defaults to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    - id: allowOffLot
      type: System.Boolean
      description: Whether objects that aren't on a lot should be considered for inclusion in the returned collection. If <code class="paramref">ignoreVisibility</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, this parameter is ignored, and objects that aren't on a lot are included.
    - id: predicate
      type: System.Func{TinyLife.Objects.Furniture,System.Boolean}
      description: A predicate that should be validated before the other conditions are checked. If this is a simple check, it will greatly speed up performance as the other checks can be skipped for invalid objects. If it is a complicated check, consider filtering the objects after they are returned from this method.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
      description: A set of valid furniture
    content.vb: Public Shared Function FindAllFreeFurniture(person As PersonLike, categories As ObjectCategory = Nothing, objectSpotType As FurnitureType = Nothing, needsFreeActionSpot As Boolean = True, map As Map = Nothing, position As Vector2? = Nothing, floor As Single? = Nothing, radius As Single? = Nothing, allowBroken As Boolean = False, ignoreVisibility As Boolean = False, allowOffLot As Boolean = False, predicate As Func(Of Furniture, Boolean) = Nothing) As IEnumerable(Of Furniture)
  overload: TinyLife.Actions.Action.FindAllFreeFurniture*
  nameWithType.vb: Action.FindAllFreeFurniture(PersonLike, ObjectCategory, FurnitureType, Boolean, Map, Vector2?, Single?, Single?, Boolean, Boolean, Boolean, Func(Of Furniture, Boolean))
  fullName.vb: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Boolean, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Single?, Single?, Boolean, Boolean, Boolean, System.Func(Of TinyLife.Objects.Furniture, Boolean))
  name.vb: FindAllFreeFurniture(PersonLike, ObjectCategory, FurnitureType, Boolean, Map, Vector2?, Single?, Single?, Boolean, Boolean, Boolean, Func(Of Furniture, Boolean))
- uid: TinyLife.Actions.Action.FindAllFreeWalls``1(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeWalls``1(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  id: FindAllFreeWalls``1(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeWalls<T>(PersonLike, Map, Vector2?, float?, float?, bool, bool)
  nameWithType: Action.FindAllFreeWalls<T>(PersonLike, Map, Vector2?, float?, float?, bool, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeWalls<T>(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, float?, float?, bool, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A helper method to find a set of all <xref href="TinyLife.Objects.WallLike" data-throw-if-not-resolved="false"></xref> instances that are currently valid for interaction with the passed <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: 'public static IEnumerable<T> FindAllFreeWalls<T>(PersonLike person, Map map = null, Vector2? position = null, float? floor = null, float? radius = null, bool ignoreVisibility = false, bool allowOffLot = false) where T : WallLike'
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that wants to start the action
    - id: map
      type: TinyLife.World.Map
      description: The map to find walls on.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the walls should be around, or null to use the <code class="paramref">person</code>'s position
    - id: floor
      type: System.Nullable{System.Single}
      description: The floor to find walsl on.
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for walls in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cTinyLife.World.Map%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) of the object should be ignored. Defaults to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    - id: allowOffLot
      type: System.Boolean
      description: Whether objects that aren't on a lot should be considered for inclusion in the returned collection. If <code class="paramref">ignoreVisibility</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, this parameter is ignored, and objects that aren't on a lot are included.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A set of valid walls
    content.vb: Public Shared Function FindAllFreeWalls(Of T As WallLike)(person As PersonLike, map As Map = Nothing, position As Vector2? = Nothing, floor As Single? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False, allowOffLot As Boolean = False) As IEnumerable(Of T)
  overload: TinyLife.Actions.Action.FindAllFreeWalls*
  nameWithType.vb: Action.FindAllFreeWalls(Of T)(PersonLike, Map, Vector2?, Single?, Single?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeWalls(Of T)(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Single?, Single?, Boolean, Boolean)
  name.vb: FindAllFreeWalls(Of T)(PersonLike, Map, Vector2?, Single?, Single?, Boolean, Boolean)
- uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  id: FindAllFreeGround(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeGround(PersonLike, Map, Vector2?, float?, float?, bool, bool)
  nameWithType: Action.FindAllFreeGround(PersonLike, Map, Vector2?, float?, float?, bool, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, float?, float?, bool, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A helper method to find a set of all positions on the ground that are currently valid for interaction
  example: []
  syntax:
    content: public static IEnumerable<TileInstance> FindAllFreeGround(PersonLike person, Map map = null, Vector2? position = null, float? floor = null, float? radius = null, bool ignoreVisibility = false, bool allowOffLot = false)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that wants to start the action
    - id: map
      type: TinyLife.World.Map
      description: The maps to find ground tiles on.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the ground should be around, or null to use the <code class="paramref">person</code>'s position
    - id: floor
      type: System.Nullable{System.Single}
      description: The floor to find ground tiles on.
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for ground positions in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cTinyLife.World.Map%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) of the object should be ignored. Defaults to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    - id: allowOffLot
      type: System.Boolean
      description: Whether objects that aren't on a lot should be considered for inclusion in the returned collection. If <code class="paramref">ignoreVisibility</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, this parameter is ignored, and objects that aren't on a lot are included.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.TileInstance}
      description: A set of valid locations
    content.vb: Public Shared Function FindAllFreeGround(person As PersonLike, map As Map = Nothing, position As Vector2? = Nothing, floor As Single? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False, allowOffLot As Boolean = False) As IEnumerable(Of TileInstance)
  overload: TinyLife.Actions.Action.FindAllFreeGround*
  nameWithType.vb: Action.FindAllFreeGround(PersonLike, Map, Vector2?, Single?, Single?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Single?, Single?, Boolean, Boolean)
  name.vb: FindAllFreeGround(PersonLike, Map, Vector2?, Single?, Single?, Boolean, Boolean)
- uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean)
  id: FindFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindFreeFurniture(PersonLike, ObjectCategory, FurnitureType, Map, Vector2?, float?, float?, bool, bool, bool)
  nameWithType: Action.FindFreeFurniture(PersonLike, ObjectCategory, FurnitureType, Map, Vector2?, float?, float?, bool, bool, bool)
  fullName: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.PersonLike, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, float?, float?, bool, bool, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A helper method to find the best <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> instance to interact with based on the given data.

    Note that this method always returns a <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> related to the first result from <xref href="TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike%2cTinyLife.Objects.ObjectCategory%2cTinyLife.Objects.FurnitureType%2cSystem.Boolean%2cTinyLife.World.Map%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Nullable%7bSystem.Single%7d%2cSystem.Nullable%7bSystem.Single%7d%2cSystem.Boolean%2cSystem.Boolean%2cSystem.Boolean%2cSystem.Func%7bTinyLife.Objects.Furniture%2cSystem.Boolean%7d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static ActionInfo FindFreeFurniture(PersonLike person, ObjectCategory categories, FurnitureType objectSpotType = null, Map map = null, Vector2? position = null, float? floor = null, float? radius = null, bool allowBroken = false, bool ignoreVisibility = false, bool allowOffLot = false)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person that wants to start the action
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that the furniture, as well as its action spots, should have
    - id: objectSpotType
      type: TinyLife.Objects.FurnitureType
      description: The type of item that an object spot should be available for, or null if this is not required
    - id: map
      type: TinyLife.World.Map
      description: The map to find furniture on.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person's position
    - id: floor
      type: System.Nullable{System.Single}
      description: The floor to find furniture on.
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: allowBroken
      type: System.Boolean
      description: Whether furniture that is <xref href="TinyLife.Objects.IBreakableObject.Broken" data-throw-if-not-resolved="false"></xref> can be returned
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cTinyLife.World.Map%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) of the object should be ignored. Defaults to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    - id: allowOffLot
      type: System.Boolean
      description: Whether objects that aren't on a lot should be considered for inclusion in the returned collection. If <code class="paramref">ignoreVisibility</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, this parameter is ignored, and objects that aren't on a lot are included.
    return:
      type: TinyLife.Actions.ActionInfo
      description: An action info for the best furniture, or null if there is none
    content.vb: Public Shared Function FindFreeFurniture(person As PersonLike, categories As ObjectCategory, objectSpotType As FurnitureType = Nothing, map As Map = Nothing, position As Vector2? = Nothing, floor As Single? = Nothing, radius As Single? = Nothing, allowBroken As Boolean = False, ignoreVisibility As Boolean = False, allowOffLot As Boolean = False) As ActionInfo
  overload: TinyLife.Actions.Action.FindFreeFurniture*
  nameWithType.vb: Action.FindFreeFurniture(PersonLike, ObjectCategory, FurnitureType, Map, Vector2?, Single?, Single?, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.PersonLike, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Single?, Single?, Boolean, Boolean, Boolean)
  name.vb: FindFreeFurniture(PersonLike, ObjectCategory, FurnitureType, Map, Vector2?, Single?, Single?, Boolean, Boolean, Boolean)
- uid: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: FindAllActionObjects(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllActionObjects(PersonLike, ActionType, Map, Vector2?)
  nameWithType: Action.FindAllActionObjects(PersonLike, ActionType, Map, Vector2?)
  fullName: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.PersonLike, TinyLife.Actions.ActionType, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns all <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> objects that are available to the given <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> for the given <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref>.

    The objects returned are the ones that would also be considered by the <xref href="TinyLife.Objects.PersonAi" data-throw-if-not-resolved="false"></xref> when starting an action.
  example: []
  syntax:
    content: public static IEnumerable<ActionInfo> FindAllActionObjects(PersonLike person, ActionType type, Map map = null, Vector2? position = null)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action to start
    - id: map
      type: TinyLife.World.Map
      description: The map to find objects on.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position to focus around when finding action objects.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
      description: A set of action infos that the given action can be started with
    content.vb: Public Shared Function FindAllActionObjects(person As PersonLike, type As ActionType, map As Map = Nothing, position As Vector2? = Nothing) As IEnumerable(Of ActionInfo)
  overload: TinyLife.Actions.Action.FindAllActionObjects*
- uid: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean,System.Boolean)
  id: FindValidActionObjects(TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindValidActionObjects(PersonLike, ActionType, bool, Map, Vector2?, bool, bool, bool)
  nameWithType: Action.FindValidActionObjects(PersonLike, ActionType, bool, Map, Vector2?, bool, bool, bool)
  fullName: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.PersonLike, TinyLife.Actions.ActionType, bool, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, bool, bool, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns all <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> objects that are available to the given <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> for the given <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref>, and whose <xref href="TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> indicates that the actions are valid for execution.

    This method also checks <xref href="TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<ActionInfo> FindValidActionObjects(PersonLike person, ActionType type, bool automatic, Map map = null, Vector2? position = null, bool allowInappropriate = false, bool allowInvalid = false, bool checkRecentlyFailed = true)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person.
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action to start.
    - id: automatic
      type: System.Boolean
      description: Whether the action is considered to start automatically.
    - id: map
      type: TinyLife.World.Map
      description: The map to find objects on.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position to focus around when finding action objects.
    - id: allowInappropriate
      type: System.Boolean
      description: Whether to ignore the <xref href="TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere" data-throw-if-not-resolved="false"></xref> flag.
    - id: allowInvalid
      type: System.Boolean
      description: Whether invalid objects should also be returned.
    - id: checkRecentlyFailed
      type: System.Boolean
      description: Whether potential action objects at which the given <code class="paramref">type</code> has recently failed should be checked for and ignored (causing them to be skipped as part of the returned set of action infos)
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
      description: A set of action infos that the given action can be started with.
    content.vb: Public Shared Function FindValidActionObjects(person As PersonLike, type As ActionType, automatic As Boolean, map As Map = Nothing, position As Vector2? = Nothing, allowInappropriate As Boolean = False, allowInvalid As Boolean = False, checkRecentlyFailed As Boolean = True) As IEnumerable(Of ActionInfo)
  overload: TinyLife.Actions.Action.FindValidActionObjects*
  nameWithType.vb: Action.FindValidActionObjects(PersonLike, ActionType, Boolean, Map, Vector2?, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.PersonLike, TinyLife.Actions.ActionType, Boolean, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Boolean, Boolean, Boolean)
  name.vb: FindValidActionObjects(PersonLike, ActionType, Boolean, Map, Vector2?, Boolean, Boolean, Boolean)
- uid: TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  id: GetRandomValidArguments(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetRandomValidArguments(ActionType, ActionInfo, bool)
  nameWithType: Action.GetRandomValidArguments(ActionType, ActionInfo, bool)
  fullName: TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Attempts to find a random valid action variety from the <code class="paramref">type</code>'s <xref href="TinyLife.Actions.ActionType.TypeSettings.PossibleArguments" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static ActionArgument[] GetRandomValidArguments(ActionType type, ActionInfo info, bool automatic)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action type whose varieties to search.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: automatic
      type: System.Boolean
      description: Whether variety should be selected automatically.
    return:
      type: TinyLife.Actions.ActionArgument[]
      description: A set of action arguments, based on the rules defined in the documentation of <xref href="TinyLife.Actions.ActionType.TypeSettings.PossibleArguments" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetRandomValidArguments(type As ActionType, info As ActionInfo, automatic As Boolean) As ActionArgument()
  overload: TinyLife.Actions.Action.GetRandomValidArguments*
  nameWithType.vb: Action.GetRandomValidArguments(ActionType, ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean)
  name.vb: GetRandomValidArguments(ActionType, ActionInfo, Boolean)
- uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  id: GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetTableSpot(Furniture, ActionSpot)
  nameWithType: Action.GetTableSpot(Furniture, ActionSpot)
  fullName: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A helper method that returns the <xref href="TinyLife.Objects.ObjectSpot" data-throw-if-not-resolved="false"></xref> on the table or desk that the given chair is connected to.

    This is the object spot that should be used for interaction if a person sits on the given chair.
  example: []
  syntax:
    content: public static (Furniture Table, ObjectSpot Spot) GetTableSpot(Furniture chair, ActionSpot actionSpot = null)
    parameters:
    - id: chair
      type: TinyLife.Objects.Furniture
      description: The chair to get the table spot for
    - id: actionSpot
      type: TinyLife.Objects.ActionSpot
      description: The action spot on the <code class="paramref">chair</code> to get the table spot for
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
      description: The table spot, or null if there is none
    content.vb: Public Shared Function GetTableSpot(chair As Furniture, actionSpot As ActionSpot = Nothing) As (Table As Furniture, Spot As ObjectSpot)
  overload: TinyLife.Actions.Action.GetTableSpot*
- uid: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike,System.Action{TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike})
  commentId: M:TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike,System.Action{TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike})
  id: InvokeForBoth(TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike,System.Action{TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: InvokeForBoth(PersonLike, PersonLike, Action<PersonLike, PersonLike>)
  nameWithType: Action.InvokeForBoth(PersonLike, PersonLike, Action<PersonLike, PersonLike>)
  fullName: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.PersonLike, TinyLife.Objects.PersonLike, System.Action<TinyLife.Objects.PersonLike, TinyLife.Objects.PersonLike>)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Invokes the given action for two people while passing both of them, first as the main, and then as the second, parameter to the given <code class="paramref">action</code>.
  example: []
  syntax:
    content: public static void InvokeForBoth(PersonLike person, PersonLike other, Action<PersonLike, PersonLike> action)
    parameters:
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The first person.
    - id: other
      type: TinyLife.Objects.PersonLike
      description: The second person.
    - id: action
      type: System.Action{TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike}
      description: The action to invoke for both people passed.
    content.vb: Public Shared Sub InvokeForBoth(person As PersonLike, other As PersonLike, action As Action(Of PersonLike, PersonLike))
  overload: TinyLife.Actions.Action.InvokeForBoth*
  nameWithType.vb: Action.InvokeForBoth(PersonLike, PersonLike, Action(Of PersonLike, PersonLike))
  fullName.vb: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.PersonLike, TinyLife.Objects.PersonLike, System.Action(Of TinyLife.Objects.PersonLike, TinyLife.Objects.PersonLike))
  name.vb: InvokeForBoth(PersonLike, PersonLike, Action(Of PersonLike, PersonLike))
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A utility method that can be used whether the two <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref> instances can currently be invoked together.

    Internally, this checks if both actions return true on <xref href="TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool CanMultitask(Action a1, Action a2)
    parameters:
    - id: a1
      type: TinyLife.Actions.Action
      description: The first action
    - id: a2
      type: TinyLife.Actions.Action
      description: The second action
    return:
      type: System.Boolean
      description: Whether the two actions can be multi-tasked
    content.vb: Public Shared Function CanMultitask(a1 As Action, a2 As Action) As Boolean
  overload: TinyLife.Actions.Action.CanMultitask*
- uid: TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  id: IsInappropriate(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: IsInappropriate(ActionType, ActionInfo)
  nameWithType: Action.IsInappropriate(ActionType, ActionInfo)
  fullName: TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Checks whether the given action <code class="paramref">type</code> is inappropriate for execution using the given <code class="paramref">info</code>.

    The return value is based on <xref href="TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere" data-throw-if-not-resolved="false"></xref> and the <xref href="TinyLife.Actions.ActionInfo.Lot" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool IsInappropriate(ActionType type, ActionInfo info)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action type to execute.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    return:
      type: System.Boolean
      description: Whether the action is inappropriate here.
    content.vb: Public Shared Function IsInappropriate(type As ActionType, info As ActionInfo) As Boolean
  overload: TinyLife.Actions.Action.IsInappropriate*
- uid: TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot,TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  commentId: M:TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot,TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  id: IsLotContentVisible(TinyLife.World.Lot,TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: IsLotContentVisible(Lot, PersonLike, Map, Vector2?, bool)
  nameWithType: Action.IsLotContentVisible(Lot, PersonLike, Map, Vector2?, bool)
  fullName: TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot, TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    Returns whether the given content of the given <code class="paramref">lot</code> is currently visible to the given <code class="paramref">person</code>.

    If the <code class="paramref">lot</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, then comparisons are made to the lot at the given <code class="paramref">position</code>.
  example: []
  syntax:
    content: public static bool IsLotContentVisible(Lot lot, PersonLike person, Map map = null, Vector2? position = null, bool allowOffLot = false)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to query; can be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person.
    - id: map
      type: TinyLife.World.Map
      description: The map to use to query the <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref> that the <code class="paramref">position</code> is on. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, the <code class="paramref">person</code>'s map is used.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: An additional position that should be query if <code class="paramref">lot</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, the <code class="paramref">person</code>'s <xref href="TinyLife.Objects.MapObject.Position" data-throw-if-not-resolved="false"></xref> is used instead.
    - id: allowOffLot
      type: System.Boolean
      description: Whether objects that aren't on a lot should be considered visible.
    return:
      type: System.Boolean
      description: Whether the lot content on the <code class="paramref">lot</code> or at the <code class="paramref">position</code> is visible.
    content.vb: Public Shared Function IsLotContentVisible(lot As Lot, person As PersonLike, map As Map = Nothing, position As Vector2? = Nothing, allowOffLot As Boolean = False) As Boolean
  overload: TinyLife.Actions.Action.IsLotContentVisible*
  nameWithType.vb: Action.IsLotContentVisible(Lot, PersonLike, Map, Vector2?, Boolean)
  fullName.vb: TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot, TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Boolean)
  name.vb: IsLotContentVisible(Lot, PersonLike, Map, Vector2?, Boolean)
references:
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Objects.PersonLike.ActionQueue
  commentId: F:TinyLife.Objects.PersonLike.ActionQueue
  parent: TinyLife.Objects.PersonLike
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_ActionQueue
  name: ActionQueue
  nameWithType: PersonLike.ActionQueue
  fullName: TinyLife.Objects.PersonLike.ActionQueue
- uid: TinyLife.Objects.PersonLike.CurrentActions
  commentId: F:TinyLife.Objects.PersonLike.CurrentActions
  parent: TinyLife.Objects.PersonLike
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_CurrentActions
  name: CurrentActions
  nameWithType: PersonLike.CurrentActions
  fullName: TinyLife.Objects.PersonLike.CurrentActions
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  href: TinyLife.Actions.MultiAction.html
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: TinyLife.Objects.PersonLike.OnActionsCompleted
  commentId: E:TinyLife.Objects.PersonLike.OnActionsCompleted
  parent: TinyLife.Objects.PersonLike
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_OnActionsCompleted
  name: OnActionsCompleted
  nameWithType: PersonLike.OnActionsCompleted
  fullName: TinyLife.Objects.PersonLike.OnActionsCompleted
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<Action>(Action)
  nameWithType: Extensions.JsonCopy<Action>(Action)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Action>(TinyLife.Actions.Action)
  nameWithType.vb: Extensions.JsonCopy(Of Action)(Action)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Action)(TinyLife.Actions.Action)
  name.vb: JsonCopy(Of Action)(Action)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.Action)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.Action)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.Actions.Action.Random
  commentId: F:TinyLife.Actions.Action.Random
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Random
  name: Random
  nameWithType: Action.Random
  fullName: TinyLife.Actions.Action.Random
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.random
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  href: TinyLife.Actions.Action.html
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.ActionType.TypeSettings.Migrations
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Migrations
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_Migrations
  name: Migrations
  nameWithType: ActionType.TypeSettings.Migrations
  fullName: TinyLife.Actions.ActionType.TypeSettings.Migrations
- uid: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.Actions.Action}}
  commentId: T:System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.Actions.Action}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Migration<Action>>
  nameWithType: List<Migration<Action>>
  fullName: System.Collections.Generic.List<TinyLife.Utilities.Migration<TinyLife.Actions.Action>>
  nameWithType.vb: List(Of Migration(Of Action))
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Utilities.Migration(Of TinyLife.Actions.Action))
  name.vb: List(Of Migration(Of Action))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  commentId: M:TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Register_TinyLife_Actions_ActionType_TypeSettings_
  name: Register(TypeSettings)
  nameWithType: ActionType.Register(ActionType.TypeSettings)
  fullName: TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
    name: Register
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Register_TinyLife_Actions_ActionType_TypeSettings_
  - name: (
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
    name: Register
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Register_TinyLife_Actions_ActionType_TypeSettings_
  - name: (
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings
  commentId: T:TinyLife.Actions.ActionType.TypeSettings
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType.TypeSettings
  nameWithType: ActionType.TypeSettings
  fullName: TinyLife.Actions.ActionType.TypeSettings
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html
- uid: TinyLife.Actions.Action.ActionTypeConstructedDelegate
  commentId: T:TinyLife.Actions.Action.ActionTypeConstructedDelegate
  parent: TinyLife.Actions
  href: TinyLife.Actions.Action.html
  name: Action.ActionTypeConstructedDelegate
  nameWithType: Action.ActionTypeConstructedDelegate
  fullName: TinyLife.Actions.Action.ActionTypeConstructedDelegate
  spec.csharp:
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: .
  - uid: TinyLife.Actions.Action.ActionTypeConstructedDelegate
    name: ActionTypeConstructedDelegate
    href: TinyLife.Actions.Action.ActionTypeConstructedDelegate.html
  spec.vb:
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: .
  - uid: TinyLife.Actions.Action.ActionTypeConstructedDelegate
    name: ActionTypeConstructedDelegate
    href: TinyLife.Actions.Action.ActionTypeConstructedDelegate.html
- uid: TinyLife.Actions.SocialAction
  commentId: T:TinyLife.Actions.SocialAction
  parent: TinyLife.Actions
  href: TinyLife.Actions.SocialAction.html
  name: SocialAction
  nameWithType: SocialAction
  fullName: TinyLife.Actions.SocialAction
- uid: System.TimeSpan.Zero
  commentId: F:System.TimeSpan.Zero
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.zero
  name: Zero
  nameWithType: TimeSpan.Zero
  fullName: System.TimeSpan.Zero
- uid: TinyLife.Actions.Action.ElapsedTime
  commentId: P:TinyLife.Actions.Action.ElapsedTime
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_ElapsedTime
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
- uid: TinyLife.Actions.Action.InProgressTime*
  commentId: Overload:TinyLife.Actions.Action.InProgressTime
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_InProgressTime
  name: InProgressTime
  nameWithType: Action.InProgressTime
  fullName: TinyLife.Actions.Action.InProgressTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Actions.Action.FullyInProgress*
  commentId: Overload:TinyLife.Actions.Action.FullyInProgress
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FullyInProgress
  name: FullyInProgress
  nameWithType: Action.FullyInProgress
  fullName: TinyLife.Actions.Action.FullyInProgress
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionInfo.html
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: System.Guid.NewGuid
  commentId: M:System.Guid.NewGuid
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid.newguid
  name: NewGuid()
  nameWithType: Guid.NewGuid()
  fullName: System.Guid.NewGuid()
  spec.csharp:
  - uid: System.Guid.NewGuid
    name: NewGuid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid.newguid
  - name: (
  - name: )
  spec.vb:
  - uid: System.Guid.NewGuid
    name: NewGuid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid.newguid
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChildren(System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetChildren_System_Boolean_
  name: GetChildren(bool)
  nameWithType: Action.GetChildren(bool)
  fullName: TinyLife.Actions.Action.GetChildren(bool)
  nameWithType.vb: Action.GetChildren(Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChildren(Boolean)
  name.vb: GetChildren(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
    name: GetChildren
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetChildren_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
    name: GetChildren
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetChildren_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetChild__1_System_Guid_System_Boolean_
  name: GetChild<T>(Guid, bool)
  nameWithType: Action.GetChild<T>(Guid, bool)
  fullName: TinyLife.Actions.Action.GetChild<T>(System.Guid, bool)
  nameWithType.vb: Action.GetChild(Of T)(Guid, Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChild(Of T)(System.Guid, Boolean)
  name.vb: GetChild(Of T)(Guid, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
    name: GetChild
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetChild__1_System_Guid_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
    name: GetChild
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetChild__1_System_Guid_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.Person
  commentId: P:TinyLife.Actions.Action.Person
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Person
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
- uid: TinyLife.Objects.PersonLike.GetAction``1(System.Guid,System.Boolean)
  commentId: M:TinyLife.Objects.PersonLike.GetAction``1(System.Guid,System.Boolean)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetAction__1_System_Guid_System_Boolean_
  name: GetAction<T>(Guid, bool)
  nameWithType: PersonLike.GetAction<T>(Guid, bool)
  fullName: TinyLife.Objects.PersonLike.GetAction<T>(System.Guid, bool)
  nameWithType.vb: PersonLike.GetAction(Of T)(Guid, Boolean)
  fullName.vb: TinyLife.Objects.PersonLike.GetAction(Of T)(System.Guid, Boolean)
  name.vb: GetAction(Of T)(Guid, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.GetAction``1(System.Guid,System.Boolean)
    name: GetAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetAction__1_System_Guid_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.GetAction``1(System.Guid,System.Boolean)
    name: GetAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetAction__1_System_Guid_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonAi.html
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Actions.Action.StartedAutomatically*
  commentId: Overload:TinyLife.Actions.Action.StartedAutomatically
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_StartedAutomatically
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler
  commentId: T:TinyLife.Actions.Handlers.UnderlyingActionHandler
  href: TinyLife.Actions.Handlers.UnderlyingActionHandler.html
  name: UnderlyingActionHandler
  nameWithType: UnderlyingActionHandler
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler
- uid: TinyLife.Actions.Handlers.MultiActionHandler
  commentId: T:TinyLife.Actions.Handlers.MultiActionHandler
  parent: TinyLife.Actions.Handlers
  href: TinyLife.Actions.Handlers.MultiActionHandler.html
  name: MultiActionHandler
  nameWithType: MultiActionHandler
  fullName: TinyLife.Actions.Handlers.MultiActionHandler
- uid: TinyLife.Actions.Action.Parent*
  commentId: Overload:TinyLife.Actions.Action.Parent
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Parent
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
- uid: TinyLife.Actions.Handlers
  commentId: N:TinyLife.Actions.Handlers
  href: TinyLife.html
  name: TinyLife.Actions.Handlers
  nameWithType: TinyLife.Actions.Handlers
  fullName: TinyLife.Actions.Handlers
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
    href: TinyLife.Actions.Handlers.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
    href: TinyLife.Actions.Handlers.html
- uid: TinyLife.Actions.Action.Person*
  commentId: Overload:TinyLife.Actions.Action.Person
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Person
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
- uid: TinyLife.Actions.Action.ElapsedTime*
  commentId: Overload:TinyLife.Actions.Action.ElapsedTime
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_ElapsedTime
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
- uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel},MLEM.Textures.TextureRegion,System.Single)
  commentId: M:TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel},MLEM.Textures.TextureRegion,System.Single)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenPlayerPrompt_System_String_System_Predicate_MLEM_Ui_Elements_Panel__System_Action_MLEM_Ui_Elements_Panel__System_Boolean_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__MLEM_Textures_TextureRegion_System_Single_
  name: OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Action<CoveringGroup, Panel>, TextureRegion, float)
  nameWithType: Action.OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Action<CoveringGroup, Panel>, TextureRegion, float)
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt(string, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, bool, System.Action<TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel>, MLEM.Textures.TextureRegion, float)
  nameWithType.vb: Action.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Action(Of CoveringGroup, Panel), TextureRegion, Single)
  fullName.vb: TinyLife.Actions.Action.OpenPlayerPrompt(String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), Boolean, System.Action(Of TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel), MLEM.Textures.TextureRegion, Single)
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Action(Of CoveringGroup, Panel), TextureRegion, Single)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel},MLEM.Textures.TextureRegion,System.Single)
    name: OpenPlayerPrompt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenPlayerPrompt_System_String_System_Predicate_MLEM_Ui_Elements_Panel__System_Action_MLEM_Ui_Elements_Panel__System_Boolean_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__MLEM_Textures_TextureRegion_System_Single_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    href: TinyLife.Uis.CoveringGroup.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel},MLEM.Textures.TextureRegion,System.Single)
    name: OpenPlayerPrompt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenPlayerPrompt_System_String_System_Predicate_MLEM_Ui_Elements_Panel__System_Action_MLEM_Ui_Elements_Panel__System_Boolean_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__MLEM_Textures_TextureRegion_System_Single_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    href: TinyLife.Uis.CoveringGroup.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.Action.PlayerPromptOpen*
  commentId: Overload:TinyLife.Actions.Action.PlayerPromptOpen
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_PlayerPromptOpen
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
- uid: TinyLife.Actions.Action.#ctor*
  commentId: Overload:TinyLife.Actions.Action.#ctor
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action__ctor_TinyLife_Actions_ActionInfo_
  name: Action
  nameWithType: Action.Action
  fullName: TinyLife.Actions.Action.Action
  nameWithType.vb: Action.New
  fullName.vb: TinyLife.Actions.Action.New
  name.vb: New
- uid: TinyLife.Actions.Action.Initialize*
  commentId: Overload:TinyLife.Actions.Action.Initialize
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Initialize
  name: Initialize
  nameWithType: Action.Initialize
  fullName: TinyLife.Actions.Action.Initialize
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_ActionUpdate_TinyLife_Actions_Action_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_System_Boolean_
  name: ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, float, bool)
  nameWithType.vb: MapObject.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single, Boolean)
  name.vb: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_ActionUpdate_TinyLife_Actions_Action_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_ActionUpdate_TinyLife_Actions_Action_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  href: TinyLife.GameImpl.html#TinyLife_GameImpl_Speed
  name: Speed
  nameWithType: GameImpl.Speed
  fullName: TinyLife.GameImpl.Speed
- uid: TinyLife.Actions.Action.Update*
  commentId: Overload:TinyLife.Actions.Action.Update
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Update_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_
  name: Update
  nameWithType: Action.Update
  fullName: TinyLife.Actions.Action.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.MapObject.html
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Actions.CompletionType.Completed
  commentId: F:TinyLife.Actions.CompletionType.Completed
  href: TinyLife.Actions.CompletionType.html#TinyLife_Actions_CompletionType_Completed
  name: Completed
  nameWithType: CompletionType.Completed
  fullName: TinyLife.Actions.CompletionType.Completed
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OnCompleted_TinyLife_Actions_CompletionType_
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OnCompleted_TinyLife_Actions_CompletionType_
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OnCompleted_TinyLife_Actions_CompletionType_
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: )
- uid: TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Interrupt_TinyLife_Actions_CompletionType_
  name: Interrupt(CompletionType)
  nameWithType: Action.Interrupt(CompletionType)
  fullName: TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
    name: Interrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Interrupt_TinyLife_Actions_CompletionType_
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Interrupt(TinyLife.Actions.CompletionType)
    name: Interrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Interrupt_TinyLife_Actions_CompletionType_
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: )
- uid: TinyLife.Actions.CompletionType.Active
  commentId: F:TinyLife.Actions.CompletionType.Active
  href: TinyLife.Actions.CompletionType.html#TinyLife_Actions_CompletionType_Active
  name: Active
  nameWithType: CompletionType.Active
  fullName: TinyLife.Actions.CompletionType.Active
- uid: TinyLife.Actions.Action.IsCompleted*
  commentId: Overload:TinyLife.Actions.Action.IsCompleted
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsCompleted
  name: IsCompleted
  nameWithType: Action.IsCompleted
  fullName: TinyLife.Actions.Action.IsCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  href: TinyLife.Actions.CompletionType.html
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Action.IsCompleted
  commentId: M:TinyLife.Actions.Action.IsCompleted
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsCompleted
  name: IsCompleted()
  nameWithType: Action.IsCompleted()
  fullName: TinyLife.Actions.Action.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsCompleted
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsCompleted
  - name: (
  - name: )
- uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_OnActionCompleted_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  name: OnActionCompleted(Action, CompletionType, bool)
  nameWithType: MapObject.OnActionCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  nameWithType.vb: MapObject.OnActionCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnActionCompleted(Action, CompletionType, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_OnActionCompleted_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_OnActionCompleted_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.OnCompleted*
  commentId: Overload:TinyLife.Actions.Action.OnCompleted
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OnCompleted_TinyLife_Actions_CompletionType_
  name: OnCompleted
  nameWithType: Action.OnCompleted
  fullName: TinyLife.Actions.Action.OnCompleted
- uid: TinyLife.Actions.Action.Validate*
  commentId: Overload:TinyLife.Actions.Action.Validate
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Validate_TinyLife_Objects_PersonLike_TinyLife_Utilities_AppliedMigrations_
  name: Validate
  nameWithType: Action.Validate
  fullName: TinyLife.Actions.Action.Validate
- uid: TinyLife.Utilities.AppliedMigrations
  commentId: T:TinyLife.Utilities.AppliedMigrations
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.AppliedMigrations.html
  name: AppliedMigrations
  nameWithType: AppliedMigrations
  fullName: TinyLife.Utilities.AppliedMigrations
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanMultitask_TinyLife_Actions_Action_TinyLife_Actions_Action_
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanMultitask_TinyLife_Actions_Action_TinyLife_Actions_Action_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanMultitask_TinyLife_Actions_Action_TinyLife_Actions_Action_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
- uid: TinyLife.Actions.Action.CanMultitask*
  commentId: Overload:TinyLife.Actions.Action.CanMultitask
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanMultitask_TinyLife_Actions_Action_
  name: CanMultitask
  nameWithType: Action.CanMultitask
  fullName: TinyLife.Actions.Action.CanMultitask
- uid: TinyLife.Actions.Action.CanMultitaskResult
  commentId: T:TinyLife.Actions.Action.CanMultitaskResult
  parent: TinyLife.Actions
  href: TinyLife.Actions.Action.html
  name: Action.CanMultitaskResult
  nameWithType: Action.CanMultitaskResult
  fullName: TinyLife.Actions.Action.CanMultitaskResult
  spec.csharp:
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: .
  - uid: TinyLife.Actions.Action.CanMultitaskResult
    name: CanMultitaskResult
    href: TinyLife.Actions.Action.CanMultitaskResult.html
  spec.vb:
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: .
  - uid: TinyLife.Actions.Action.CanMultitaskResult
    name: CanMultitaskResult
    href: TinyLife.Actions.Action.CanMultitaskResult.html
- uid: TinyLife.Actions.Action.CanStartNow*
  commentId: Overload:TinyLife.Actions.Action.CanStartNow
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanStartNow
  name: CanStartNow
  nameWithType: Action.CanStartNow
  fullName: TinyLife.Actions.Action.CanStartNow
- uid: TinyLife.Objects.PersonLike.ActionInterruptAction(TinyLife.Actions.Action,TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.PersonLike.ActionInterruptAction(TinyLife.Actions.Action,TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_ActionInterruptAction_TinyLife_Actions_Action_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  name: ActionInterruptAction(Action, Action, CompletionType, bool)
  nameWithType: PersonLike.ActionInterruptAction(Action, Action, CompletionType, bool)
  fullName: TinyLife.Objects.PersonLike.ActionInterruptAction(TinyLife.Actions.Action, TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  nameWithType.vb: PersonLike.ActionInterruptAction(Action, Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Objects.PersonLike.ActionInterruptAction(TinyLife.Actions.Action, TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: ActionInterruptAction(Action, Action, CompletionType, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.ActionInterruptAction(TinyLife.Actions.Action,TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: ActionInterruptAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_ActionInterruptAction_TinyLife_Actions_Action_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.ActionInterruptAction(TinyLife.Actions.Action,TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: ActionInterruptAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_ActionInterruptAction_TinyLife_Actions_Action_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.CanActionInterrupt*
  commentId: Overload:TinyLife.Actions.Action.CanActionInterrupt
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanActionInterrupt_TinyLife_Actions_Action_
  name: CanActionInterrupt
  nameWithType: Action.CanActionInterrupt
  fullName: TinyLife.Actions.Action.CanActionInterrupt
- uid: TinyLife.Objects.PersonLike.GenericInterruptAction(TinyLife.Actions.Action,System.Boolean,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.PersonLike.GenericInterruptAction(TinyLife.Actions.Action,System.Boolean,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GenericInterruptAction_TinyLife_Actions_Action_System_Boolean_TinyLife_Actions_CompletionType_System_Boolean_
  name: GenericInterruptAction(Action, bool, CompletionType, bool)
  nameWithType: PersonLike.GenericInterruptAction(Action, bool, CompletionType, bool)
  fullName: TinyLife.Objects.PersonLike.GenericInterruptAction(TinyLife.Actions.Action, bool, TinyLife.Actions.CompletionType, bool)
  nameWithType.vb: PersonLike.GenericInterruptAction(Action, Boolean, CompletionType, Boolean)
  fullName.vb: TinyLife.Objects.PersonLike.GenericInterruptAction(TinyLife.Actions.Action, Boolean, TinyLife.Actions.CompletionType, Boolean)
  name.vb: GenericInterruptAction(Action, Boolean, CompletionType, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.GenericInterruptAction(TinyLife.Actions.Action,System.Boolean,TinyLife.Actions.CompletionType,System.Boolean)
    name: GenericInterruptAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GenericInterruptAction_TinyLife_Actions_Action_System_Boolean_TinyLife_Actions_CompletionType_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.GenericInterruptAction(TinyLife.Actions.Action,System.Boolean,TinyLife.Actions.CompletionType,System.Boolean)
    name: GenericInterruptAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GenericInterruptAction_TinyLife_Actions_Action_System_Boolean_TinyLife_Actions_CompletionType_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.CanGenericInterrupt*
  commentId: Overload:TinyLife.Actions.Action.CanGenericInterrupt
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanGenericInterrupt_System_Boolean_
  name: CanGenericInterrupt
  nameWithType: Action.CanGenericInterrupt
  fullName: TinyLife.Actions.Action.CanGenericInterrupt
- uid: TinyLife.Actions.Action.Type
  commentId: F:TinyLife.Actions.Action.Type
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Type
  name: Type
  nameWithType: Action.Type
  fullName: TinyLife.Actions.Action.Type
- uid: TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_IgnoreObjectConditions
  name: IgnoreObjectConditions
  nameWithType: ActionType.TypeSettings.IgnoreObjectConditions
  fullName: TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
- uid: TinyLife.Actions.Action.CanObjectInterrupt*
  commentId: Overload:TinyLife.Actions.Action.CanObjectInterrupt
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanObjectInterrupt_TinyLife_Objects_MapObject_TinyLife_Actions_CanExecuteResult_
  name: CanObjectInterrupt
  nameWithType: Action.CanObjectInterrupt
  fullName: TinyLife.Actions.Action.CanObjectInterrupt
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  href: TinyLife.Actions.CanExecuteResult.html
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)
  commentId: M:TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanGenericInterrupt_System_Boolean_
  name: CanGenericInterrupt(bool)
  nameWithType: Action.CanGenericInterrupt(bool)
  fullName: TinyLife.Actions.Action.CanGenericInterrupt(bool)
  nameWithType.vb: Action.CanGenericInterrupt(Boolean)
  fullName.vb: TinyLife.Actions.Action.CanGenericInterrupt(Boolean)
  name.vb: CanGenericInterrupt(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)
    name: CanGenericInterrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanGenericInterrupt_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanGenericInterrupt(System.Boolean)
    name: CanGenericInterrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanGenericInterrupt_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanActionInterrupt_TinyLife_Actions_Action_
  name: CanActionInterrupt(Action)
  nameWithType: Action.CanActionInterrupt(Action)
  fullName: TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
    name: CanActionInterrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanActionInterrupt_TinyLife_Actions_Action_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanActionInterrupt(TinyLife.Actions.Action)
    name: CanActionInterrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanActionInterrupt_TinyLife_Actions_Action_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
- uid: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
  commentId: M:TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanObjectInterrupt_TinyLife_Objects_MapObject_TinyLife_Actions_CanExecuteResult_
  name: CanObjectInterrupt(MapObject, CanExecuteResult)
  nameWithType: Action.CanObjectInterrupt(MapObject, CanExecuteResult)
  fullName: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject, TinyLife.Actions.CanExecuteResult)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
    name: CanObjectInterrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanObjectInterrupt_TinyLife_Objects_MapObject_TinyLife_Actions_CanExecuteResult_
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
    name: CanObjectInterrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanObjectInterrupt_TinyLife_Objects_MapObject_TinyLife_Actions_CanExecuteResult_
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: )
- uid: TinyLife.Actions.Action.Interrupt*
  commentId: Overload:TinyLife.Actions.Action.Interrupt
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Interrupt_TinyLife_Actions_CompletionType_
  name: Interrupt
  nameWithType: Action.Interrupt
  fullName: TinyLife.Actions.Action.Interrupt
- uid: TinyLife.Actions.Action.GetNextAction*
  commentId: Overload:TinyLife.Actions.Action.GetNextAction
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetNextAction_TinyLife_Actions_CompletionType_
  name: GetNextAction
  nameWithType: Action.GetNextAction
  fullName: TinyLife.Actions.Action.GetNextAction
- uid: TinyLife.Objects.MapObject.DrawIcon(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  commentId: M:TinyLife.Objects.MapObject.DrawIcon(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_DrawIcon_MLEM_Ui_Elements_Element_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_
  name: DrawIcon(Element, GameTime, SpriteBatch)
  nameWithType: MapObject.DrawIcon(Element, GameTime, SpriteBatch)
  fullName: TinyLife.Objects.MapObject.DrawIcon(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DrawIcon(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
    name: DrawIcon
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_DrawIcon_MLEM_Ui_Elements_Element_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DrawIcon(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
    name: DrawIcon
    href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_DrawIcon_MLEM_Ui_Elements_Element_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.Texture
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Texture
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_Texture
  name: Texture
  nameWithType: ActionType.TypeSettings.Texture
  fullName: TinyLife.Actions.ActionType.TypeSettings.Texture
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  isExternal: true
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  name: GetActionObject<T>(bool)
  nameWithType: ActionInfo.GetActionObject<T>(bool)
  fullName: TinyLife.Actions.ActionInfo.GetActionObject<T>(bool)
  nameWithType.vb: ActionInfo.GetActionObject(Of T)(Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetActionObject(Of T)(Boolean)
  name.vb: GetActionObject(Of T)(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetIconObject*
  commentId: Overload:TinyLife.Actions.Action.GetIconObject
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetIconObject
  name: GetIconObject
  nameWithType: Action.GetIconObject
  fullName: TinyLife.Actions.Action.GetIconObject
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: TinyLife.Actions.Action.GetExtraIcon*
  commentId: Overload:TinyLife.Actions.Action.GetExtraIcon
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetExtraIcon
  name: GetExtraIcon
  nameWithType: Action.GetExtraIcon
  fullName: TinyLife.Actions.Action.GetExtraIcon
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.GameSpeed.ExtremelyFast
  commentId: F:TinyLife.GameSpeed.ExtremelyFast
  href: TinyLife.GameSpeed.html#TinyLife_GameSpeed_ExtremelyFast
  name: ExtremelyFast
  nameWithType: GameSpeed.ExtremelyFast
  fullName: TinyLife.GameSpeed.ExtremelyFast
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed*
  commentId: Overload:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CausesExtremelyFastSpeed
  name: CausesExtremelyFastSpeed
  nameWithType: Action.CausesExtremelyFastSpeed
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed
- uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetDisplayName_TinyLife_Actions_ActionInfo_System_Boolean_
  name: GetDisplayName(ActionInfo, bool)
  nameWithType: ActionType.GetDisplayName(ActionInfo, bool)
  fullName: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: ActionType.GetDisplayName(ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo, Boolean)
  name.vb: GetDisplayName(ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetDisplayName
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetDisplayName_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetDisplayName
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetDisplayName_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetDisplayName*
  commentId: Overload:TinyLife.Actions.Action.GetDisplayName
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetDisplayName
  name: GetDisplayName
  nameWithType: Action.GetDisplayName
  fullName: TinyLife.Actions.Action.GetDisplayName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.Actions.SleepAction
  commentId: T:TinyLife.Actions.SleepAction
  name: SleepAction
  nameWithType: SleepAction
  fullName: TinyLife.Actions.SleepAction
- uid: TinyLife.Actions.Action.CanEnqueueConversation*
  commentId: Overload:TinyLife.Actions.Action.CanEnqueueConversation
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanEnqueueConversation_TinyLife_Objects_PersonLike_TinyLife_Actions_ActionType_
  name: CanEnqueueConversation
  nameWithType: Action.CanEnqueueConversation
  fullName: TinyLife.Actions.Action.CanEnqueueConversation
- uid: TinyLife.Actions.Action.GetProgress*
  commentId: Overload:TinyLife.Actions.Action.GetProgress
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetProgress
  name: GetProgress
  nameWithType: Action.GetProgress
  fullName: TinyLife.Actions.Action.GetProgress
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OnChildCompleted_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  name: OnChildCompleted(Action, CompletionType, bool)
  nameWithType: Action.OnChildCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  nameWithType.vb: Action.OnChildCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnChildCompleted(Action, CompletionType, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnChildCompleted
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OnChildCompleted_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnChildCompleted
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OnChildCompleted_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    href: TinyLife.Actions.CompletionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.Parent
  commentId: P:TinyLife.Actions.Action.Parent
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Parent
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
- uid: TinyLife.Actions.Action.OnChildCompleted*
  commentId: Overload:TinyLife.Actions.Action.OnChildCompleted
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OnChildCompleted_TinyLife_Actions_Action_TinyLife_Actions_CompletionType_System_Boolean_
  name: OnChildCompleted
  nameWithType: Action.OnChildCompleted
  fullName: TinyLife.Actions.Action.OnChildCompleted
- uid: TinyLife.Actions.ActionType.QuitJob
  commentId: F:TinyLife.Actions.ActionType.QuitJob
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_QuitJob
  name: QuitJob
  nameWithType: ActionType.QuitJob
  fullName: TinyLife.Actions.ActionType.QuitJob
- uid: TinyLife.Actions.Action.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Action.PlayerPromptOpen
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_PlayerPromptOpen
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
- uid: TinyLife.GameImpl.CurrentHousehold
  commentId: P:TinyLife.GameImpl.CurrentHousehold
  href: TinyLife.GameImpl.html#TinyLife_GameImpl_CurrentHousehold
  name: CurrentHousehold
  nameWithType: GameImpl.CurrentHousehold
  fullName: TinyLife.GameImpl.CurrentHousehold
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: TinyLife.Actions.Action.OpenPlayerPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenPlayerPrompt
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenPlayerPrompt_System_String_System_Predicate_MLEM_Ui_Elements_Panel__System_Action_MLEM_Ui_Elements_Panel__System_Boolean_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__MLEM_Textures_TextureRegion_System_Single_
  name: OpenPlayerPrompt
  nameWithType: Action.OpenPlayerPrompt
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt
- uid: System.Predicate{MLEM.Ui.Elements.Panel}
  commentId: T:System.Predicate{MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<Panel>
  nameWithType: Predicate<Panel>
  fullName: System.Predicate<MLEM.Ui.Elements.Panel>
  nameWithType.vb: Predicate(Of Panel)
  fullName.vb: System.Predicate(Of MLEM.Ui.Elements.Panel)
  name.vb: Predicate(Of Panel)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
- uid: System.Action{MLEM.Ui.Elements.Panel}
  commentId: T:System.Action{MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<Panel>
  nameWithType: Action<Panel>
  fullName: System.Action<MLEM.Ui.Elements.Panel>
  nameWithType.vb: Action(Of Panel)
  fullName.vb: System.Action(Of MLEM.Ui.Elements.Panel)
  name.vb: Action(Of Panel)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
- uid: System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel}
  commentId: T:System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<CoveringGroup, Panel>
  nameWithType: Action<CoveringGroup, Panel>
  fullName: System.Action<TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel>
  nameWithType.vb: Action(Of CoveringGroup, Panel)
  fullName.vb: System.Action(Of TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel)
  name.vb: Action(Of CoveringGroup, Panel)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    href: TinyLife.Uis.CoveringGroup.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    href: TinyLife.Uis.CoveringGroup.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
- uid: TinyLife.Uis.CoveringGroup
  commentId: T:TinyLife.Uis.CoveringGroup
  parent: TinyLife.Uis
  href: TinyLife.Uis.CoveringGroup.html
  name: CoveringGroup
  nameWithType: CoveringGroup
  fullName: TinyLife.Uis.CoveringGroup
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  href: TinyLife.html
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Uis
    name: Uis
    href: TinyLife.Uis.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Uis
    name: Uis
    href: TinyLife.Uis.html
- uid: TinyLife.Actions.Action.OpenYesNoPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenYesNoPrompt
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenYesNoPrompt_System_String_System_Action_System_Action_MLEM_Textures_TextureRegion_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__
  name: OpenYesNoPrompt
  nameWithType: Action.OpenYesNoPrompt
  fullName: TinyLife.Actions.Action.OpenYesNoPrompt
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: MLEM.Ui.Elements.TextField
  commentId: T:MLEM.Ui.Elements.TextField
  isExternal: true
  name: TextField
  nameWithType: TextField
  fullName: MLEM.Ui.Elements.TextField
- uid: TinyLife.Actions.Action.OpenTextPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenTextPrompt
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenTextPrompt_System_String_System_Action_System_String__System_Predicate_System_String__MLEM_Ui_Elements_TextField_Rule_System_String_System_Boolean_System_Nullable_System_Int32__MLEM_Textures_TextureRegion_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__
  name: OpenTextPrompt
  nameWithType: Action.OpenTextPrompt
  fullName: TinyLife.Actions.Action.OpenTextPrompt
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<string>
  nameWithType: Action<string>
  fullName: System.Action<string>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Predicate{System.String}
  commentId: T:System.Predicate{System.String}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<string>
  nameWithType: Predicate<string>
  fullName: System.Predicate<string>
  nameWithType.vb: Predicate(Of String)
  fullName.vb: System.Predicate(Of String)
  name.vb: Predicate(Of String)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Ui.Elements.TextField.Rule
  commentId: T:MLEM.Ui.Elements.TextField.Rule
  parent: MLEM.Ui.Elements
  isExternal: true
  name: TextField.Rule
  nameWithType: TextField.Rule
  fullName: MLEM.Ui.Elements.TextField.Rule
  spec.csharp:
  - uid: MLEM.Ui.Elements.TextField
    name: TextField
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
  spec.vb:
  - uid: MLEM.Ui.Elements.TextField
    name: TextField
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,System.Boolean,System.Nullable{System.Int32},MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  commentId: M:TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,System.Boolean,System.Nullable{System.Int32},MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenTextPrompt_System_String_System_Action_System_String__System_Predicate_System_String__MLEM_Ui_Elements_TextField_Rule_System_String_System_Boolean_System_Nullable_System_Int32__MLEM_Textures_TextureRegion_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__
  name: OpenTextPrompt(string, Action<string>, Predicate<string>, Rule, string, bool, int?, TextureRegion, Action<CoveringGroup, Panel>)
  nameWithType: Action.OpenTextPrompt(string, Action<string>, Predicate<string>, TextField.Rule, string, bool, int?, TextureRegion, Action<CoveringGroup, Panel>)
  fullName: TinyLife.Actions.Action.OpenTextPrompt(string, System.Action<string>, System.Predicate<string>, MLEM.Ui.Elements.TextField.Rule, string, bool, int?, MLEM.Textures.TextureRegion, System.Action<TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel>)
  nameWithType.vb: Action.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String, Boolean, Integer?, TextureRegion, Action(Of CoveringGroup, Panel))
  fullName.vb: TinyLife.Actions.Action.OpenTextPrompt(String, System.Action(Of String), System.Predicate(Of String), MLEM.Ui.Elements.TextField.Rule, String, Boolean, Integer?, MLEM.Textures.TextureRegion, System.Action(Of TinyLife.Uis.CoveringGroup, MLEM.Ui.Elements.Panel))
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), Rule, String, Boolean, Integer?, TextureRegion, Action(Of CoveringGroup, Panel))
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,System.Boolean,System.Nullable{System.Int32},MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
    name: OpenTextPrompt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenTextPrompt_System_String_System_Action_System_String__System_Predicate_System_String__MLEM_Ui_Elements_TextField_Rule_System_String_System_Boolean_System_Nullable_System_Int32__MLEM_Textures_TextureRegion_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    href: TinyLife.Uis.CoveringGroup.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,System.Boolean,System.Nullable{System.Int32},MLEM.Textures.TextureRegion,System.Action{TinyLife.Uis.CoveringGroup,MLEM.Ui.Elements.Panel})
    name: OpenTextPrompt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenTextPrompt_System_String_System_Action_System_String__System_Predicate_System_String__MLEM_Ui_Elements_TextField_Rule_System_String_System_Boolean_System_Nullable_System_Int32__MLEM_Textures_TextureRegion_System_Action_TinyLife_Uis_CoveringGroup_MLEM_Ui_Elements_Panel__
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    href: TinyLife.Uis.CoveringGroup.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
  - name: )
- uid: TinyLife.Actions.ChoicePromptInfo
  commentId: T:TinyLife.Actions.ChoicePromptInfo
  parent: TinyLife.Actions
  href: TinyLife.Actions.ChoicePromptInfo.html
  name: ChoicePromptInfo
  nameWithType: ChoicePromptInfo
  fullName: TinyLife.Actions.ChoicePromptInfo
- uid: TinyLife.Actions.Action.OpenChoicePrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenChoicePrompt
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_OpenChoicePrompt_TinyLife_Actions_ChoicePromptInfo_
  name: OpenChoicePrompt
  nameWithType: Action.OpenChoicePrompt
  fullName: TinyLife.Actions.Action.OpenChoicePrompt
- uid: TinyLife.Actions.ActionType.PracticeJokes
  commentId: F:TinyLife.Actions.ActionType.PracticeJokes
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_PracticeJokes
  name: PracticeJokes
  nameWithType: ActionType.PracticeJokes
  fullName: TinyLife.Actions.ActionType.PracticeJokes
- uid: TinyLife.Actions.ActionType.PracticeSpeech
  commentId: F:TinyLife.Actions.ActionType.PracticeSpeech
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_PracticeSpeech
  name: PracticeSpeech
  nameWithType: ActionType.PracticeSpeech
  fullName: TinyLife.Actions.ActionType.PracticeSpeech
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32.maxvalue
  name: MaxValue
  nameWithType: int.MaxValue
  fullName: int.MaxValue
  nameWithType.vb: Integer.MaxValue
  fullName.vb: Integer.MaxValue
- uid: TinyLife.Actions.Action.SpeakAlone*
  commentId: Overload:TinyLife.Actions.Action.SpeakAlone
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_SpeakAlone_Microsoft_Xna_Framework_GameTime_System_Single_System_Nullable_TinyLife_Actions_EmoteChoices__TinyLife_Objects_SpeakStyle_System_Int32_System_Single_System_Single_System_Single_System_Single_System_Nullable_TinyLife_Actions_EmoteBubbleType__
  name: SpeakAlone
  nameWithType: Action.SpeakAlone
  fullName: TinyLife.Actions.Action.SpeakAlone
- uid: System.Nullable{TinyLife.Actions.EmoteChoices}
  commentId: T:System.Nullable{TinyLife.Actions.EmoteChoices}
  parent: System
  definition: System.Nullable`1
  href: TinyLife.Actions.EmoteChoices.html
  name: EmoteChoices?
  nameWithType: EmoteChoices?
  fullName: TinyLife.Actions.EmoteChoices?
  spec.csharp:
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '?'
  spec.vb:
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '?'
- uid: TinyLife.Objects.SpeakStyle
  commentId: T:TinyLife.Objects.SpeakStyle
  parent: TinyLife.Objects
  href: TinyLife.Objects.SpeakStyle.html
  name: SpeakStyle
  nameWithType: SpeakStyle
  fullName: TinyLife.Objects.SpeakStyle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Nullable{TinyLife.Actions.EmoteBubbleType}
  commentId: T:System.Nullable{TinyLife.Actions.EmoteBubbleType}
  parent: System
  definition: System.Nullable`1
  href: TinyLife.Actions.EmoteBubbleType.html
  name: EmoteBubbleType?
  nameWithType: EmoteBubbleType?
  fullName: TinyLife.Actions.EmoteBubbleType?
  spec.csharp:
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  spec.vb:
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
- uid: TinyLife.Actions.ActionType.Sleep
  commentId: F:TinyLife.Actions.ActionType.Sleep
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Sleep
  name: Sleep
  nameWithType: ActionType.Sleep
  fullName: TinyLife.Actions.ActionType.Sleep
- uid: TinyLife.Actions.Action.ThinkAlone*
  commentId: Overload:TinyLife.Actions.Action.ThinkAlone
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_ThinkAlone_Microsoft_Xna_Framework_GameTime_System_Single_TinyLife_Actions_EmoteChoices_System_Single_System_Single_System_Single_System_Single_System_Int32_System_Nullable_TinyLife_Actions_EmoteBubbleType__
  name: ThinkAlone
  nameWithType: Action.ThinkAlone
  fullName: TinyLife.Actions.Action.ThinkAlone
- uid: TinyLife.Actions.EmoteChoices
  commentId: T:TinyLife.Actions.EmoteChoices
  parent: TinyLife.Actions
  href: TinyLife.Actions.EmoteChoices.html
  name: EmoteChoices
  nameWithType: EmoteChoices
  fullName: TinyLife.Actions.EmoteChoices
- uid: TinyLife.Actions.SocialAction.IsMain
  commentId: P:TinyLife.Actions.SocialAction.IsMain
  parent: TinyLife.Actions.SocialAction
  href: TinyLife.Actions.SocialAction.html#TinyLife_Actions_SocialAction_IsMain
  name: IsMain
  nameWithType: SocialAction.IsMain
  fullName: TinyLife.Actions.SocialAction.IsMain
- uid: TinyLife.Actions.Action.SpeakInConversation*
  commentId: Overload:TinyLife.Actions.Action.SpeakInConversation
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_SpeakInConversation_TinyLife_Objects_PersonLike_Microsoft_Xna_Framework_GameTime_System_Single_System_Nullable_TinyLife_Actions_EmoteChoices__TinyLife_Objects_SpeakStyle_System_Nullable_TinyLife_Actions_EmoteChoices__System_Nullable_TinyLife_Objects_SpeakStyle__System_Int32_System_Single_System_Single_System_Single_System_Single_System_Nullable_TinyLife_Actions_EmoteBubbleType__System_Nullable_TinyLife_Actions_EmoteBubbleType__
  name: SpeakInConversation
  nameWithType: Action.SpeakInConversation
  fullName: TinyLife.Actions.Action.SpeakInConversation
- uid: System.Nullable{TinyLife.Objects.SpeakStyle}
  commentId: T:System.Nullable{TinyLife.Objects.SpeakStyle}
  parent: System
  definition: System.Nullable`1
  href: TinyLife.Objects.SpeakStyle.html
  name: SpeakStyle?
  nameWithType: SpeakStyle?
  fullName: TinyLife.Objects.SpeakStyle?
  spec.csharp:
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    href: TinyLife.Objects.SpeakStyle.html
  - name: '?'
  spec.vb:
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    href: TinyLife.Objects.SpeakStyle.html
  - name: '?'
- uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  commentId: M:TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_SpeakAlone_Microsoft_Xna_Framework_GameTime_System_Single_System_Nullable_TinyLife_Actions_EmoteChoices__TinyLife_Objects_SpeakStyle_System_Int32_System_Single_System_Single_System_Single_System_Single_System_Nullable_TinyLife_Actions_EmoteBubbleType__
  name: SpeakAlone(GameTime, float, EmoteChoices?, SpeakStyle, int, float, float, float, float, EmoteBubbleType?)
  nameWithType: Action.SpeakAlone(GameTime, float, EmoteChoices?, SpeakStyle, int, float, float, float, float, EmoteBubbleType?)
  fullName: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle, int, float, float, float, float, TinyLife.Actions.EmoteBubbleType?)
  nameWithType.vb: Action.SpeakAlone(GameTime, Single, EmoteChoices?, SpeakStyle, Integer, Single, Single, Single, Single, EmoteBubbleType?)
  fullName.vb: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle, Integer, Single, Single, Single, Single, TinyLife.Actions.EmoteBubbleType?)
  name.vb: SpeakAlone(GameTime, Single, EmoteChoices?, SpeakStyle, Integer, Single, Single, Single, Single, EmoteBubbleType?)
  spec.csharp:
  - uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType})
    name: SpeakAlone
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_SpeakAlone_Microsoft_Xna_Framework_GameTime_System_Single_System_Nullable_TinyLife_Actions_EmoteChoices__TinyLife_Objects_SpeakStyle_System_Int32_System_Single_System_Single_System_Single_System_Single_System_Nullable_TinyLife_Actions_EmoteBubbleType__
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    href: TinyLife.Objects.SpeakStyle.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType})
    name: SpeakAlone
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_SpeakAlone_Microsoft_Xna_Framework_GameTime_System_Single_System_Nullable_TinyLife_Actions_EmoteChoices__TinyLife_Objects_SpeakStyle_System_Int32_System_Single_System_Single_System_Single_System_Single_System_Nullable_TinyLife_Actions_EmoteBubbleType__
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    href: TinyLife.Objects.SpeakStyle.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  - name: )
- uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike,Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteChoices},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType},System.Nullable{TinyLife.Actions.EmoteBubbleType})
  commentId: M:TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike,Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteChoices},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType},System.Nullable{TinyLife.Actions.EmoteBubbleType})
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_SpeakInConversation_TinyLife_Objects_PersonLike_Microsoft_Xna_Framework_GameTime_System_Single_System_Nullable_TinyLife_Actions_EmoteChoices__TinyLife_Objects_SpeakStyle_System_Nullable_TinyLife_Actions_EmoteChoices__System_Nullable_TinyLife_Objects_SpeakStyle__System_Int32_System_Single_System_Single_System_Single_System_Single_System_Nullable_TinyLife_Actions_EmoteBubbleType__System_Nullable_TinyLife_Actions_EmoteBubbleType__
  name: SpeakInConversation(PersonLike, GameTime, float, EmoteChoices?, SpeakStyle, EmoteChoices?, SpeakStyle?, int, float, float, float, float, EmoteBubbleType?, EmoteBubbleType?)
  nameWithType: Action.SpeakInConversation(PersonLike, GameTime, float, EmoteChoices?, SpeakStyle, EmoteChoices?, SpeakStyle?, int, float, float, float, float, EmoteBubbleType?, EmoteBubbleType?)
  fullName: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike, Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle?, int, float, float, float, float, TinyLife.Actions.EmoteBubbleType?, TinyLife.Actions.EmoteBubbleType?)
  nameWithType.vb: Action.SpeakInConversation(PersonLike, GameTime, Single, EmoteChoices?, SpeakStyle, EmoteChoices?, SpeakStyle?, Integer, Single, Single, Single, Single, EmoteBubbleType?, EmoteBubbleType?)
  fullName.vb: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike, Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle, TinyLife.Actions.EmoteChoices?, TinyLife.Objects.SpeakStyle?, Integer, Single, Single, Single, Single, TinyLife.Actions.EmoteBubbleType?, TinyLife.Actions.EmoteBubbleType?)
  name.vb: SpeakInConversation(PersonLike, GameTime, Single, EmoteChoices?, SpeakStyle, EmoteChoices?, SpeakStyle?, Integer, Single, Single, Single, Single, EmoteBubbleType?, EmoteBubbleType?)
  spec.csharp:
  - uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike,Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteChoices},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType},System.Nullable{TinyLife.Actions.EmoteBubbleType})
    name: SpeakInConversation
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_SpeakInConversation_TinyLife_Objects_PersonLike_Microsoft_Xna_Framework_GameTime_System_Single_System_Nullable_TinyLife_Actions_EmoteChoices__TinyLife_Objects_SpeakStyle_System_Nullable_TinyLife_Actions_EmoteChoices__System_Nullable_TinyLife_Objects_SpeakStyle__System_Int32_System_Single_System_Single_System_Single_System_Single_System_Nullable_TinyLife_Actions_EmoteBubbleType__System_Nullable_TinyLife_Actions_EmoteBubbleType__
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    href: TinyLife.Objects.SpeakStyle.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    href: TinyLife.Objects.SpeakStyle.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.PersonLike,Microsoft.Xna.Framework.GameTime,System.Single,System.Nullable{TinyLife.Actions.EmoteChoices},TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteChoices},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32,System.Single,System.Single,System.Single,System.Single,System.Nullable{TinyLife.Actions.EmoteBubbleType},System.Nullable{TinyLife.Actions.EmoteBubbleType})
    name: SpeakInConversation
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_SpeakInConversation_TinyLife_Objects_PersonLike_Microsoft_Xna_Framework_GameTime_System_Single_System_Nullable_TinyLife_Actions_EmoteChoices__TinyLife_Objects_SpeakStyle_System_Nullable_TinyLife_Actions_EmoteChoices__System_Nullable_TinyLife_Objects_SpeakStyle__System_Int32_System_Single_System_Single_System_Single_System_Single_System_Nullable_TinyLife_Actions_EmoteBubbleType__System_Nullable_TinyLife_Actions_EmoteBubbleType__
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    href: TinyLife.Objects.SpeakStyle.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    href: TinyLife.Objects.SpeakStyle.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  - name: )
- uid: TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteChoices,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  commentId: M:TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteChoices,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Nullable{TinyLife.Actions.EmoteBubbleType})
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_ThinkAlone_Microsoft_Xna_Framework_GameTime_System_Single_TinyLife_Actions_EmoteChoices_System_Single_System_Single_System_Single_System_Single_System_Int32_System_Nullable_TinyLife_Actions_EmoteBubbleType__
  name: ThinkAlone(GameTime, float, EmoteChoices, float, float, float, float, int, EmoteBubbleType?)
  nameWithType: Action.ThinkAlone(GameTime, float, EmoteChoices, float, float, float, float, int, EmoteBubbleType?)
  fullName: TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteChoices, float, float, float, float, int, TinyLife.Actions.EmoteBubbleType?)
  nameWithType.vb: Action.ThinkAlone(GameTime, Single, EmoteChoices, Single, Single, Single, Single, Integer, EmoteBubbleType?)
  fullName.vb: TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteChoices, Single, Single, Single, Single, Integer, TinyLife.Actions.EmoteBubbleType?)
  name.vb: ThinkAlone(GameTime, Single, EmoteChoices, Single, Single, Single, Single, Integer, EmoteBubbleType?)
  spec.csharp:
  - uid: TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteChoices,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Nullable{TinyLife.Actions.EmoteBubbleType})
    name: ThinkAlone
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_ThinkAlone_Microsoft_Xna_Framework_GameTime_System_Single_TinyLife_Actions_EmoteChoices_System_Single_System_Single_System_Single_System_Single_System_Int32_System_Nullable_TinyLife_Actions_EmoteBubbleType__
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.ThinkAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteChoices,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Nullable{TinyLife.Actions.EmoteBubbleType})
    name: ThinkAlone
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_ThinkAlone_Microsoft_Xna_Framework_GameTime_System_Single_TinyLife_Actions_EmoteChoices_System_Single_System_Single_System_Single_System_Single_System_Int32_System_Nullable_TinyLife_Actions_EmoteBubbleType__
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteChoices
    name: EmoteChoices
    href: TinyLife.Actions.EmoteChoices.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteBubbleType
    name: EmoteBubbleType
    href: TinyLife.Actions.EmoteBubbleType.html
  - name: '?'
  - name: )
- uid: TinyLife.Actions.Action.ResetSpeech*
  commentId: Overload:TinyLife.Actions.Action.ResetSpeech
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_ResetSpeech
  name: ResetSpeech
  nameWithType: Action.ResetSpeech
  fullName: TinyLife.Actions.Action.ResetSpeech
- uid: TinyLife.Need
  commentId: T:TinyLife.Need
  href: TinyLife.Need.html
  name: Need
  nameWithType: Need
  fullName: TinyLife.Need
- uid: TinyLife.Need.Max
  commentId: F:TinyLife.Need.Max
  href: TinyLife.Need.html#TinyLife_Need_Max
  name: Max
  nameWithType: Need.Max
  fullName: TinyLife.Need.Max
- uid: TinyLife.Actions.Action.CompleteIfNeedFull*
  commentId: Overload:TinyLife.Actions.Action.CompleteIfNeedFull
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CompleteIfNeedFull_TinyLife_NeedType_TinyLife_Objects_PersonLike_
  name: CompleteIfNeedFull
  nameWithType: Action.CompleteIfNeedFull
  fullName: TinyLife.Actions.Action.CompleteIfNeedFull
- uid: TinyLife.NeedType
  commentId: T:TinyLife.NeedType
  parent: TinyLife
  href: TinyLife.NeedType.html
  name: NeedType
  nameWithType: NeedType
  fullName: TinyLife.NeedType
- uid: TinyLife
  commentId: N:TinyLife
  href: TinyLife.html
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Objects.PersonLike.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.PersonLike.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetEfficiencyModifier_System_Single_TinyLife_Actions_ActionInfo_TinyLife_Skills_SkillType_System_Single_
  name: GetEfficiencyModifier(float, ActionInfo, SkillType, float)
  nameWithType: PersonLike.GetEfficiencyModifier(float, ActionInfo, SkillType, float)
  fullName: TinyLife.Objects.PersonLike.GetEfficiencyModifier(float, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, float)
  nameWithType.vb: PersonLike.GetEfficiencyModifier(Single, ActionInfo, SkillType, Single)
  fullName.vb: TinyLife.Objects.PersonLike.GetEfficiencyModifier(Single, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, Single)
  name.vb: GetEfficiencyModifier(Single, ActionInfo, SkillType, Single)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetEfficiencyModifier_System_Single_TinyLife_Actions_ActionInfo_TinyLife_Skills_SkillType_System_Single_
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    href: TinyLife.Skills.SkillType.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_GetEfficiencyModifier_System_Single_TinyLife_Actions_ActionInfo_TinyLife_Skills_SkillType_System_Single_
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    href: TinyLife.Skills.SkillType.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_StartedAutomatically
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: TinyLife.Actions.Action.CompleteIfTimeUp*
  commentId: Overload:TinyLife.Actions.Action.CompleteIfTimeUp
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CompleteIfTimeUp_System_TimeSpan_System_Boolean_TinyLife_Skills_SkillType_System_Single_System_Boolean_
  name: CompleteIfTimeUp
  nameWithType: Action.CompleteIfTimeUp
  fullName: TinyLife.Actions.Action.CompleteIfTimeUp
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  href: TinyLife.Skills.SkillType.html
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  href: TinyLife.html
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Skills
    name: Skills
    href: TinyLife.Skills.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Skills
    name: Skills
    href: TinyLife.Skills.html
- uid: TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan,System.TimeSpan)
  commentId: M:TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan,System.TimeSpan)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetRandomCompletionTime_System_TimeSpan_System_TimeSpan_
  name: GetRandomCompletionTime(TimeSpan, TimeSpan)
  nameWithType: Action.GetRandomCompletionTime(TimeSpan, TimeSpan)
  fullName: TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan,System.TimeSpan)
    name: GetRandomCompletionTime
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetRandomCompletionTime_System_TimeSpan_System_TimeSpan_
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetRandomCompletionTime(System.TimeSpan,System.TimeSpan)
    name: GetRandomCompletionTime
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetRandomCompletionTime_System_TimeSpan_System_TimeSpan_
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: )
- uid: TinyLife.Actions.Action.Id
  commentId: F:TinyLife.Actions.Action.Id
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Id
  name: Id
  nameWithType: Action.Id
  fullName: TinyLife.Actions.Action.Id
- uid: MLEM.Maths.SeedSource
  commentId: T:MLEM.Maths.SeedSource
  isExternal: true
  name: SeedSource
  nameWithType: SeedSource
  fullName: MLEM.Maths.SeedSource
- uid: TinyLife.Actions.Action.GetRandomCompletionTime*
  commentId: Overload:TinyLife.Actions.Action.GetRandomCompletionTime
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetRandomCompletionTime_System_TimeSpan_System_TimeSpan_
  name: GetRandomCompletionTime
  nameWithType: Action.GetRandomCompletionTime
  fullName: TinyLife.Actions.Action.GetRandomCompletionTime
- uid: TinyLife.Actions.CompletionType.Canceled
  commentId: F:TinyLife.Actions.CompletionType.Canceled
  href: TinyLife.Actions.CompletionType.html#TinyLife_Actions_CompletionType_Canceled
  name: Canceled
  nameWithType: CompletionType.Canceled
  fullName: TinyLife.Actions.CompletionType.Canceled
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: TinyLife.Actions.Action.CancelIfEmotional*
  commentId: Overload:TinyLife.Actions.Action.CancelIfEmotional
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CancelIfEmotional_TinyLife_Emotions_EmotionType___
  name: CancelIfEmotional
  nameWithType: Action.CancelIfEmotional
  fullName: TinyLife.Actions.Action.CancelIfEmotional
- uid: TinyLife.Emotions.EmotionType[]
  isExternal: true
  href: TinyLife.Emotions.EmotionType.html
  name: EmotionType[]
  nameWithType: EmotionType[]
  fullName: TinyLife.Emotions.EmotionType[]
  nameWithType.vb: EmotionType()
  fullName.vb: TinyLife.Emotions.EmotionType()
  name.vb: EmotionType()
  spec.csharp:
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
    href: TinyLife.Emotions.EmotionType.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
    href: TinyLife.Emotions.EmotionType.html
  - name: (
  - name: )
- uid: TinyLife.Objects.PersonLike.CurrentPose
  commentId: F:TinyLife.Objects.PersonLike.CurrentPose
  parent: TinyLife.Objects.PersonLike
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_CurrentPose
  name: CurrentPose
  nameWithType: PersonLike.CurrentPose
  fullName: TinyLife.Objects.PersonLike.CurrentPose
- uid: TinyLife.Objects.Pose.Sitting
  commentId: F:TinyLife.Objects.Pose.Sitting
  href: TinyLife.Objects.Pose.html#TinyLife_Objects_Pose_Sitting
  name: Sitting
  nameWithType: Pose.Sitting
  fullName: TinyLife.Objects.Pose.Sitting
- uid: TinyLife.NeedType.Energy
  commentId: F:TinyLife.NeedType.Energy
  href: TinyLife.NeedType.html#TinyLife_NeedType_Energy
  name: Energy
  nameWithType: NeedType.Energy
  fullName: TinyLife.NeedType.Energy
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Update_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_
  name: Update(GameTime, TimeSpan, float)
  nameWithType: Action.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: Action.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Update_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Update_Microsoft_Xna_Framework_GameTime_System_TimeSpan_System_Single_
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.Action.Sit*
  commentId: Overload:TinyLife.Actions.Action.Sit
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Sit_TinyLife_Objects_Furniture_System_Single_TinyLife_Objects_ActionSpot_
  name: Sit
  nameWithType: Action.Sit
  fullName: TinyLife.Actions.Action.Sit
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  href: TinyLife.Objects.Furniture.html
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  href: TinyLife.Objects.ActionSpot.html
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Actions.Action.GetChildren*
  commentId: Overload:TinyLife.Actions.Action.GetChildren
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetChildren_System_Boolean_
  name: GetChildren
  nameWithType: Action.GetChildren
  fullName: TinyLife.Actions.Action.GetChildren
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Action>
  nameWithType: IEnumerable<Action>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Action>
  nameWithType.vb: IEnumerable(Of Action)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Action)
  name.vb: IEnumerable(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Actions.Action.GetChild*
  commentId: Overload:TinyLife.Actions.Action.GetChild
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetChild__1_System_Guid_System_Boolean_
  name: GetChild
  nameWithType: Action.GetChild
  fullName: TinyLife.Actions.Action.GetChild
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Actions.ActionType.Eat
  commentId: F:TinyLife.Actions.ActionType.Eat
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Eat
  name: Eat
  nameWithType: ActionType.Eat
  fullName: TinyLife.Actions.ActionType.Eat
- uid: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Nullable{TinyLife.Actions.CanExecuteResult},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Nullable{TinyLife.Actions.CanExecuteResult},System.Boolean,System.Boolean)
  isExternal: true
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_CanPickUpOrIsHoldingForTarget_TinyLife_Actions_ActionInfo_TinyLife_Objects_ObjectCategory_System_Func_TinyLife_Objects_Furniture_System_Boolean__System_Nullable_TinyLife_Actions_CanExecuteResult__System_Boolean_System_Boolean_
  name: CanPickUpOrIsHoldingForTarget(ActionInfo, ObjectCategory, Func<Furniture, bool>, CanExecuteResult?, bool, bool)
  nameWithType: ActionType.CanPickUpOrIsHoldingForTarget(ActionInfo, ObjectCategory, Func<Furniture, bool>, CanExecuteResult?, bool, bool)
  fullName: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, System.Func<TinyLife.Objects.Furniture, bool>, TinyLife.Actions.CanExecuteResult?, bool, bool)
  nameWithType.vb: ActionType.CanPickUpOrIsHoldingForTarget(ActionInfo, ObjectCategory, Func(Of Furniture, Boolean), CanExecuteResult?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, System.Func(Of TinyLife.Objects.Furniture, Boolean), TinyLife.Actions.CanExecuteResult?, Boolean, Boolean)
  name.vb: CanPickUpOrIsHoldingForTarget(ActionInfo, ObjectCategory, Func(Of Furniture, Boolean), CanExecuteResult?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Nullable{TinyLife.Actions.CanExecuteResult},System.Boolean,System.Boolean)
    name: CanPickUpOrIsHoldingForTarget
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_CanPickUpOrIsHoldingForTarget_TinyLife_Actions_ActionInfo_TinyLife_Objects_ObjectCategory_System_Func_TinyLife_Objects_Furniture_System_Boolean__System_Nullable_TinyLife_Actions_CanExecuteResult__System_Boolean_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Nullable{TinyLife.Actions.CanExecuteResult},System.Boolean,System.Boolean)
    name: CanPickUpOrIsHoldingForTarget
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_CanPickUpOrIsHoldingForTarget_TinyLife_Actions_ActionInfo_TinyLife_Objects_ObjectCategory_System_Func_TinyLife_Objects_Furniture_System_Boolean__System_Nullable_TinyLife_Actions_CanExecuteResult__System_Boolean_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: CanExecuteDelegate
    href: TinyLife.Actions.ActionType.CanExecuteDelegate.html
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: CanExecuteDelegate
    href: TinyLife.Actions.ActionType.CanExecuteDelegate.html
- uid: TinyLife.Actions.Action.PickUpAndGoTo*
  commentId: Overload:TinyLife.Actions.Action.PickUpAndGoTo
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_PickUpAndGoTo_TinyLife_Actions_ActionInfo_TinyLife_Objects_ObjectCategory_TinyLife_Objects_ObjectCategory_System_Boolean_System_Nullable_System_Int32__
  name: PickUpAndGoTo
  nameWithType: Action.PickUpAndGoTo
  fullName: TinyLife.Actions.Action.PickUpAndGoTo
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectCategory.html
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: System.Func{TinyLife.Objects.Furniture,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.Furniture,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Furniture, bool>
  nameWithType: Func<Furniture, bool>
  fullName: System.Func<TinyLife.Objects.Furniture, bool>
  nameWithType.vb: Func(Of Furniture, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.Furniture, Boolean)
  name.vb: Func(Of Furniture, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Objects.ObjectCategory.Chair
  commentId: F:TinyLife.Objects.ObjectCategory.Chair
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Chair
  name: Chair
  nameWithType: ObjectCategory.Chair
  fullName: TinyLife.Objects.ObjectCategory.Chair
- uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Sit_TinyLife_Objects_Furniture_System_Single_TinyLife_Objects_ActionSpot_
  name: Sit(Furniture, float, ActionSpot)
  nameWithType: Action.Sit(Furniture, float, ActionSpot)
  fullName: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, float, TinyLife.Objects.ActionSpot)
  nameWithType.vb: Action.Sit(Furniture, Single, ActionSpot)
  fullName.vb: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, Single, TinyLife.Objects.ActionSpot)
  name.vb: Sit(Furniture, Single, ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Sit_TinyLife_Objects_Furniture_System_Single_TinyLife_Objects_ActionSpot_
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_Sit_TinyLife_Objects_Furniture_System_Single_TinyLife_Objects_ActionSpot_
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: )
- uid: TinyLife.Actions.Action.GetFreeChair*
  commentId: Overload:TinyLife.Actions.Action.GetFreeChair
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetFreeChair_TinyLife_Objects_PersonLike_TinyLife_Objects_Furniture_
  name: GetFreeChair
  nameWithType: Action.GetFreeChair
  fullName: TinyLife.Actions.Action.GetFreeChair
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}
  parent: System
  definition: System.ValueTuple`3
  href: TinyLife.Objects.Furniture.html
  name: (Furniture Chair, ActionSpot Spot, Direction2 Direction)
  nameWithType: (Furniture Chair, ActionSpot Spot, Direction2 Direction)
  fullName: (TinyLife.Objects.Furniture Chair, TinyLife.Objects.ActionSpot Spot, MLEM.Maths.Direction2 Direction)
  nameWithType.vb: (Chair As Furniture, Spot As ActionSpot, Direction As Direction2)
  fullName.vb: (Chair As TinyLife.Objects.Furniture, Spot As TinyLife.Objects.ActionSpot, Direction As MLEM.Maths.Direction2)
  name.vb: (Chair As Furniture, Spot As ActionSpot, Direction As Direction2)
  spec.csharp:
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Chair
    name: Chair
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.chair
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.spot
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.direction
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Chair
    name: Chair
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.chair
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.spot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.direction
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  name: (T1, T2, T3)
  nameWithType: (T1, T2, T3)
  fullName: (T1, T2, T3)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
- uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetFreeChair_TinyLife_Objects_PersonLike_TinyLife_Objects_Furniture_
  name: GetFreeChair(PersonLike, Furniture)
  nameWithType: Action.GetFreeChair(PersonLike, Furniture)
  fullName: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike, TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture)
    name: GetFreeChair
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetFreeChair_TinyLife_Objects_PersonLike_TinyLife_Objects_Furniture_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.PersonLike,TinyLife.Objects.Furniture)
    name: GetFreeChair
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetFreeChair_TinyLife_Objects_PersonLike_TinyLife_Objects_Furniture_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: )
- uid: TinyLife.Actions.Action.GetFreeChairs*
  commentId: Overload:TinyLife.Actions.Action.GetFreeChairs
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetFreeChairs_TinyLife_Objects_PersonLike_TinyLife_Objects_Furniture_System_Func_MLEM_Maths_Direction2_System_Boolean__
  name: GetFreeChairs
  nameWithType: Action.GetFreeChairs
  fullName: TinyLife.Actions.Action.GetFreeChairs
- uid: System.Func{MLEM.Maths.Direction2,System.Boolean}
  commentId: T:System.Func{MLEM.Maths.Direction2,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Direction2, bool>
  nameWithType: Func<Direction2, bool>
  fullName: System.Func<MLEM.Maths.Direction2, bool>
  nameWithType.vb: Func(Of Direction2, Boolean)
  fullName.vb: System.Func(Of MLEM.Maths.Direction2, Boolean)
  name.vb: Func(Of Direction2, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Furniture Chair, ActionSpot Spot, Direction2 Direction)>
  nameWithType: IEnumerable<(Furniture Chair, ActionSpot Spot, Direction2 Direction)>
  fullName: System.Collections.Generic.IEnumerable<(TinyLife.Objects.Furniture Chair, TinyLife.Objects.ActionSpot Spot, MLEM.Maths.Direction2 Direction)>
  nameWithType.vb: IEnumerable(Of (Chair As Furniture, Spot As ActionSpot, Direction As Direction2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Chair As TinyLife.Objects.Furniture, Spot As TinyLife.Objects.ActionSpot, Direction As MLEM.Maths.Direction2))
  name.vb: IEnumerable(Of (Chair As Furniture, Spot As ActionSpot, Direction As Direction2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Chair
    name: Chair
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.chair
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.spot
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.direction
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Chair
    name: Chair
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.chair
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.spot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Maths.Direction2}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.maths.direction2-.direction
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: )
  - name: )
- uid: TinyLife.Objects.ObjectCategory.BabySittable
  commentId: F:TinyLife.Objects.ObjectCategory.BabySittable
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_BabySittable
  name: BabySittable
  nameWithType: ObjectCategory.BabySittable
  fullName: TinyLife.Objects.ObjectCategory.BabySittable
- uid: TinyLife.Actions.Action.GetSeatCategory*
  commentId: Overload:TinyLife.Actions.Action.GetSeatCategory
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetSeatCategory_TinyLife_Objects_PersonLike_
  name: GetSeatCategory
  nameWithType: Action.GetSeatCategory
  fullName: TinyLife.Actions.Action.GetSeatCategory
- uid: TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot,TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  commentId: M:TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot,TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsLotContentVisible_TinyLife_World_Lot_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Boolean_
  name: IsLotContentVisible(Lot, PersonLike, Map, Vector2?, bool)
  nameWithType: Action.IsLotContentVisible(Lot, PersonLike, Map, Vector2?, bool)
  fullName: TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot, TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, bool)
  nameWithType.vb: Action.IsLotContentVisible(Lot, PersonLike, Map, Vector2?, Boolean)
  fullName.vb: TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot, TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Boolean)
  name.vb: IsLotContentVisible(Lot, PersonLike, Map, Vector2?, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot,TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
    name: IsLotContentVisible
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsLotContentVisible_TinyLife_World_Lot_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Boolean_
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.IsLotContentVisible(TinyLife.World.Lot,TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
    name: IsLotContentVisible
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsLotContentVisible_TinyLife_World_Lot_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Boolean_
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreePeople*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreePeople
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreePeople_TinyLife_Objects_PersonLike_TinyLife_Actions_ActionType_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Func_TinyLife_Objects_PersonLike_System_Boolean__
  name: FindAllFreePeople
  nameWithType: Action.FindAllFreePeople
  fullName: TinyLife.Actions.Action.FindAllFreePeople
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: System.Nullable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Vector2?
  nameWithType: Vector2?
  fullName: Microsoft.Xna.Framework.Vector2?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
- uid: System.Func{TinyLife.Objects.PersonLike,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.PersonLike,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<PersonLike, bool>
  nameWithType: Func<PersonLike, bool>
  fullName: System.Func<TinyLife.Objects.PersonLike, bool>
  nameWithType.vb: Func(Of PersonLike, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.PersonLike, Boolean)
  name.vb: Func(Of PersonLike, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.PersonLike}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.PersonLike}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<PersonLike>
  nameWithType: IEnumerable<PersonLike>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.PersonLike>
  nameWithType.vb: IEnumerable(Of PersonLike)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.PersonLike)
  name.vb: IEnumerable(Of PersonLike)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: TinyLife.Objects.IBreakableObject.Broken
  commentId: P:TinyLife.Objects.IBreakableObject.Broken
  parent: TinyLife.Objects.IBreakableObject
  href: TinyLife.Objects.IBreakableObject.html#TinyLife_Objects_IBreakableObject_Broken
  name: Broken
  nameWithType: IBreakableObject.Broken
  fullName: TinyLife.Objects.IBreakableObject.Broken
- uid: TinyLife.Actions.Action.FindAllFreeFurniture*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeFurniture
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeFurniture_TinyLife_Objects_PersonLike_TinyLife_Objects_ObjectCategory_TinyLife_Objects_FurnitureType_System_Boolean_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_System_Boolean_System_Func_TinyLife_Objects_Furniture_System_Boolean__
  name: FindAllFreeFurniture
  nameWithType: Action.FindAllFreeFurniture
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  href: TinyLife.Objects.FurnitureType.html
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Furniture>
  nameWithType: IEnumerable<Furniture>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>
  nameWithType.vb: IEnumerable(Of Furniture)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture)
  name.vb: IEnumerable(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: )
- uid: TinyLife.Objects.IBreakableObject
  commentId: T:TinyLife.Objects.IBreakableObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.IBreakableObject.html
  name: IBreakableObject
  nameWithType: IBreakableObject
  fullName: TinyLife.Objects.IBreakableObject
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.WallLike.html
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.Actions.Action.FindAllFreeWalls*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeWalls
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeWalls__1_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_
  name: FindAllFreeWalls
  nameWithType: Action.FindAllFreeWalls
  fullName: TinyLife.Actions.Action.FindAllFreeWalls
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreeGround*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeGround
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeGround_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_
  name: FindAllFreeGround
  nameWithType: Action.FindAllFreeGround
  fullName: TinyLife.Actions.Action.FindAllFreeGround
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.TileInstance}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.TileInstance}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TileInstance>
  nameWithType: IEnumerable<TileInstance>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.TileInstance>
  nameWithType.vb: IEnumerable(Of TileInstance)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.TileInstance)
  name.vb: IEnumerable(Of TileInstance)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.TileInstance
    name: TileInstance
    href: TinyLife.World.TileInstance.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.TileInstance
    name: TileInstance
    href: TinyLife.World.TileInstance.html
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.Furniture,System.Boolean})
  commentId: M:TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.Furniture,System.Boolean})
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeFurniture_TinyLife_Objects_PersonLike_TinyLife_Objects_ObjectCategory_TinyLife_Objects_FurnitureType_System_Boolean_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_System_Boolean_System_Func_TinyLife_Objects_Furniture_System_Boolean__
  name: FindAllFreeFurniture(PersonLike, ObjectCategory, FurnitureType, bool, Map, Vector2?, float?, float?, bool, bool, bool, Func<Furniture, bool>)
  nameWithType: Action.FindAllFreeFurniture(PersonLike, ObjectCategory, FurnitureType, bool, Map, Vector2?, float?, float?, bool, bool, bool, Func<Furniture, bool>)
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, bool, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, float?, float?, bool, bool, bool, System.Func<TinyLife.Objects.Furniture, bool>)
  nameWithType.vb: Action.FindAllFreeFurniture(PersonLike, ObjectCategory, FurnitureType, Boolean, Map, Vector2?, Single?, Single?, Boolean, Boolean, Boolean, Func(Of Furniture, Boolean))
  fullName.vb: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Boolean, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Single?, Single?, Boolean, Boolean, Boolean, System.Func(Of TinyLife.Objects.Furniture, Boolean))
  name.vb: FindAllFreeFurniture(PersonLike, ObjectCategory, FurnitureType, Boolean, Map, Vector2?, Single?, Single?, Boolean, Boolean, Boolean, Func(Of Furniture, Boolean))
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.Furniture,System.Boolean})
    name: FindAllFreeFurniture
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeFurniture_TinyLife_Objects_PersonLike_TinyLife_Objects_ObjectCategory_TinyLife_Objects_FurnitureType_System_Boolean_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_System_Boolean_System_Func_TinyLife_Objects_Furniture_System_Boolean__
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    href: TinyLife.Objects.FurnitureType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.PersonLike,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Func{TinyLife.Objects.Furniture,System.Boolean})
    name: FindAllFreeFurniture
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeFurniture_TinyLife_Objects_PersonLike_TinyLife_Objects_ObjectCategory_TinyLife_Objects_FurnitureType_System_Boolean_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_System_Boolean_System_Func_TinyLife_Objects_Furniture_System_Boolean__
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    href: TinyLife.Objects.FurnitureType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: TinyLife.Actions.Action.FindFreeFurniture*
  commentId: Overload:TinyLife.Actions.Action.FindFreeFurniture
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindFreeFurniture_TinyLife_Objects_PersonLike_TinyLife_Objects_ObjectCategory_TinyLife_Objects_FurnitureType_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_System_Boolean_
  name: FindFreeFurniture
  nameWithType: Action.FindFreeFurniture
  fullName: TinyLife.Actions.Action.FindFreeFurniture
- uid: TinyLife.Actions.Action.FindAllActionObjects*
  commentId: Overload:TinyLife.Actions.Action.FindAllActionObjects
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllActionObjects_TinyLife_Objects_PersonLike_TinyLife_Actions_ActionType_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__
  name: FindAllActionObjects
  nameWithType: Action.FindAllActionObjects
  fullName: TinyLife.Actions.Action.FindAllActionObjects
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ActionInfo>
  nameWithType: IEnumerable<ActionInfo>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionInfo>
  nameWithType.vb: IEnumerable(Of ActionInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionInfo)
  name.vb: IEnumerable(Of ActionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
- uid: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_CanExecuteAction_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  name: CanExecuteAction(ActionType, ActionInfo, bool)
  nameWithType: PersonLike.CanExecuteAction(ActionType, ActionInfo, bool)
  fullName: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: PersonLike.CanExecuteAction(ActionType, ActionInfo, Boolean)
  fullName.vb: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean)
  name.vb: CanExecuteAction(ActionType, ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
    name: CanExecuteAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_CanExecuteAction_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
    name: CanExecuteAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_CanExecuteAction_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_IsInappropriateElsewhere
  name: IsInappropriateElsewhere
  nameWithType: ActionType.TypeSettings.IsInappropriateElsewhere
  fullName: TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
- uid: TinyLife.Actions.Action.FindValidActionObjects*
  commentId: Overload:TinyLife.Actions.Action.FindValidActionObjects
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindValidActionObjects_TinyLife_Objects_PersonLike_TinyLife_Actions_ActionType_System_Boolean_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Boolean_System_Boolean_System_Boolean_
  name: FindValidActionObjects
  nameWithType: Action.FindValidActionObjects
  fullName: TinyLife.Actions.Action.FindValidActionObjects
- uid: TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_PossibleArguments
  name: PossibleArguments
  nameWithType: ActionType.TypeSettings.PossibleArguments
  fullName: TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
- uid: TinyLife.Actions.Action.GetRandomValidArguments*
  commentId: Overload:TinyLife.Actions.Action.GetRandomValidArguments
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetRandomValidArguments_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  name: GetRandomValidArguments
  nameWithType: Action.GetRandomValidArguments
  fullName: TinyLife.Actions.Action.GetRandomValidArguments
- uid: TinyLife.Actions.ActionArgument[]
  isExternal: true
  href: TinyLife.Actions.ActionArgument.html
  name: ActionArgument[]
  nameWithType: ActionArgument[]
  fullName: TinyLife.Actions.ActionArgument[]
  nameWithType.vb: ActionArgument()
  fullName.vb: TinyLife.Actions.ActionArgument()
  name.vb: ActionArgument()
  spec.csharp:
  - uid: TinyLife.Actions.ActionArgument
    name: ActionArgument
    href: TinyLife.Actions.ActionArgument.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.Actions.ActionArgument
    name: ActionArgument
    href: TinyLife.Actions.ActionArgument.html
  - name: (
  - name: )
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectSpot.html
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Actions.Action.GetTableSpot*
  commentId: Overload:TinyLife.Actions.Action.GetTableSpot
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetTableSpot_TinyLife_Objects_Furniture_TinyLife_Objects_ActionSpot_
  name: GetTableSpot
  nameWithType: Action.GetTableSpot
  fullName: TinyLife.Actions.Action.GetTableSpot
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
  parent: System
  definition: System.ValueTuple`2
  href: TinyLife.Objects.Furniture.html
  name: (Furniture Table, ObjectSpot Spot)
  nameWithType: (Furniture Table, ObjectSpot Spot)
  fullName: (TinyLife.Objects.Furniture Table, TinyLife.Objects.ObjectSpot Spot)
  nameWithType.vb: (Table As Furniture, Spot As ObjectSpot)
  fullName.vb: (Table As TinyLife.Objects.Furniture, Spot As TinyLife.Objects.ObjectSpot)
  name.vb: (Table As Furniture, Spot As ObjectSpot)
  spec.csharp:
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}.Table
    name: Table
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.table
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    href: TinyLife.Objects.ObjectSpot.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.spot
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}.Table
    name: Table
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.table
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.spot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    href: TinyLife.Objects.ObjectSpot.html
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Actions.Action.InvokeForBoth*
  commentId: Overload:TinyLife.Actions.Action.InvokeForBoth
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_InvokeForBoth_TinyLife_Objects_PersonLike_TinyLife_Objects_PersonLike_System_Action_TinyLife_Objects_PersonLike_TinyLife_Objects_PersonLike__
  name: InvokeForBoth
  nameWithType: Action.InvokeForBoth
  fullName: TinyLife.Actions.Action.InvokeForBoth
- uid: System.Action{TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike}
  commentId: T:System.Action{TinyLife.Objects.PersonLike,TinyLife.Objects.PersonLike}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<PersonLike, PersonLike>
  nameWithType: Action<PersonLike, PersonLike>
  fullName: System.Action<TinyLife.Objects.PersonLike, TinyLife.Objects.PersonLike>
  nameWithType.vb: Action(Of PersonLike, PersonLike)
  fullName.vb: System.Action(Of TinyLife.Objects.PersonLike, TinyLife.Objects.PersonLike)
  name.vb: Action(Of PersonLike, PersonLike)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanMultitask_TinyLife_Actions_Action_
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanMultitask_TinyLife_Actions_Action_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanMultitask_TinyLife_Actions_Action_
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
- uid: TinyLife.Actions.ActionInfo.Lot
  commentId: P:TinyLife.Actions.ActionInfo.Lot
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_Lot
  name: Lot
  nameWithType: ActionInfo.Lot
  fullName: TinyLife.Actions.ActionInfo.Lot
- uid: TinyLife.Actions.Action.IsInappropriate*
  commentId: Overload:TinyLife.Actions.Action.IsInappropriate
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsInappropriate_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_
  name: IsInappropriate
  nameWithType: Action.IsInappropriate
  fullName: TinyLife.Actions.Action.IsInappropriate
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  href: TinyLife.World.Lot.html
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  parent: TinyLife.Objects.MapObject
  href: TinyLife.Objects.MapObject.html#TinyLife_Objects_MapObject_Position
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: TinyLife.Actions.Action.IsLotContentVisible*
  commentId: Overload:TinyLife.Actions.Action.IsLotContentVisible
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsLotContentVisible_TinyLife_World_Lot_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Boolean_
  name: IsLotContentVisible
  nameWithType: Action.IsLotContentVisible
  fullName: TinyLife.Actions.Action.IsLotContentVisible
