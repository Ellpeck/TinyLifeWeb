### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Household.RandomRelation
  commentId: T:TinyLife.World.Household.RandomRelation
  id: Household.RandomRelation
  parent: TinyLife.World
  children:
  - TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.GenealogyType,System.Int32)
  - TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.GenealogyType,TinyLife.RelationshipType,System.Int32)
  - TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.RelationshipType,System.Int32)
  - TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.RelationshipType,TinyLife.RomanceType,System.Boolean,System.Int32)
  - TinyLife.World.Household.RandomRelation.FirstPerson
  - TinyLife.World.Household.RandomRelation.Max
  - TinyLife.World.Household.RandomRelation.Relation
  - TinyLife.World.Household.RandomRelation.SecondPerson
  langs:
  - csharp
  - vb
  name: Household.RandomRelation
  nameWithType: Household.RandomRelation
  fullName: TinyLife.World.Household.RandomRelation
  type: Struct
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: A random relation, which is a wrapper around <xref href="TinyLife.World.Household.RandomRelation.Relation" data-throw-if-not-resolved="false"></xref> instances between two people of certain <xref href="TinyLife.World.Household.RandomPerson" data-throw-if-not-resolved="false"></xref> values, used by <xref href="TinyLife.World.Household.RandomConstellation" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly struct Household.RandomRelation
    content.vb: Public Structure Household.RandomRelation
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.World.Household.RandomRelation.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.Household.RandomRelation.FirstPerson
  commentId: F:TinyLife.World.Household.RandomRelation.FirstPerson
  id: FirstPerson
  parent: TinyLife.World.Household.RandomRelation
  langs:
  - csharp
  - vb
  name: FirstPerson
  nameWithType: Household.RandomRelation.FirstPerson
  fullName: TinyLife.World.Household.RandomRelation.FirstPerson
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The age of the first person in this relation.
  example: []
  syntax:
    content: public readonly Household.RandomPerson FirstPerson
    return:
      type: TinyLife.World.Household.RandomPerson
    content.vb: Public ReadOnly FirstPerson As Household.RandomPerson
- uid: TinyLife.World.Household.RandomRelation.SecondPerson
  commentId: F:TinyLife.World.Household.RandomRelation.SecondPerson
  id: SecondPerson
  parent: TinyLife.World.Household.RandomRelation
  langs:
  - csharp
  - vb
  name: SecondPerson
  nameWithType: Household.RandomRelation.SecondPerson
  fullName: TinyLife.World.Household.RandomRelation.SecondPerson
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: ''
  example: []
  syntax:
    content: public readonly Household.RandomPerson SecondPerson
    return:
      type: TinyLife.World.Household.RandomPerson
    content.vb: Public ReadOnly SecondPerson As Household.RandomPerson
- uid: TinyLife.World.Household.RandomRelation.Relation
  commentId: F:TinyLife.World.Household.RandomRelation.Relation
  id: Relation
  parent: TinyLife.World.Household.RandomRelation
  langs:
  - csharp
  - vb
  name: Relation
  nameWithType: Household.RandomRelation.Relation
  fullName: TinyLife.World.Household.RandomRelation.Relation
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The underlying <xref href="TinyLife.World.Household.RandomRelation.Relation" data-throw-if-not-resolved="false"></xref> that should be applied to the <xref href="TinyLife.World.Household.RandomRelation.FirstPerson" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.Household.RandomRelation.SecondPerson" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly Household.Relation Relation
    return:
      type: TinyLife.World.Household.Relation
    content.vb: Public ReadOnly Relation As Household.Relation
- uid: TinyLife.World.Household.RandomRelation.Max
  commentId: F:TinyLife.World.Household.RandomRelation.Max
  id: Max
  parent: TinyLife.World.Household.RandomRelation
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: Household.RandomRelation.Max
  fullName: TinyLife.World.Household.RandomRelation.Max
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The maximum amount of times that this random relation can be applied to household members of one household.
  example: []
  syntax:
    content: public readonly int Max
    return:
      type: System.Int32
    content.vb: Public ReadOnly Max As Integer
- uid: TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.RelationshipType,TinyLife.RomanceType,System.Boolean,System.Int32)
  commentId: M:TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.RelationshipType,TinyLife.RomanceType,System.Boolean,System.Int32)
  id: '#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.RelationshipType,TinyLife.RomanceType,System.Boolean,System.Int32)'
  parent: TinyLife.World.Household.RandomRelation
  langs:
  - csharp
  - vb
  name: RandomRelation(RandomPerson, RandomPerson, RelationshipType, RomanceType, bool, int)
  nameWithType: Household.RandomRelation.RandomRelation(Household.RandomPerson, Household.RandomPerson, RelationshipType, RomanceType, bool, int)
  fullName: TinyLife.World.Household.RandomRelation.RandomRelation(TinyLife.World.Household.RandomPerson, TinyLife.World.Household.RandomPerson, TinyLife.RelationshipType, TinyLife.RomanceType, bool, int)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new random relation with the given settings.
  example: []
  syntax:
    content: public RandomRelation(Household.RandomPerson firstPerson, Household.RandomPerson secondPerson, RelationshipType relationshipType, RomanceType romanceType, bool dating, int max)
    parameters:
    - id: firstPerson
      type: TinyLife.World.Household.RandomPerson
      description: The age of the first person in this relation.
    - id: secondPerson
      type: TinyLife.World.Household.RandomPerson
      description: The age of the second person in this relation.
    - id: relationshipType
      type: TinyLife.RelationshipType
      description: The relationship type to apply.
    - id: romanceType
      type: TinyLife.RomanceType
      description: The romance type to apply.
    - id: dating
      type: System.Boolean
      description: Whether the people should be marked as dating.
    - id: max
      type: System.Int32
      description: The maximum amount of times that this random relation can be applied to household members of one household.
    content.vb: Public Sub New(firstPerson As Household.RandomPerson, secondPerson As Household.RandomPerson, relationshipType As RelationshipType, romanceType As RomanceType, dating As Boolean, max As Integer)
  overload: TinyLife.World.Household.RandomRelation.#ctor*
  nameWithType.vb: Household.RandomRelation.New(Household.RandomPerson, Household.RandomPerson, RelationshipType, RomanceType, Boolean, Integer)
  fullName.vb: TinyLife.World.Household.RandomRelation.New(TinyLife.World.Household.RandomPerson, TinyLife.World.Household.RandomPerson, TinyLife.RelationshipType, TinyLife.RomanceType, Boolean, Integer)
  name.vb: New(RandomPerson, RandomPerson, RelationshipType, RomanceType, Boolean, Integer)
- uid: TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.GenealogyType,TinyLife.RelationshipType,System.Int32)
  commentId: M:TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.GenealogyType,TinyLife.RelationshipType,System.Int32)
  id: '#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.GenealogyType,TinyLife.RelationshipType,System.Int32)'
  parent: TinyLife.World.Household.RandomRelation
  langs:
  - csharp
  - vb
  name: RandomRelation(RandomPerson, RandomPerson, GenealogyType, RelationshipType, int)
  nameWithType: Household.RandomRelation.RandomRelation(Household.RandomPerson, Household.RandomPerson, GenealogyType, RelationshipType, int)
  fullName: TinyLife.World.Household.RandomRelation.RandomRelation(TinyLife.World.Household.RandomPerson, TinyLife.World.Household.RandomPerson, TinyLife.GenealogyType, TinyLife.RelationshipType, int)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new random relation with the given settings.
  example: []
  syntax:
    content: public RandomRelation(Household.RandomPerson firstPerson, Household.RandomPerson secondPerson, GenealogyType genealogyType, RelationshipType relationshipType, int max)
    parameters:
    - id: firstPerson
      type: TinyLife.World.Household.RandomPerson
      description: The age of the first person in this relation.
    - id: secondPerson
      type: TinyLife.World.Household.RandomPerson
      description: The age of the second person in this relation.
    - id: genealogyType
      type: TinyLife.GenealogyType
      description: The generalogy type to apply.
    - id: relationshipType
      type: TinyLife.RelationshipType
      description: The relationship type to apply.
    - id: max
      type: System.Int32
      description: The maximum amount of times that this random relation can be applied to household members of one household.
    content.vb: Public Sub New(firstPerson As Household.RandomPerson, secondPerson As Household.RandomPerson, genealogyType As GenealogyType, relationshipType As RelationshipType, max As Integer)
  overload: TinyLife.World.Household.RandomRelation.#ctor*
  nameWithType.vb: Household.RandomRelation.New(Household.RandomPerson, Household.RandomPerson, GenealogyType, RelationshipType, Integer)
  fullName.vb: TinyLife.World.Household.RandomRelation.New(TinyLife.World.Household.RandomPerson, TinyLife.World.Household.RandomPerson, TinyLife.GenealogyType, TinyLife.RelationshipType, Integer)
  name.vb: New(RandomPerson, RandomPerson, GenealogyType, RelationshipType, Integer)
- uid: TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.GenealogyType,System.Int32)
  commentId: M:TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.GenealogyType,System.Int32)
  id: '#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.GenealogyType,System.Int32)'
  parent: TinyLife.World.Household.RandomRelation
  langs:
  - csharp
  - vb
  name: RandomRelation(RandomPerson, RandomPerson, GenealogyType, int)
  nameWithType: Household.RandomRelation.RandomRelation(Household.RandomPerson, Household.RandomPerson, GenealogyType, int)
  fullName: TinyLife.World.Household.RandomRelation.RandomRelation(TinyLife.World.Household.RandomPerson, TinyLife.World.Household.RandomPerson, TinyLife.GenealogyType, int)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new random relation with the given settings.
  example: []
  syntax:
    content: public RandomRelation(Household.RandomPerson firstPerson, Household.RandomPerson secondPerson, GenealogyType genealogyType, int max)
    parameters:
    - id: firstPerson
      type: TinyLife.World.Household.RandomPerson
      description: The age of the first person in this relation.
    - id: secondPerson
      type: TinyLife.World.Household.RandomPerson
      description: The age of the second person in this relation.
    - id: genealogyType
      type: TinyLife.GenealogyType
      description: The generalogy type to apply.
    - id: max
      type: System.Int32
      description: The maximum amount of times that this random relation can be applied to household members of one household.
    content.vb: Public Sub New(firstPerson As Household.RandomPerson, secondPerson As Household.RandomPerson, genealogyType As GenealogyType, max As Integer)
  overload: TinyLife.World.Household.RandomRelation.#ctor*
  nameWithType.vb: Household.RandomRelation.New(Household.RandomPerson, Household.RandomPerson, GenealogyType, Integer)
  fullName.vb: TinyLife.World.Household.RandomRelation.New(TinyLife.World.Household.RandomPerson, TinyLife.World.Household.RandomPerson, TinyLife.GenealogyType, Integer)
  name.vb: New(RandomPerson, RandomPerson, GenealogyType, Integer)
- uid: TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.RelationshipType,System.Int32)
  commentId: M:TinyLife.World.Household.RandomRelation.#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.RelationshipType,System.Int32)
  id: '#ctor(TinyLife.World.Household.RandomPerson,TinyLife.World.Household.RandomPerson,TinyLife.RelationshipType,System.Int32)'
  parent: TinyLife.World.Household.RandomRelation
  langs:
  - csharp
  - vb
  name: RandomRelation(RandomPerson, RandomPerson, RelationshipType, int)
  nameWithType: Household.RandomRelation.RandomRelation(Household.RandomPerson, Household.RandomPerson, RelationshipType, int)
  fullName: TinyLife.World.Household.RandomRelation.RandomRelation(TinyLife.World.Household.RandomPerson, TinyLife.World.Household.RandomPerson, TinyLife.RelationshipType, int)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new random relation with the given settings.
  example: []
  syntax:
    content: public RandomRelation(Household.RandomPerson firstPerson, Household.RandomPerson secondPerson, RelationshipType relationshipType, int max)
    parameters:
    - id: firstPerson
      type: TinyLife.World.Household.RandomPerson
      description: The age of the first person in this relation.
    - id: secondPerson
      type: TinyLife.World.Household.RandomPerson
      description: The age of the second person in this relation.
    - id: relationshipType
      type: TinyLife.RelationshipType
      description: The relationship type to apply.
    - id: max
      type: System.Int32
      description: The maximum amount of times that this random relation can be applied to household members of one household.
    content.vb: Public Sub New(firstPerson As Household.RandomPerson, secondPerson As Household.RandomPerson, relationshipType As RelationshipType, max As Integer)
  overload: TinyLife.World.Household.RandomRelation.#ctor*
  nameWithType.vb: Household.RandomRelation.New(Household.RandomPerson, Household.RandomPerson, RelationshipType, Integer)
  fullName.vb: TinyLife.World.Household.RandomRelation.New(TinyLife.World.Household.RandomPerson, TinyLife.World.Household.RandomPerson, TinyLife.RelationshipType, Integer)
  name.vb: New(RandomPerson, RandomPerson, RelationshipType, Integer)
references:
- uid: TinyLife.World.Household.RandomRelation.Relation
  commentId: F:TinyLife.World.Household.RandomRelation.Relation
  href: TinyLife.World.Household.RandomRelation.html#TinyLife_World_Household_RandomRelation_Relation
  name: Relation
  nameWithType: Household.RandomRelation.Relation
  fullName: TinyLife.World.Household.RandomRelation.Relation
- uid: TinyLife.World.Household.RandomPerson
  commentId: T:TinyLife.World.Household.RandomPerson
  parent: TinyLife.World
  href: TinyLife.World.Household.html
  name: Household.RandomPerson
  nameWithType: Household.RandomPerson
  fullName: TinyLife.World.Household.RandomPerson
  spec.csharp:
  - uid: TinyLife.World.Household
    name: Household
    href: TinyLife.World.Household.html
  - name: .
  - uid: TinyLife.World.Household.RandomPerson
    name: RandomPerson
    href: TinyLife.World.Household.RandomPerson.html
  spec.vb:
  - uid: TinyLife.World.Household
    name: Household
    href: TinyLife.World.Household.html
  - name: .
  - uid: TinyLife.World.Household.RandomPerson
    name: RandomPerson
    href: TinyLife.World.Household.RandomPerson.html
- uid: TinyLife.World.Household.RandomConstellation
  commentId: T:TinyLife.World.Household.RandomConstellation
  href: TinyLife.World.Household.html
  name: Household.RandomConstellation
  nameWithType: Household.RandomConstellation
  fullName: TinyLife.World.Household.RandomConstellation
  spec.csharp:
  - uid: TinyLife.World.Household
    name: Household
    href: TinyLife.World.Household.html
  - name: .
  - uid: TinyLife.World.Household.RandomConstellation
    name: RandomConstellation
    href: TinyLife.World.Household.RandomConstellation.html
  spec.vb:
  - uid: TinyLife.World.Household
    name: Household
    href: TinyLife.World.Household.html
  - name: .
  - uid: TinyLife.World.Household.RandomConstellation
    name: RandomConstellation
    href: TinyLife.World.Household.RandomConstellation.html
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TinyLife.World.Household.RandomRelation.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<RandomRelation>(RandomRelation)
  nameWithType: Extensions.JsonCopy<Household.RandomRelation>(Household.RandomRelation)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Household.RandomRelation>(TinyLife.World.Household.RandomRelation)
  nameWithType.vb: Extensions.JsonCopy(Of Household.RandomRelation)(Household.RandomRelation)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Household.RandomRelation)(TinyLife.World.Household.RandomRelation)
  name.vb: JsonCopy(Of RandomRelation)(RandomRelation)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Household.RandomRelation)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.Household.RandomRelation
    name: RandomRelation
    href: TinyLife.World.Household.RandomRelation.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.Household.RandomRelation
    name: RandomRelation
    href: TinyLife.World.Household.RandomRelation.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Household.RandomRelation)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Household.RandomRelation
    name: RandomRelation
    href: TinyLife.World.Household.RandomRelation.html
  - name: )
  - name: (
  - uid: TinyLife.World.Household.RandomRelation
    name: RandomRelation
    href: TinyLife.World.Household.RandomRelation.html
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.World.Household.RandomRelation.FirstPerson
  commentId: F:TinyLife.World.Household.RandomRelation.FirstPerson
  href: TinyLife.World.Household.RandomRelation.html#TinyLife_World_Household_RandomRelation_FirstPerson
  name: FirstPerson
  nameWithType: Household.RandomRelation.FirstPerson
  fullName: TinyLife.World.Household.RandomRelation.FirstPerson
- uid: TinyLife.World.Household.RandomRelation.SecondPerson
  commentId: F:TinyLife.World.Household.RandomRelation.SecondPerson
  href: TinyLife.World.Household.RandomRelation.html#TinyLife_World_Household_RandomRelation_SecondPerson
  name: SecondPerson
  nameWithType: Household.RandomRelation.SecondPerson
  fullName: TinyLife.World.Household.RandomRelation.SecondPerson
- uid: TinyLife.World.Household.Relation
  commentId: T:TinyLife.World.Household.Relation
  parent: TinyLife.World
  href: TinyLife.World.Household.html
  name: Household.Relation
  nameWithType: Household.Relation
  fullName: TinyLife.World.Household.Relation
  spec.csharp:
  - uid: TinyLife.World.Household
    name: Household
    href: TinyLife.World.Household.html
  - name: .
  - uid: TinyLife.World.Household.Relation
    name: Relation
    href: TinyLife.World.Household.Relation.html
  spec.vb:
  - uid: TinyLife.World.Household
    name: Household
    href: TinyLife.World.Household.html
  - name: .
  - uid: TinyLife.World.Household.Relation
    name: Relation
    href: TinyLife.World.Household.Relation.html
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.World.Household.RandomRelation.#ctor*
  commentId: Overload:TinyLife.World.Household.RandomRelation.#ctor
  href: TinyLife.World.Household.RandomRelation.html#TinyLife_World_Household_RandomRelation__ctor_TinyLife_World_Household_RandomPerson_TinyLife_World_Household_RandomPerson_TinyLife_RelationshipType_TinyLife_RomanceType_System_Boolean_System_Int32_
  name: RandomRelation
  nameWithType: Household.RandomRelation.RandomRelation
  fullName: TinyLife.World.Household.RandomRelation.RandomRelation
  nameWithType.vb: Household.RandomRelation.New
  fullName.vb: TinyLife.World.Household.RandomRelation.New
  name.vb: New
- uid: TinyLife.RelationshipType
  commentId: T:TinyLife.RelationshipType
  parent: TinyLife
  href: TinyLife.RelationshipType.html
  name: RelationshipType
  nameWithType: RelationshipType
  fullName: TinyLife.RelationshipType
- uid: TinyLife.RomanceType
  commentId: T:TinyLife.RomanceType
  parent: TinyLife
  href: TinyLife.RomanceType.html
  name: RomanceType
  nameWithType: RomanceType
  fullName: TinyLife.RomanceType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife
  commentId: N:TinyLife
  href: TinyLife.html
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.GenealogyType
  commentId: T:TinyLife.GenealogyType
  parent: TinyLife
  href: TinyLife.GenealogyType.html
  name: GenealogyType
  nameWithType: GenealogyType
  fullName: TinyLife.GenealogyType
