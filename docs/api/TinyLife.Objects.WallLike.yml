### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  id: WallLike
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.WallLike.#ctor(System.Int32,Microsoft.Xna.Framework.Point[])
  - TinyLife.Objects.WallLike.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  - TinyLife.Objects.WallLike.Floor
  - TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
  - TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map,TinyLife.Objects.PersonLike)
  - TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.WallLike.GetPrice
  - TinyLife.Objects.WallLike.IsStatic
  - TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.WallLike.IsVerticalForCamera(System.Boolean)
  - TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  - TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
  - TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  - TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
  - TinyLife.Objects.WallLike.Opening
  - TinyLife.Objects.WallLike.Positions
  - TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  - TinyLife.Objects.WallLike.Validate(TinyLife.World.Map,TinyLife.Utilities.AppliedMigrations)
  langs:
  - csharp
  - vb
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: A wall-like is the base class for <xref href="TinyLife.World.Wall" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.FenceWall" data-throw-if-not-resolved="false"></xref>, both of which can be placed on a map to prevent traversal and add decorative elements.
  example: []
  syntax:
    content: >-
      [DataContract]

      public abstract class WallLike : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public MustInherit Class WallLike Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  derivedClasses:
  - TinyLife.Objects.FenceWall
  - TinyLife.World.Wall
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.WallLike.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.WallLike.Positions
  commentId: F:TinyLife.Objects.WallLike.Positions
  id: Positions
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: Positions
  nameWithType: WallLike.Positions
  fullName: TinyLife.Objects.WallLike.Positions
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    The two positions that this wall is placed in.

    The two positions refer to the tile coordinate of the tile on the front face of the wall, and the tile coordinate of the tile on the back face of the wall.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Point[] Positions
    return:
      type: Microsoft.Xna.Framework.Point[]
    content.vb: >-
      <DataMember>

      Public ReadOnly Positions As Point()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.WallLike.Floor
  commentId: F:TinyLife.Objects.WallLike.Floor
  id: Floor
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: Floor
  nameWithType: WallLike.Floor
  fullName: TinyLife.Objects.WallLike.Floor
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The floor that this wall is on.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly int Floor
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Floor As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.WallLike.IsStatic
  commentId: F:TinyLife.Objects.WallLike.IsStatic
  id: IsStatic
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: IsStatic
  nameWithType: WallLike.IsStatic
  fullName: TinyLife.Objects.WallLike.IsStatic
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: A field that is true for objects that are part of the exported base map that the current map is created from
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool IsStatic
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public IsStatic As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.WallLike.Opening
  commentId: P:TinyLife.Objects.WallLike.Opening
  id: Opening
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: Opening
  nameWithType: WallLike.Opening
  fullName: TinyLife.Objects.WallLike.Opening
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    The <xref href="TinyLife.Objects.WallLike.Opening" data-throw-if-not-resolved="false"></xref> attached to this wall, or null if there is none.

    Use <xref href="TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map%2cTinyLife.World.Opening)" data-throw-if-not-resolved="false"></xref> to set this value.
  example: []
  syntax:
    content: >-
      [DataMember]

      public Opening Opening { get; }
    parameters: []
    return:
      type: TinyLife.World.Opening
    content.vb: >-
      <DataMember>

      Public Property Opening As Opening
  overload: TinyLife.Objects.WallLike.Opening*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.WallLike.#ctor(System.Int32,Microsoft.Xna.Framework.Point[])
  commentId: M:TinyLife.Objects.WallLike.#ctor(System.Int32,Microsoft.Xna.Framework.Point[])
  id: '#ctor(System.Int32,Microsoft.Xna.Framework.Point[])'
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: WallLike(int, params Point[])
  nameWithType: WallLike.WallLike(int, params Point[])
  fullName: TinyLife.Objects.WallLike.WallLike(int, params Microsoft.Xna.Framework.Point[])
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Creates a new wall at the given position, with the implicitly given verticality
  example: []
  syntax:
    content: public WallLike(int floor, params Point[] positions)
    parameters:
    - id: floor
      type: System.Int32
      description: The floor that this wall is on.
    - id: positions
      type: Microsoft.Xna.Framework.Point[]
      description: The positions that the wall should be placed between
    content.vb: Public Sub New(floor As Integer, ParamArray positions As Point())
  overload: TinyLife.Objects.WallLike.#ctor*
  nameWithType.vb: WallLike.New(Integer, ParamArray Point())
  fullName.vb: TinyLife.Objects.WallLike.New(Integer, ParamArray Microsoft.Xna.Framework.Point())
  name.vb: New(Integer, ParamArray Point())
- uid: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.WallLike.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  id: Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: Draw(Map, GameTime, SpriteBatch, Vector2, Color?, bool, bool)
  nameWithType: WallLike.Draw(Map, GameTime, SpriteBatch, Vector2, Color?, bool, bool)
  fullName: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, bool, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Draws this wall in the world, along with its <xref href="TinyLife.Objects.WallLike.Opening" data-throw-if-not-resolved="false"></xref> and potentially <xref href="TinyLife.World.Wall.Wallpapers" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Objects.FenceWall.Type" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual void Draw(Map map, GameTime time, SpriteBatch batch, Vector2 drawPos, Color? overrideColor = null, bool drawOpening = true, bool isInWorld = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to draw this wall on
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to draw the wall at, in draw space
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that this object should be rendered with, instead of its default color
    - id: drawOpening
      type: System.Boolean
      description: Whether this wall-like object's <xref href="TinyLife.Objects.WallLike.Opening" data-throw-if-not-resolved="false"></xref> should be drawn.
    - id: isInWorld
      type: System.Boolean
      description: Whether this wall-like object is currently in the world, or just a preview.
    content.vb: Public Overridable Sub Draw(map As Map, time As GameTime, batch As SpriteBatch, drawPos As Vector2, overrideColor As Color? = Nothing, drawOpening As Boolean = True, isInWorld As Boolean = True)
  overload: TinyLife.Objects.WallLike.Draw*
  nameWithType.vb: WallLike.Draw(Map, GameTime, SpriteBatch, Vector2, Color?, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, Boolean, Boolean)
  name.vb: Draw(Map, GameTime, SpriteBatch, Vector2, Color?, Boolean, Boolean)
- uid: TinyLife.Objects.WallLike.GetPrice
  commentId: M:TinyLife.Objects.WallLike.GetPrice
  id: GetPrice
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: WallLike.GetPrice()
  fullName: TinyLife.Objects.WallLike.GetPrice()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Returns the price for this wall, including its <xref href="TinyLife.Objects.WallLike.Opening" data-throw-if-not-resolved="false"></xref> as well as its <xref href="TinyLife.World.Wall.Wallpapers" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Objects.FenceWall.Type" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual float GetPrice()
    return:
      type: System.Single
      description: The price.
    content.vb: Public Overridable Function GetPrice() As Single
  overload: TinyLife.Objects.WallLike.GetPrice*
- uid: TinyLife.Objects.WallLike.Validate(TinyLife.World.Map,TinyLife.Utilities.AppliedMigrations)
  commentId: M:TinyLife.Objects.WallLike.Validate(TinyLife.World.Map,TinyLife.Utilities.AppliedMigrations)
  id: Validate(TinyLife.World.Map,TinyLife.Utilities.AppliedMigrations)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: Validate(Map, AppliedMigrations)
  nameWithType: WallLike.Validate(Map, AppliedMigrations)
  fullName: TinyLife.Objects.WallLike.Validate(TinyLife.World.Map, TinyLife.Utilities.AppliedMigrations)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: This method is called when this object is loaded from disk.
  example: []
  syntax:
    content: public virtual bool Validate(Map map, AppliedMigrations appliedMigrations)
    parameters:
    - id: map
      type: TinyLife.World.Map
    - id: appliedMigrations
      type: TinyLife.Utilities.AppliedMigrations
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Overridable Function Validate(map As Map, appliedMigrations As AppliedMigrations) As Boolean
  overload: TinyLife.Objects.WallLike.Validate*
- uid: TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
  id: OnAdded(TinyLife.World.Map)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: OnAdded(Map)
  nameWithType: WallLike.OnAdded(Map)
  fullName: TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Called when this wall is added to the given <code class="paramref">map</code>.

    By default, this method marks surrounding locations dirty for pathfinding and calls <xref href="TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual void OnAdded(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map.
    content.vb: Public Overridable Sub OnAdded(map As Map)
  overload: TinyLife.Objects.WallLike.OnAdded*
- uid: TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
  id: OnRemoved(TinyLife.World.Map)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: OnRemoved(Map)
  nameWithType: WallLike.OnRemoved(Map)
  fullName: TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Called when this wall is removed from the given <code class="paramref">map</code>.

    By default, this method marks surrounding locations dirty for pathfinding and calls <xref href="TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual void OnRemoved(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map.
    content.vb: Public Overridable Sub OnRemoved(map As Map)
  overload: TinyLife.Objects.WallLike.OnRemoved*
- uid: TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map,TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map,TinyLife.Objects.PersonLike)
  id: GetFreeActionSpotInfos(TinyLife.World.Map,TinyLife.Objects.PersonLike)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: GetFreeActionSpotInfos(Map, PersonLike)
  nameWithType: WallLike.GetFreeActionSpotInfos(Map, PersonLike)
  fullName: TinyLife.Objects.WallLike.GetFreeActionSpotInfos(TinyLife.World.Map, TinyLife.Objects.PersonLike)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Returns a set of <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> instances that represent action spots that the <code class="paramref">person</code> can currently use or interact with.
  example: []
  syntax:
    content: public IEnumerable<ActionInfo> GetFreeActionSpotInfos(Map map, PersonLike person)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that this wall is on.
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person who wants to interact with this wall.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
      description: The free action spots.
    content.vb: Public Function GetFreeActionSpotInfos(map As Map, person As PersonLike) As IEnumerable(Of ActionInfo)
  overload: TinyLife.Objects.WallLike.GetFreeActionSpotInfos*
- uid: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  commentId: M:TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  id: SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: SetOpening(Map, Opening)
  nameWithType: WallLike.SetOpening(Map, Opening)
  fullName: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map, TinyLife.World.Opening)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Changes the <xref href="TinyLife.Objects.WallLike.Opening" data-throw-if-not-resolved="false"></xref> in this wall to the specified one
  example: []
  syntax:
    content: public void SetOpening(Map map, Opening opening)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that this wall is on
    - id: opening
      type: TinyLife.World.Opening
      description: The opening to set, or null to remove the current one
    content.vb: Public Sub SetOpening(map As Map, opening As Opening)
  overload: TinyLife.Objects.WallLike.SetOpening*
- uid: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  id: NotifyNeighbors(TinyLife.World.Map)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: NotifyNeighbors(Map)
  nameWithType: WallLike.NotifyNeighbors(Map)
  fullName: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Notifies all neighboring walls on the given <code class="paramref">map</code> of a change in this wall, calling their <xref href="TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map%2cTinyLife.Objects.WallLike)" data-throw-if-not-resolved="false"></xref> methods.
  example: []
  syntax:
    content: public void NotifyNeighbors(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map.
    content.vb: Public Sub NotifyNeighbors(map As Map)
  overload: TinyLife.Objects.WallLike.NotifyNeighbors*
- uid: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  commentId: M:TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  id: OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: OnNeighborChanged(Map, WallLike)
  nameWithType: WallLike.OnNeighborChanged(Map, WallLike)
  fullName: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map, TinyLife.Objects.WallLike)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    A method that is called when a neighboring wall of this wall changes.

    This method is called when a neighboring wall calls <xref href="TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected virtual void OnNeighborChanged(Map map, WallLike neighbor)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map.
    - id: neighbor
      type: TinyLife.Objects.WallLike
      description: The nighbor that changed.
    content.vb: Protected Overridable Sub OnNeighborChanged(map As Map, neighbor As WallLike)
  overload: TinyLife.Objects.WallLike.OnNeighborChanged*
- uid: TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
  commentId: M:TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
  id: GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: GetDepth(Map, Point, Point, int, float)
  nameWithType: WallLike.GetDepth(Map, Point, Point, int, float)
  fullName: TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, int, float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Returns the depth that should be used for a wall placed at this wall's positions.

    This method is used for rendering <xref href="TinyLife.World.Wallpaper" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.WallLike.Opening" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static float GetDepth(Map map, Point pos1, Point pos2, int floor, float offset = 0)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that this wall is on
    - id: pos1
      type: Microsoft.Xna.Framework.Point
      description: The first position of the wall.
    - id: pos2
      type: Microsoft.Xna.Framework.Point
      description: The second position of the wall.
    - id: floor
      type: System.Int32
      description: The wall's current floor.
    - id: offset
      type: System.Single
      description: An offset that will be added to the depth calculation
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function GetDepth(map As Map, pos1 As Point, pos2 As Point, floor As Integer, offset As Single = 0) As Single
  overload: TinyLife.Objects.WallLike.GetDepth*
  nameWithType.vb: WallLike.GetDepth(Map, Point, Point, Integer, Single)
  fullName.vb: TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, Integer, Single)
  name.vb: GetDepth(Map, Point, Point, Integer, Single)
- uid: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: GetIndexForCamera(Point, Point)
  nameWithType: WallLike.GetIndexForCamera(Point, Point)
  fullName: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Returns the side of the wall that should be rendered.

    For <xref href="TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point%2cMicrosoft.Xna.Framework.Point)" data-throw-if-not-resolved="false"></xref> walls, the position with the highest X value is returned.

    For non-<xref href="TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point%2cMicrosoft.Xna.Framework.Point)" data-throw-if-not-resolved="false"></xref> walls, the position with the highest Y value is returned.
  example: []
  syntax:
    content: public static int GetIndexForCamera(Point pos1, Point pos2)
    parameters:
    - id: pos1
      type: Microsoft.Xna.Framework.Point
    - id: pos2
      type: Microsoft.Xna.Framework.Point
    return:
      type: System.Int32
      description: The side of the wall that should be rendered
    content.vb: Public Shared Function GetIndexForCamera(pos1 As Point, pos2 As Point) As Integer
  overload: TinyLife.Objects.WallLike.GetIndexForCamera*
- uid: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: GetPositionForCamera(Point, Point)
  nameWithType: WallLike.GetPositionForCamera(Point, Point)
  fullName: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Returns the position from the <xref href="TinyLife.Objects.WallLike.Positions" data-throw-if-not-resolved="false"></xref> array that <xref href="TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point%2cMicrosoft.Xna.Framework.Point)" data-throw-if-not-resolved="false"></xref> suggests.

    This is the side of the wall that currently faces the game camera.
  example: []
  syntax:
    content: public static Point GetPositionForCamera(Point pos1, Point pos2)
    parameters:
    - id: pos1
      type: Microsoft.Xna.Framework.Point
    - id: pos2
      type: Microsoft.Xna.Framework.Point
    return:
      type: Microsoft.Xna.Framework.Point
      description: The wall position that is facing the camera
    content.vb: Public Shared Function GetPositionForCamera(pos1 As Point, pos2 As Point) As Point
  overload: TinyLife.Objects.WallLike.GetPositionForCamera*
- uid: TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: GetCenterBottomPos(Point, Point)
  nameWithType: WallLike.GetCenterBottomPos(Point, Point)
  fullName: TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Returns the bottom-center position of this wall in world space, based on the <xref href="TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point%2cMicrosoft.Xna.Framework.Point)" data-throw-if-not-resolved="false"></xref> position.
  example: []
  syntax:
    content: public static Vector2 GetCenterBottomPos(Point pos1, Point pos2)
    parameters:
    - id: pos1
      type: Microsoft.Xna.Framework.Point
    - id: pos2
      type: Microsoft.Xna.Framework.Point
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The bottom-center position of this wall in world space.
    content.vb: Public Shared Function GetCenterBottomPos(pos1 As Point, pos2 As Point) As Vector2
  overload: TinyLife.Objects.WallLike.GetCenterBottomPos*
- uid: TinyLife.Objects.WallLike.IsVerticalForCamera(System.Boolean)
  commentId: M:TinyLife.Objects.WallLike.IsVerticalForCamera(System.Boolean)
  id: IsVerticalForCamera(System.Boolean)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: IsVerticalForCamera(bool)
  nameWithType: WallLike.IsVerticalForCamera(bool)
  fullName: TinyLife.Objects.WallLike.IsVerticalForCamera(bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Returns whether the wall is considered <xref href="TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point%2cMicrosoft.Xna.Framework.Point)" data-throw-if-not-resolved="false"></xref> based on the game's current <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref>.

    If the camera rotation is offset by 90 or -90 degrees from the default, wall verticalities are visually inversed.
  example: []
  syntax:
    content: public static bool IsVerticalForCamera(bool vertical)
    parameters:
    - id: vertical
      type: System.Boolean
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsVerticalForCamera(vertical As Boolean) As Boolean
  overload: TinyLife.Objects.WallLike.IsVerticalForCamera*
  nameWithType.vb: WallLike.IsVerticalForCamera(Boolean)
  fullName.vb: TinyLife.Objects.WallLike.IsVerticalForCamera(Boolean)
  name.vb: IsVerticalForCamera(Boolean)
- uid: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  langs:
  - csharp
  - vb
  name: IsVertical(Point, Point)
  nameWithType: WallLike.IsVertical(Point, Point)
  fullName: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Returns whether a wall with the given positions is considered vertical.
  example: []
  syntax:
    content: public static bool IsVertical(Point pos1, Point pos2)
    parameters:
    - id: pos1
      type: Microsoft.Xna.Framework.Point
      description: The first position of the wall.
    - id: pos2
      type: Microsoft.Xna.Framework.Point
      description: The second position of the wall.
    return:
      type: System.Boolean
      description: Whether a wall with the given positions is vertical.
    content.vb: Public Shared Function IsVertical(pos1 As Point, pos2 As Point) As Boolean
  overload: TinyLife.Objects.WallLike.IsVertical*
references:
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  href: TinyLife.World.Wall.html
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Objects.FenceWall
  commentId: T:TinyLife.Objects.FenceWall
  href: TinyLife.Objects.FenceWall.html
  name: FenceWall
  nameWithType: FenceWall
  fullName: TinyLife.Objects.FenceWall
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Objects.WallLike.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<WallLike>(WallLike)
  nameWithType: Extensions.JsonCopy<WallLike>(WallLike)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.WallLike>(TinyLife.Objects.WallLike)
  nameWithType.vb: Extensions.JsonCopy(Of WallLike)(WallLike)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.WallLike)(TinyLife.Objects.WallLike)
  name.vb: JsonCopy(Of WallLike)(WallLike)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.WallLike)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.WallLike)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: )
  - name: (
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: Microsoft.Xna.Framework.Point[]
  isExternal: true
  name: Point[]
  nameWithType: Point[]
  fullName: Microsoft.Xna.Framework.Point[]
  nameWithType.vb: Point()
  fullName.vb: Microsoft.Xna.Framework.Point()
  name.vb: Point()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Objects.WallLike.Opening
  commentId: P:TinyLife.Objects.WallLike.Opening
  parent: TinyLife.Objects.WallLike
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_Opening
  name: Opening
  nameWithType: WallLike.Opening
  fullName: TinyLife.Objects.WallLike.Opening
- uid: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  commentId: M:TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  parent: TinyLife.Objects.WallLike
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_SetOpening_TinyLife_World_Map_TinyLife_World_Opening_
  name: SetOpening(Map, Opening)
  nameWithType: WallLike.SetOpening(Map, Opening)
  fullName: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map, TinyLife.World.Opening)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
    name: SetOpening
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_SetOpening_TinyLife_World_Map_TinyLife_World_Opening_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
    name: SetOpening
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_SetOpening_TinyLife_World_Map_TinyLife_World_Opening_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: )
- uid: TinyLife.Objects.WallLike.Opening*
  commentId: Overload:TinyLife.Objects.WallLike.Opening
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_Opening
  name: Opening
  nameWithType: WallLike.Opening
  fullName: TinyLife.Objects.WallLike.Opening
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  href: TinyLife.World.Opening.html
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.WallLike.html
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.Objects.WallLike.#ctor*
  commentId: Overload:TinyLife.Objects.WallLike.#ctor
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike__ctor_System_Int32_Microsoft_Xna_Framework_Point___
  name: WallLike
  nameWithType: WallLike.WallLike
  fullName: TinyLife.Objects.WallLike.WallLike
  nameWithType.vb: WallLike.New
  fullName.vb: TinyLife.Objects.WallLike.New
  name.vb: New
- uid: TinyLife.World.Wall.Wallpapers
  commentId: F:TinyLife.World.Wall.Wallpapers
  href: TinyLife.World.Wall.html#TinyLife_World_Wall_Wallpapers
  name: Wallpapers
  nameWithType: Wall.Wallpapers
  fullName: TinyLife.World.Wall.Wallpapers
- uid: TinyLife.Objects.FenceWall.Type
  commentId: F:TinyLife.Objects.FenceWall.Type
  href: TinyLife.Objects.FenceWall.html#TinyLife_Objects_FenceWall_Type
  name: Type
  nameWithType: FenceWall.Type
  fullName: TinyLife.Objects.FenceWall.Type
- uid: TinyLife.Objects.WallLike.Draw*
  commentId: Overload:TinyLife.Objects.WallLike.Draw
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_Draw_TinyLife_World_Map_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_Microsoft_Xna_Framework_Vector2_System_Nullable_Microsoft_Xna_Framework_Color__System_Boolean_System_Boolean_
  name: Draw
  nameWithType: WallLike.Draw
  fullName: TinyLife.Objects.WallLike.Draw
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.WallLike.GetPrice*
  commentId: Overload:TinyLife.Objects.WallLike.GetPrice
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetPrice
  name: GetPrice
  nameWithType: WallLike.GetPrice
  fullName: TinyLife.Objects.WallLike.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.WallLike.Validate*
  commentId: Overload:TinyLife.Objects.WallLike.Validate
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_Validate_TinyLife_World_Map_TinyLife_Utilities_AppliedMigrations_
  name: Validate
  nameWithType: WallLike.Validate
  fullName: TinyLife.Objects.WallLike.Validate
- uid: TinyLife.Utilities.AppliedMigrations
  commentId: T:TinyLife.Utilities.AppliedMigrations
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.AppliedMigrations.html
  name: AppliedMigrations
  nameWithType: AppliedMigrations
  fullName: TinyLife.Utilities.AppliedMigrations
- uid: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  parent: TinyLife.Objects.WallLike
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_NotifyNeighbors_TinyLife_World_Map_
  name: NotifyNeighbors(Map)
  nameWithType: WallLike.NotifyNeighbors(Map)
  fullName: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
    name: NotifyNeighbors
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_NotifyNeighbors_TinyLife_World_Map_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
    name: NotifyNeighbors
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_NotifyNeighbors_TinyLife_World_Map_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: )
- uid: TinyLife.Objects.WallLike.OnAdded*
  commentId: Overload:TinyLife.Objects.WallLike.OnAdded
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_OnAdded_TinyLife_World_Map_
  name: OnAdded
  nameWithType: WallLike.OnAdded
  fullName: TinyLife.Objects.WallLike.OnAdded
- uid: TinyLife.Objects.WallLike.OnRemoved*
  commentId: Overload:TinyLife.Objects.WallLike.OnRemoved
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_OnRemoved_TinyLife_World_Map_
  name: OnRemoved
  nameWithType: WallLike.OnRemoved
  fullName: TinyLife.Objects.WallLike.OnRemoved
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionInfo.html
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Objects.WallLike.GetFreeActionSpotInfos*
  commentId: Overload:TinyLife.Objects.WallLike.GetFreeActionSpotInfos
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetFreeActionSpotInfos_TinyLife_World_Map_TinyLife_Objects_PersonLike_
  name: GetFreeActionSpotInfos
  nameWithType: WallLike.GetFreeActionSpotInfos
  fullName: TinyLife.Objects.WallLike.GetFreeActionSpotInfos
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ActionInfo>
  nameWithType: IEnumerable<ActionInfo>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionInfo>
  nameWithType.vb: IEnumerable(Of ActionInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionInfo)
  name.vb: IEnumerable(Of ActionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Objects.WallLike.SetOpening*
  commentId: Overload:TinyLife.Objects.WallLike.SetOpening
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_SetOpening_TinyLife_World_Map_TinyLife_World_Opening_
  name: SetOpening
  nameWithType: WallLike.SetOpening
  fullName: TinyLife.Objects.WallLike.SetOpening
- uid: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  commentId: M:TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  parent: TinyLife.Objects.WallLike
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_OnNeighborChanged_TinyLife_World_Map_TinyLife_Objects_WallLike_
  name: OnNeighborChanged(Map, WallLike)
  nameWithType: WallLike.OnNeighborChanged(Map, WallLike)
  fullName: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map, TinyLife.Objects.WallLike)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
    name: OnNeighborChanged
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_OnNeighborChanged_TinyLife_World_Map_TinyLife_Objects_WallLike_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
    name: OnNeighborChanged
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_OnNeighborChanged_TinyLife_World_Map_TinyLife_Objects_WallLike_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: )
- uid: TinyLife.Objects.WallLike.NotifyNeighbors*
  commentId: Overload:TinyLife.Objects.WallLike.NotifyNeighbors
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_NotifyNeighbors_TinyLife_World_Map_
  name: NotifyNeighbors
  nameWithType: WallLike.NotifyNeighbors
  fullName: TinyLife.Objects.WallLike.NotifyNeighbors
- uid: TinyLife.Objects.WallLike.OnNeighborChanged*
  commentId: Overload:TinyLife.Objects.WallLike.OnNeighborChanged
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_OnNeighborChanged_TinyLife_World_Map_TinyLife_Objects_WallLike_
  name: OnNeighborChanged
  nameWithType: WallLike.OnNeighborChanged
  fullName: TinyLife.Objects.WallLike.OnNeighborChanged
- uid: TinyLife.World.Wallpaper
  commentId: T:TinyLife.World.Wallpaper
  parent: TinyLife.World
  href: TinyLife.World.Wallpaper.html
  name: Wallpaper
  nameWithType: Wallpaper
  fullName: TinyLife.World.Wallpaper
- uid: TinyLife.Objects.WallLike.GetDepth*
  commentId: Overload:TinyLife.Objects.WallLike.GetDepth
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetDepth_TinyLife_World_Map_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_System_Int32_System_Single_
  name: GetDepth
  nameWithType: WallLike.GetDepth
  fullName: TinyLife.Objects.WallLike.GetDepth
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_IsVertical_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  name: IsVertical(Point, Point)
  nameWithType: WallLike.IsVertical(Point, Point)
  fullName: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: IsVertical
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_IsVertical_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: IsVertical
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_IsVertical_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.WallLike.GetIndexForCamera*
  commentId: Overload:TinyLife.Objects.WallLike.GetIndexForCamera
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetIndexForCamera_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  name: GetIndexForCamera
  nameWithType: WallLike.GetIndexForCamera
  fullName: TinyLife.Objects.WallLike.GetIndexForCamera
- uid: TinyLife.Objects.WallLike.Positions
  commentId: F:TinyLife.Objects.WallLike.Positions
  parent: TinyLife.Objects.WallLike
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_Positions
  name: Positions
  nameWithType: WallLike.Positions
  fullName: TinyLife.Objects.WallLike.Positions
- uid: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetIndexForCamera_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  name: GetIndexForCamera(Point, Point)
  nameWithType: WallLike.GetIndexForCamera(Point, Point)
  fullName: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetIndexForCamera
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetIndexForCamera_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetIndexForCamera
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetIndexForCamera_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.WallLike.GetPositionForCamera*
  commentId: Overload:TinyLife.Objects.WallLike.GetPositionForCamera
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetPositionForCamera_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  name: GetPositionForCamera
  nameWithType: WallLike.GetPositionForCamera
  fullName: TinyLife.Objects.WallLike.GetPositionForCamera
- uid: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetPositionForCamera_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  name: GetPositionForCamera(Point, Point)
  nameWithType: WallLike.GetPositionForCamera(Point, Point)
  fullName: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetPositionForCamera
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetPositionForCamera_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetPositionForCamera
    href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetPositionForCamera_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.WallLike.GetCenterBottomPos*
  commentId: Overload:TinyLife.Objects.WallLike.GetCenterBottomPos
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_GetCenterBottomPos_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  name: GetCenterBottomPos
  nameWithType: WallLike.GetCenterBottomPos
  fullName: TinyLife.Objects.WallLike.GetCenterBottomPos
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  href: TinyLife.Options.html#TinyLife_Options_CameraRotation
  name: CameraRotation
  nameWithType: Options.CameraRotation
  fullName: TinyLife.Options.CameraRotation
- uid: TinyLife.Objects.WallLike.IsVerticalForCamera*
  commentId: Overload:TinyLife.Objects.WallLike.IsVerticalForCamera
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_IsVerticalForCamera_System_Boolean_
  name: IsVerticalForCamera
  nameWithType: WallLike.IsVerticalForCamera
  fullName: TinyLife.Objects.WallLike.IsVerticalForCamera
- uid: TinyLife.Objects.WallLike.IsVertical*
  commentId: Overload:TinyLife.Objects.WallLike.IsVertical
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_IsVertical_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_
  name: IsVertical
  nameWithType: WallLike.IsVertical
  fullName: TinyLife.Objects.WallLike.IsVertical
