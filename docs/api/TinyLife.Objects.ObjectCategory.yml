### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  id: ObjectCategory
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.ObjectCategory.AllowedOnWater
  - TinyLife.Objects.ObjectCategory.ArtPiece
  - TinyLife.Objects.ObjectCategory.BabyBathtub
  - TinyLife.Objects.ObjectCategory.BabySittable
  - TinyLife.Objects.ObjectCategory.Barbecue
  - TinyLife.Objects.ObjectCategory.BartendingObject
  - TinyLife.Objects.ObjectCategory.Bathtub
  - TinyLife.Objects.ObjectCategory.Bookshelf
  - TinyLife.Objects.ObjectCategory.CafeDisplayCase
  - TinyLife.Objects.ObjectCategory.CanBeScrapped
  - TinyLife.Objects.ObjectCategory.CanBeThrownAway
  - TinyLife.Objects.ObjectCategory.CanCoverDoor
  - TinyLife.Objects.ObjectCategory.CanCoverWindow
  - TinyLife.Objects.ObjectCategory.CanGetDirty
  - TinyLife.Objects.ObjectCategory.CeilingHanging
  - TinyLife.Objects.ObjectCategory.Chair
  - TinyLife.Objects.ObjectCategory.ChangingStation
  - TinyLife.Objects.ObjectCategory.ChildStove
  - TinyLife.Objects.ObjectCategory.Cleanable
  - TinyLife.Objects.ObjectCategory.CoffeeMachine
  - TinyLife.Objects.ObjectCategory.Computer
  - TinyLife.Objects.ObjectCategory.Counter
  - TinyLife.Objects.ObjectCategory.CounterObject
  - TinyLife.Objects.ObjectCategory.Crib
  - TinyLife.Objects.ObjectCategory.DeskObject
  - TinyLife.Objects.ObjectCategory.DisallowedOnGround
  - TinyLife.Objects.ObjectCategory.DoubleBed
  - TinyLife.Objects.ObjectCategory.DumbbellHolder
  - TinyLife.Objects.ObjectCategory.Easel
  - TinyLife.Objects.ObjectCategory.FireLight
  - TinyLife.Objects.ObjectCategory.ForceGridPlacement
  - TinyLife.Objects.ObjectCategory.Fridge
  - TinyLife.Objects.ObjectCategory.Gravestone
  - TinyLife.Objects.ObjectCategory.Ground
  - TinyLife.Objects.ObjectCategory.GroundItem
  - TinyLife.Objects.ObjectCategory.Holdable
  - TinyLife.Objects.ObjectCategory.IgnoreHideHangingObjects
  - TinyLife.Objects.ObjectCategory.JungleGym
  - TinyLife.Objects.ObjectCategory.Lamp
  - TinyLife.Objects.ObjectCategory.LandlinePhone
  - TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  - TinyLife.Objects.ObjectCategory.Mailbox
  - TinyLife.Objects.ObjectCategory.Mirror
  - TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  - TinyLife.Objects.ObjectCategory.Newspaper
  - TinyLife.Objects.ObjectCategory.NonBuyable
  - TinyLife.Objects.ObjectCategory.NonColliding
  - TinyLife.Objects.ObjectCategory.NonMovable
  - TinyLife.Objects.ObjectCategory.NonSellable
  - TinyLife.Objects.ObjectCategory.Nothing
  - TinyLife.Objects.ObjectCategory.ObstructedByRoofs
  - TinyLife.Objects.ObjectCategory.OpeningHoursSign
  - TinyLife.Objects.ObjectCategory.Oven
  - TinyLife.Objects.ObjectCategory.People
  - TinyLife.Objects.ObjectCategory.PlantLike
  - TinyLife.Objects.ObjectCategory.Potty
  - TinyLife.Objects.ObjectCategory.ProteinShakeMaker
  - TinyLife.Objects.ObjectCategory.Rocks
  - TinyLife.Objects.ObjectCategory.RoofAttached
  - TinyLife.Objects.ObjectCategory.SandRequired
  - TinyLife.Objects.ObjectCategory.Sandbox
  - TinyLife.Objects.ObjectCategory.Self
  - TinyLife.Objects.ObjectCategory.Shower
  - TinyLife.Objects.ObjectCategory.SingleBed
  - TinyLife.Objects.ObjectCategory.Sink
  - TinyLife.Objects.ObjectCategory.SmallObject
  - TinyLife.Objects.ObjectCategory.Sofa
  - TinyLife.Objects.ObjectCategory.StandingDesk
  - TinyLife.Objects.ObjectCategory.Stove
  - TinyLife.Objects.ObjectCategory.Table
  - TinyLife.Objects.ObjectCategory.TallObject
  - TinyLife.Objects.ObjectCategory.TeaKit
  - TinyLife.Objects.ObjectCategory.Television
  - TinyLife.Objects.ObjectCategory.Toilet
  - TinyLife.Objects.ObjectCategory.ToyBox
  - TinyLife.Objects.ObjectCategory.TrashCan
  - TinyLife.Objects.ObjectCategory.Treadmill
  - TinyLife.Objects.ObjectCategory.Tree
  - TinyLife.Objects.ObjectCategory.TreeDecor
  - TinyLife.Objects.ObjectCategory.WallHanging
  - TinyLife.Objects.ObjectCategory.Walls
  - TinyLife.Objects.ObjectCategory.Wardrobe
  - TinyLife.Objects.ObjectCategory.WaterRequired
  - TinyLife.Objects.ObjectCategory.WoodworkingItem
  - TinyLife.Objects.ObjectCategory.op_BitwiseAnd(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.ObjectCategory.op_BitwiseOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.ObjectCategory.op_ExclusiveOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.ObjectCategory.op_Implicit(System.Numerics.BigInteger)~TinyLife.Objects.ObjectCategory
  - TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Numerics.BigInteger
  - TinyLife.Objects.ObjectCategory.op_OnesComplement(TinyLife.Objects.ObjectCategory)
  langs:
  - csharp
  - vb
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
  type: Class
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: " An object category is a way to tell the <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.AbstractSpot\" data-throw-if-not-resolved=\"false\"></xref> system what type an object is.\r\n An object can have any number of categories attached to it, since <xref href=\"DynamicEnums.DynamicEnum\" data-throw-if-not-resolved=\"false\"></xref> provides <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref>-like behavior.\r\n<remarks>\r\n Custom modded categories can be added and retrieved using the <xref href=\"DynamicEnums.DynamicEnum\" data-throw-if-not-resolved=\"false\"></xref> methods <xref href=\"DynamicEnums.DynamicEnum.AddFlag%60%601(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"DynamicEnums.DynamicEnum.Parse%60%601(System.String)\" data-throw-if-not-resolved=\"false\"></xref>. For object categories that should be unique to a specific mod (rather than shared between mods), it's recommended to prefix the name with the mod's <xref href=\"TinyLife.Mods.ModInfo.Id\" data-throw-if-not-resolved=\"false\"></xref>. To retrieve a potentially registered object category by name, or register it if it doesn't exist, you can use code like this:\r\n <pre><code class=\"lang-csharp\">DynamicEnum.Parse&lt;ObjectCategory&gt;(name) ?? DynamicEnum.AddFlag&lt;ObjectCategory&gt;(name)</code></pre></remarks>"
  example: []
  syntax:
    content: 'public class ObjectCategory : DynamicEnum'
    content.vb: Public Class ObjectCategory Inherits DynamicEnum
  inheritance:
  - System.Object
  - DynamicEnums.DynamicEnum
  inheritedMembers:
  - DynamicEnums.DynamicEnum.HasAllFlags(DynamicEnums.DynamicEnum)
  - DynamicEnums.DynamicEnum.HasAnyFlags(DynamicEnums.DynamicEnum)
  - DynamicEnums.DynamicEnum.ToString
  - DynamicEnums.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
  - DynamicEnums.DynamicEnum.AddValue``1(System.String)
  - DynamicEnums.DynamicEnum.AddFlag``1(System.String)
  - DynamicEnums.DynamicEnum.GetValues``1
  - DynamicEnums.DynamicEnum.GetUniqueValues``1
  - DynamicEnums.DynamicEnum.GetValues(System.Type)
  - DynamicEnums.DynamicEnum.GetFlags``1({T},System.Boolean)
  - DynamicEnums.DynamicEnum.GetUniqueFlags``1({T})
  - DynamicEnums.DynamicEnum.Or``1({T},{T})
  - DynamicEnums.DynamicEnum.And``1({T},{T})
  - DynamicEnums.DynamicEnum.Xor``1({T},{T})
  - DynamicEnums.DynamicEnum.Neg``1({T})
  - DynamicEnums.DynamicEnum.GetValue(DynamicEnums.DynamicEnum)
  - DynamicEnums.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
  - DynamicEnums.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
  - DynamicEnums.DynamicEnum.Parse``1(System.String)
  - DynamicEnums.DynamicEnum.Parse(System.Type,System.String)
  - DynamicEnums.DynamicEnum.IsDefined(System.Type,System.Numerics.BigInteger)
  - DynamicEnums.DynamicEnum.IsDefined(DynamicEnums.DynamicEnum)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  - TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.GetDefaultTab
  - TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Objects.ObjectCategory.Nothing
  commentId: F:TinyLife.Objects.ObjectCategory.Nothing
  id: Nothing
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Nothing
  nameWithType: ObjectCategory.Nothing
  fullName: TinyLife.Objects.ObjectCategory.Nothing
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that reprsents an object without any properties
  example: []
  syntax:
    content: public static readonly ObjectCategory Nothing
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly [Nothing] As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Ground
  commentId: F:TinyLife.Objects.ObjectCategory.Ground
  id: Ground
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Ground
  nameWithType: ObjectCategory.Ground
  fullName: TinyLife.Objects.ObjectCategory.Ground
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents the ground
  example: []
  syntax:
    content: public static readonly ObjectCategory Ground
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Ground As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Chair
  commentId: F:TinyLife.Objects.ObjectCategory.Chair
  id: Chair
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Chair
  nameWithType: ObjectCategory.Chair
  fullName: TinyLife.Objects.ObjectCategory.Chair
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents sittable surfaces for non-babies.
  example: []
  syntax:
    content: public static readonly ObjectCategory Chair
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Chair As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Sofa
  commentId: F:TinyLife.Objects.ObjectCategory.Sofa
  id: Sofa
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Sofa
  nameWithType: ObjectCategory.Sofa
  fullName: TinyLife.Objects.ObjectCategory.Sofa
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents living room-style sittable surfaces.
  example: []
  syntax:
    content: public static readonly ObjectCategory Sofa
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Sofa As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.BabySittable
  commentId: F:TinyLife.Objects.ObjectCategory.BabySittable
  id: BabySittable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: BabySittable
  nameWithType: ObjectCategory.BabySittable
  fullName: TinyLife.Objects.ObjectCategory.BabySittable
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that babies can sit on.
  example: []
  syntax:
    content: public static readonly ObjectCategory BabySittable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly BabySittable As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Toilet
  commentId: F:TinyLife.Objects.ObjectCategory.Toilet
  id: Toilet
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Toilet
  nameWithType: ObjectCategory.Toilet
  fullName: TinyLife.Objects.ObjectCategory.Toilet
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can use the toilet
  example: []
  syntax:
    content: public static readonly ObjectCategory Toilet
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Toilet As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.SingleBed
  commentId: F:TinyLife.Objects.ObjectCategory.SingleBed
  id: SingleBed
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: SingleBed
  nameWithType: ObjectCategory.SingleBed
  fullName: TinyLife.Objects.ObjectCategory.SingleBed
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents a single bed
  example: []
  syntax:
    content: public static readonly ObjectCategory SingleBed
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly SingleBed As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.DoubleBed
  commentId: F:TinyLife.Objects.ObjectCategory.DoubleBed
  id: DoubleBed
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: DoubleBed
  nameWithType: ObjectCategory.DoubleBed
  fullName: TinyLife.Objects.ObjectCategory.DoubleBed
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents a double bed
  example: []
  syntax:
    content: public static readonly ObjectCategory DoubleBed
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly DoubleBed As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Fridge
  commentId: F:TinyLife.Objects.ObjectCategory.Fridge
  id: Fridge
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Fridge
  nameWithType: ObjectCategory.Fridge
  fullName: TinyLife.Objects.ObjectCategory.Fridge
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can get food ingredients
  example: []
  syntax:
    content: public static readonly ObjectCategory Fridge
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Fridge As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Shower
  commentId: F:TinyLife.Objects.ObjectCategory.Shower
  id: Shower
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Shower
  nameWithType: ObjectCategory.Shower
  fullName: TinyLife.Objects.ObjectCategory.Shower
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can shower
  example: []
  syntax:
    content: public static readonly ObjectCategory Shower
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Shower As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Bathtub
  commentId: F:TinyLife.Objects.ObjectCategory.Bathtub
  id: Bathtub
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Bathtub
  nameWithType: ObjectCategory.Bathtub
  fullName: TinyLife.Objects.ObjectCategory.Bathtub
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can take a bath.
  example: []
  syntax:
    content: public static readonly ObjectCategory Bathtub
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Bathtub As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Counter
  commentId: F:TinyLife.Objects.ObjectCategory.Counter
  id: Counter
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Counter
  nameWithType: ObjectCategory.Counter
  fullName: TinyLife.Objects.ObjectCategory.Counter
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can prepare food and place <xref href="TinyLife.Objects.ObjectCategory.CounterObject" data-throw-if-not-resolved="false"></xref> objects
  example: []
  syntax:
    content: public static readonly ObjectCategory Counter
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Counter As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Stove
  commentId: F:TinyLife.Objects.ObjectCategory.Stove
  id: Stove
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Stove
  nameWithType: ObjectCategory.Stove
  fullName: TinyLife.Objects.ObjectCategory.Stove
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can cook food
  example: []
  syntax:
    content: public static readonly ObjectCategory Stove
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Stove As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Oven
  commentId: F:TinyLife.Objects.ObjectCategory.Oven
  id: Oven
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Oven
  nameWithType: ObjectCategory.Oven
  fullName: TinyLife.Objects.ObjectCategory.Oven
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can bake food
  example: []
  syntax:
    content: public static readonly ObjectCategory Oven
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Oven As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.SmallObject
  commentId: F:TinyLife.Objects.ObjectCategory.SmallObject
  id: SmallObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: SmallObject
  nameWithType: ObjectCategory.SmallObject
  fullName: TinyLife.Objects.ObjectCategory.SmallObject
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can sit on <xref href="TinyLife.Objects.ObjectCategory.Counter" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.ObjectCategory.Table" data-throw-if-not-resolved="false"></xref> objects. For objects that sit on these surfaces, but are not small, <xref href="TinyLife.Objects.ObjectCategory.LargeSurfaceObject" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static readonly ObjectCategory SmallObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly SmallObject As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.NonBuyable
  commentId: F:TinyLife.Objects.ObjectCategory.NonBuyable
  id: NonBuyable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NonBuyable
  nameWithType: ObjectCategory.NonBuyable
  fullName: TinyLife.Objects.ObjectCategory.NonBuyable
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that cannot be bought in the <xref href="TinyLife.Tools.FurnitureTool" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory NonBuyable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NonBuyable As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Table
  commentId: F:TinyLife.Objects.ObjectCategory.Table
  id: Table
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Table
  nameWithType: ObjectCategory.Table
  fullName: TinyLife.Objects.ObjectCategory.Table
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can place <xref href="TinyLife.Objects.ObjectCategory.SmallObject" data-throw-if-not-resolved="false"></xref> objects
  example: []
  syntax:
    content: public static readonly ObjectCategory Table
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Table As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Holdable
  commentId: F:TinyLife.Objects.ObjectCategory.Holdable
  id: Holdable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Holdable
  nameWithType: ObjectCategory.Holdable
  fullName: TinyLife.Objects.ObjectCategory.Holdable
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be held by a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory Holdable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Holdable As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.DeskObject
  commentId: F:TinyLife.Objects.ObjectCategory.DeskObject
  id: DeskObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: DeskObject
  nameWithType: ObjectCategory.DeskObject
  fullName: TinyLife.Objects.ObjectCategory.DeskObject
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be placed on desks and standing desks
  example: []
  syntax:
    content: public static readonly ObjectCategory DeskObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly DeskObject As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.DisallowedOnGround
  commentId: F:TinyLife.Objects.ObjectCategory.DisallowedOnGround
  id: DisallowedOnGround
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: DisallowedOnGround
  nameWithType: ObjectCategory.DisallowedOnGround
  fullName: TinyLife.Objects.ObjectCategory.DisallowedOnGround
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that cannot be placed on the ground, but only in object spots
  example: []
  syntax:
    content: public static readonly ObjectCategory DisallowedOnGround
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly DisallowedOnGround As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Computer
  commentId: F:TinyLife.Objects.ObjectCategory.Computer
  id: Computer
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Computer
  nameWithType: ObjectCategory.Computer
  fullName: TinyLife.Objects.ObjectCategory.Computer
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents computers
  example: []
  syntax:
    content: public static readonly ObjectCategory Computer
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Computer As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Sink
  commentId: F:TinyLife.Objects.ObjectCategory.Sink
  id: Sink
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Sink
  nameWithType: ObjectCategory.Sink
  fullName: TinyLife.Objects.ObjectCategory.Sink
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can clean dishes and wash hands
  example: []
  syntax:
    content: public static readonly ObjectCategory Sink
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Sink As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CounterObject
  commentId: F:TinyLife.Objects.ObjectCategory.CounterObject
  id: CounterObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CounterObject
  nameWithType: ObjectCategory.CounterObject
  fullName: TinyLife.Objects.ObjectCategory.CounterObject
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be placed on <xref href="TinyLife.Objects.ObjectCategory.Counter" data-throw-if-not-resolved="false"></xref> objects
  example: []
  syntax:
    content: public static readonly ObjectCategory CounterObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CounterObject As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Cleanable
  commentId: F:TinyLife.Objects.ObjectCategory.Cleanable
  id: Cleanable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Cleanable
  nameWithType: ObjectCategory.Cleanable
  fullName: TinyLife.Objects.ObjectCategory.Cleanable
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be cleaned in a <xref href="TinyLife.Objects.ObjectCategory.Sink" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory Cleanable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Cleanable As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.People
  commentId: F:TinyLife.Objects.ObjectCategory.People
  id: People
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: People
  nameWithType: ObjectCategory.People
  fullName: TinyLife.Objects.ObjectCategory.People
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that all <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> instances hae
  example: []
  syntax:
    content: public static readonly ObjectCategory People
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly People As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Mailbox
  commentId: F:TinyLife.Objects.ObjectCategory.Mailbox
  id: Mailbox
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Mailbox
  nameWithType: ObjectCategory.Mailbox
  fullName: TinyLife.Objects.ObjectCategory.Mailbox
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents mailboxes
  example: []
  syntax:
    content: public static readonly ObjectCategory Mailbox
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Mailbox As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Wardrobe
  commentId: F:TinyLife.Objects.ObjectCategory.Wardrobe
  id: Wardrobe
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Wardrobe
  nameWithType: ObjectCategory.Wardrobe
  fullName: TinyLife.Objects.ObjectCategory.Wardrobe
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> can change
  example: []
  syntax:
    content: public static readonly ObjectCategory Wardrobe
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Wardrobe As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  commentId: F:TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  id: NaturalGroundRequired
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NaturalGroundRequired
  nameWithType: ObjectCategory.NaturalGroundRequired
  fullName: TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can only be placed on natural ground, specifically tiles that have the <xref href="TinyLife.World.Tile.Category.Natural" data-throw-if-not-resolved="false"></xref> category.
  example: []
  syntax:
    content: public static readonly ObjectCategory NaturalGroundRequired
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NaturalGroundRequired As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.SandRequired
  commentId: F:TinyLife.Objects.ObjectCategory.SandRequired
  id: SandRequired
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: SandRequired
  nameWithType: ObjectCategory.SandRequired
  fullName: TinyLife.Objects.ObjectCategory.SandRequired
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can only be placed on sandy ground, specifically tiles that have the <xref href="TinyLife.World.Tile.Category.Sand" data-throw-if-not-resolved="false"></xref> category.
  example: []
  syntax:
    content: public static readonly ObjectCategory SandRequired
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly SandRequired As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.PlantLike
  commentId: F:TinyLife.Objects.ObjectCategory.PlantLike
  id: PlantLike
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: PlantLike
  nameWithType: ObjectCategory.PlantLike
  fullName: TinyLife.Objects.ObjectCategory.PlantLike
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that causes objects to make the natural place sound and default to the outdoors tab, but without any placement rules attached
  example: []
  syntax:
    content: public static readonly ObjectCategory PlantLike
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly PlantLike As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.WaterRequired
  commentId: F:TinyLife.Objects.ObjectCategory.WaterRequired
  id: WaterRequired
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: WaterRequired
  nameWithType: ObjectCategory.WaterRequired
  fullName: TinyLife.Objects.ObjectCategory.WaterRequired
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can only be placed on water.
  example: []
  syntax:
    content: public static readonly ObjectCategory WaterRequired
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly WaterRequired As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.AllowedOnWater
  commentId: F:TinyLife.Objects.ObjectCategory.AllowedOnWater
  id: AllowedOnWater
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: AllowedOnWater
  nameWithType: ObjectCategory.AllowedOnWater
  fullName: TinyLife.Objects.ObjectCategory.AllowedOnWater
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that are allowed on water, but for which water is not required.
  example: []
  syntax:
    content: public static readonly ObjectCategory AllowedOnWater
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly AllowedOnWater As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Self
  commentId: F:TinyLife.Objects.ObjectCategory.Self
  id: Self
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Self
  nameWithType: ObjectCategory.Self
  fullName: TinyLife.Objects.ObjectCategory.Self
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents the object that contains it
  example: []
  syntax:
    content: public static readonly ObjectCategory Self
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Self As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.WallHanging
  commentId: F:TinyLife.Objects.ObjectCategory.WallHanging
  id: WallHanging
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: WallHanging
  nameWithType: ObjectCategory.WallHanging
  fullName: TinyLife.Objects.ObjectCategory.WallHanging
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects which need to be hung on <xref href="TinyLife.World.Wall" data-throw-if-not-resolved="false"></xref> objects. If an object should be able to hang on a window or door, it should additionally have the <xref href="TinyLife.Objects.ObjectCategory.CanCoverWindow" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Objects.ObjectCategory.CanCoverDoor" data-throw-if-not-resolved="false"></xref> category.
  example: []
  syntax:
    content: public static readonly ObjectCategory WallHanging
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly WallHanging As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.ForceGridPlacement
  commentId: F:TinyLife.Objects.ObjectCategory.ForceGridPlacement
  id: ForceGridPlacement
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ForceGridPlacement
  nameWithType: ObjectCategory.ForceGridPlacement
  fullName: TinyLife.Objects.ObjectCategory.ForceGridPlacement
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects which cannot be placed off the grid using the ALT key in the <xref href="TinyLife.Tools.FurnitureTool" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory ForceGridPlacement
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ForceGridPlacement As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Easel
  commentId: F:TinyLife.Objects.ObjectCategory.Easel
  id: Easel
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Easel
  nameWithType: ObjectCategory.Easel
  fullName: TinyLife.Objects.ObjectCategory.Easel
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents places where one can paint paintings
  example: []
  syntax:
    content: public static readonly ObjectCategory Easel
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Easel As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Mirror
  commentId: F:TinyLife.Objects.ObjectCategory.Mirror
  id: Mirror
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Mirror
  nameWithType: ObjectCategory.Mirror
  fullName: TinyLife.Objects.ObjectCategory.Mirror
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents mirrors
  example: []
  syntax:
    content: public static readonly ObjectCategory Mirror
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Mirror As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Bookshelf
  commentId: F:TinyLife.Objects.ObjectCategory.Bookshelf
  id: Bookshelf
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Bookshelf
  nameWithType: ObjectCategory.Bookshelf
  fullName: TinyLife.Objects.ObjectCategory.Bookshelf
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents things that books are stored in
  example: []
  syntax:
    content: public static readonly ObjectCategory Bookshelf
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Bookshelf As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.NonColliding
  commentId: F:TinyLife.Objects.ObjectCategory.NonColliding
  id: NonColliding
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NonColliding
  nameWithType: ObjectCategory.NonColliding
  fullName: TinyLife.Objects.ObjectCategory.NonColliding
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents things that a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> does not collide with
  example: []
  syntax:
    content: public static readonly ObjectCategory NonColliding
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NonColliding As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Gravestone
  commentId: F:TinyLife.Objects.ObjectCategory.Gravestone
  id: Gravestone
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Gravestone
  nameWithType: ObjectCategory.Gravestone
  fullName: TinyLife.Objects.ObjectCategory.Gravestone
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents gravestones
  example: []
  syntax:
    content: public static readonly ObjectCategory Gravestone
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Gravestone As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.NonSellable
  commentId: F:TinyLife.Objects.ObjectCategory.NonSellable
  id: NonSellable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NonSellable
  nameWithType: ObjectCategory.NonSellable
  fullName: TinyLife.Objects.ObjectCategory.NonSellable
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents things that cannot be solved or removed using <xref href="TinyLife.Tools.RemoveTool" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory NonSellable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NonSellable As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.NonMovable
  commentId: F:TinyLife.Objects.ObjectCategory.NonMovable
  id: NonMovable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NonMovable
  nameWithType: ObjectCategory.NonMovable
  fullName: TinyLife.Objects.ObjectCategory.NonMovable
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents things that cannot be moved using <xref href="TinyLife.Tools.MoveTool" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory NonMovable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NonMovable As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Tree
  commentId: F:TinyLife.Objects.ObjectCategory.Tree
  id: Tree
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Tree
  nameWithType: ObjectCategory.Tree
  fullName: TinyLife.Objects.ObjectCategory.Tree
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents trees
  example: []
  syntax:
    content: public static readonly ObjectCategory Tree
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Tree As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Television
  commentId: F:TinyLife.Objects.ObjectCategory.Television
  id: Television
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Television
  nameWithType: ObjectCategory.Television
  fullName: TinyLife.Objects.ObjectCategory.Television
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents televisions
  example: []
  syntax:
    content: public static readonly ObjectCategory Television
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Television As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.BartendingObject
  commentId: F:TinyLife.Objects.ObjectCategory.BartendingObject
  id: BartendingObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: BartendingObject
  nameWithType: ObjectCategory.BartendingObject
  fullName: TinyLife.Objects.ObjectCategory.BartendingObject
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects a bartender can use
  example: []
  syntax:
    content: public static readonly ObjectCategory BartendingObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly BartendingObject As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Walls
  commentId: F:TinyLife.Objects.ObjectCategory.Walls
  id: Walls
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Walls
  nameWithType: ObjectCategory.Walls
  fullName: TinyLife.Objects.ObjectCategory.Walls
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents <xref href="TinyLife.Objects.WallLike" data-throw-if-not-resolved="false"></xref> objects. If this category is used, <xref href="TinyLife.Actions.Action.FindAllFreeWalls%60%601(TinyLife.Objects.PersonLike%2cTinyLife.World.Map%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Nullable%7bSystem.Single%7d%2cSystem.Nullable%7bSystem.Single%7d%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> is used for AI-based invocation.
  example: []
  syntax:
    content: public static readonly ObjectCategory Walls
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Walls As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  commentId: F:TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  id: LargeSurfaceObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: LargeSurfaceObject
  nameWithType: ObjectCategory.LargeSurfaceObject
  fullName: TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents an object which is large and can sit on a surface. This is a non-small version of <xref href="TinyLife.Objects.ObjectCategory.SmallObject" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly ObjectCategory LargeSurfaceObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly LargeSurfaceObject As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.StandingDesk
  commentId: F:TinyLife.Objects.ObjectCategory.StandingDesk
  id: StandingDesk
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: StandingDesk
  nameWithType: ObjectCategory.StandingDesk
  fullName: TinyLife.Objects.ObjectCategory.StandingDesk
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents desks that a person stands at, rather than sitting. Usually, objects with this category should also have the <xref href="TinyLife.Objects.ObjectCategory.Table" data-throw-if-not-resolved="false"></xref> category.
  example: []
  syntax:
    content: public static readonly ObjectCategory StandingDesk
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly StandingDesk As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Lamp
  commentId: F:TinyLife.Objects.ObjectCategory.Lamp
  id: Lamp
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Lamp
  nameWithType: ObjectCategory.Lamp
  fullName: TinyLife.Objects.ObjectCategory.Lamp
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for lamps that can be turned on and off. Objects that have this category are expected to extend <xref href="TinyLife.Objects.ILightObject" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly ObjectCategory Lamp
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Lamp As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CeilingHanging
  commentId: F:TinyLife.Objects.ObjectCategory.CeilingHanging
  id: CeilingHanging
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CeilingHanging
  nameWithType: ObjectCategory.CeilingHanging
  fullName: TinyLife.Objects.ObjectCategory.CeilingHanging
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for things that are hanging on the ceiling. For most objects in this category, <xref href="TinyLife.Objects.ObjectCategory.NonColliding" data-throw-if-not-resolved="false"></xref> should also be used.
  example: []
  syntax:
    content: public static readonly ObjectCategory CeilingHanging
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CeilingHanging As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CanCoverWindow
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverWindow
  id: CanCoverWindow
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanCoverWindow
  nameWithType: ObjectCategory.CanCoverWindow
  fullName: TinyLife.Objects.ObjectCategory.CanCoverWindow
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for things that can be attached to windows. If an object doesn't also have the <xref href="TinyLife.Objects.ObjectCategory.WallHanging" data-throw-if-not-resolved="false"></xref> category, this category has no effect.
  example: []
  syntax:
    content: public static readonly ObjectCategory CanCoverWindow
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanCoverWindow As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CanCoverDoor
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverDoor
  id: CanCoverDoor
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanCoverDoor
  nameWithType: ObjectCategory.CanCoverDoor
  fullName: TinyLife.Objects.ObjectCategory.CanCoverDoor
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for things that can be attached to doors (specifically, openings of the <xref href="TinyLife.World.WalkableOpening" data-throw-if-not-resolved="false"></xref> type). If an object doesn't also have the <xref href="TinyLife.Objects.ObjectCategory.WallHanging" data-throw-if-not-resolved="false"></xref> category, this category has no effect.
  example: []
  syntax:
    content: public static readonly ObjectCategory CanCoverDoor
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanCoverDoor As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Barbecue
  commentId: F:TinyLife.Objects.ObjectCategory.Barbecue
  id: Barbecue
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Barbecue
  nameWithType: ObjectCategory.Barbecue
  fullName: TinyLife.Objects.ObjectCategory.Barbecue
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for outdoor cooking spots
  example: []
  syntax:
    content: public static readonly ObjectCategory Barbecue
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Barbecue As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.TrashCan
  commentId: F:TinyLife.Objects.ObjectCategory.TrashCan
  id: TrashCan
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: TrashCan
  nameWithType: ObjectCategory.TrashCan
  fullName: TinyLife.Objects.ObjectCategory.TrashCan
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for places where items with the <xref href="TinyLife.Objects.ObjectCategory.CanBeThrownAway" data-throw-if-not-resolved="false"></xref> category can be thrown away
  example: []
  syntax:
    content: public static readonly ObjectCategory TrashCan
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly TrashCan As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CanBeThrownAway
  commentId: F:TinyLife.Objects.ObjectCategory.CanBeThrownAway
  id: CanBeThrownAway
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanBeThrownAway
  nameWithType: ObjectCategory.CanBeThrownAway
  fullName: TinyLife.Objects.ObjectCategory.CanBeThrownAway
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for items that can be thrown away in a <xref href="TinyLife.Objects.ObjectCategory.TrashCan" data-throw-if-not-resolved="false"></xref>, if they also have the <xref href="TinyLife.Objects.ObjectCategory.Holdable" data-throw-if-not-resolved="false"></xref> category
  example: []
  syntax:
    content: public static readonly ObjectCategory CanBeThrownAway
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanBeThrownAway As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CanBeScrapped
  commentId: F:TinyLife.Objects.ObjectCategory.CanBeScrapped
  id: CanBeScrapped
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanBeScrapped
  nameWithType: ObjectCategory.CanBeScrapped
  fullName: TinyLife.Objects.ObjectCategory.CanBeScrapped
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for items that can be scrapped using <xref href="TinyLife.Actions.ActionType.Scrap" data-throw-if-not-resolved="false"></xref> (provided they are on a lot that can be "edited" by the person executing the action)
  example: []
  syntax:
    content: public static readonly ObjectCategory CanBeScrapped
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanBeScrapped As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.ObstructedByRoofs
  commentId: F:TinyLife.Objects.ObjectCategory.ObstructedByRoofs
  id: ObstructedByRoofs
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ObstructedByRoofs
  nameWithType: ObjectCategory.ObstructedByRoofs
  fullName: TinyLife.Objects.ObjectCategory.ObstructedByRoofs
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for objects that get obstructed by roofs and tiles on floors above (and should be removed if a roof or tile is placed above them)
  example: []
  syntax:
    content: public static readonly ObjectCategory ObstructedByRoofs
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ObstructedByRoofs As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.RoofAttached
  commentId: F:TinyLife.Objects.ObjectCategory.RoofAttached
  id: RoofAttached
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: RoofAttached
  nameWithType: ObjectCategory.RoofAttached
  fullName: TinyLife.Objects.ObjectCategory.RoofAttached
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for objects that have to be attached to roofs (which is useful for chimneys and other rooftop items)
  example: []
  syntax:
    content: public static readonly ObjectCategory RoofAttached
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly RoofAttached As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.FireLight
  commentId: F:TinyLife.Objects.ObjectCategory.FireLight
  id: FireLight
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: FireLight
  nameWithType: ObjectCategory.FireLight
  fullName: TinyLife.Objects.ObjectCategory.FireLight
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for fireplaces and candles that can be lit and put out. Objects that have this category are expected to extend <xref href="TinyLife.Objects.ILightObject" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly ObjectCategory FireLight
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly FireLight As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.ToyBox
  commentId: F:TinyLife.Objects.ObjectCategory.ToyBox
  id: ToyBox
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ToyBox
  nameWithType: ObjectCategory.ToyBox
  fullName: TinyLife.Objects.ObjectCategory.ToyBox
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where kids can get toys
  example: []
  syntax:
    content: public static readonly ObjectCategory ToyBox
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ToyBox As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.ChildStove
  commentId: F:TinyLife.Objects.ObjectCategory.ChildStove
  id: ChildStove
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ChildStove
  nameWithType: ObjectCategory.ChildStove
  fullName: TinyLife.Objects.ObjectCategory.ChildStove
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where children can cook
  example: []
  syntax:
    content: public static readonly ObjectCategory ChildStove
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ChildStove As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Sandbox
  commentId: F:TinyLife.Objects.ObjectCategory.Sandbox
  id: Sandbox
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Sandbox
  nameWithType: ObjectCategory.Sandbox
  fullName: TinyLife.Objects.ObjectCategory.Sandbox
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where children can play in the sand
  example: []
  syntax:
    content: public static readonly ObjectCategory Sandbox
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Sandbox As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.JungleGym
  commentId: F:TinyLife.Objects.ObjectCategory.JungleGym
  id: JungleGym
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: JungleGym
  nameWithType: ObjectCategory.JungleGym
  fullName: TinyLife.Objects.ObjectCategory.JungleGym
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where children can play on a climbing frame or jungle gym.
  example: []
  syntax:
    content: public static readonly ObjectCategory JungleGym
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly JungleGym As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Newspaper
  commentId: F:TinyLife.Objects.ObjectCategory.Newspaper
  id: Newspaper
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Newspaper
  nameWithType: ObjectCategory.Newspaper
  fullName: TinyLife.Objects.ObjectCategory.Newspaper
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for newspapers.
  example: []
  syntax:
    content: public static readonly ObjectCategory Newspaper
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Newspaper As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CoffeeMachine
  commentId: F:TinyLife.Objects.ObjectCategory.CoffeeMachine
  id: CoffeeMachine
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CoffeeMachine
  nameWithType: ObjectCategory.CoffeeMachine
  fullName: TinyLife.Objects.ObjectCategory.CoffeeMachine
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for coffee machines.
  example: []
  syntax:
    content: public static readonly ObjectCategory CoffeeMachine
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CoffeeMachine As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CafeDisplayCase
  commentId: F:TinyLife.Objects.ObjectCategory.CafeDisplayCase
  id: CafeDisplayCase
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CafeDisplayCase
  nameWithType: ObjectCategory.CafeDisplayCase
  fullName: TinyLife.Objects.ObjectCategory.CafeDisplayCase
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for cafe display cases that barista employees can collect food from.
  example: []
  syntax:
    content: public static readonly ObjectCategory CafeDisplayCase
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CafeDisplayCase As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.GroundItem
  commentId: F:TinyLife.Objects.ObjectCategory.GroundItem
  id: GroundItem
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: GroundItem
  nameWithType: ObjectCategory.GroundItem
  fullName: TinyLife.Objects.ObjectCategory.GroundItem
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for objects that are flat on the ground, like rugs and grass patches.
  example: []
  syntax:
    content: public static readonly ObjectCategory GroundItem
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly GroundItem As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.TreeDecor
  commentId: F:TinyLife.Objects.ObjectCategory.TreeDecor
  id: TreeDecor
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: TreeDecor
  nameWithType: ObjectCategory.TreeDecor
  fullName: TinyLife.Objects.ObjectCategory.TreeDecor
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for objects that can be added to <xref href="TinyLife.Objects.ObjectCategory.Tree" data-throw-if-not-resolved="false"></xref> objects as decoration.
  example: []
  syntax:
    content: public static readonly ObjectCategory TreeDecor
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly TreeDecor As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.OpeningHoursSign
  commentId: F:TinyLife.Objects.ObjectCategory.OpeningHoursSign
  id: OpeningHoursSign
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: OpeningHoursSign
  nameWithType: ObjectCategory.OpeningHoursSign
  fullName: TinyLife.Objects.ObjectCategory.OpeningHoursSign
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be hovered over to see a lot employment's opening hours
  example: []
  syntax:
    content: public static readonly ObjectCategory OpeningHoursSign
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly OpeningHoursSign As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.TeaKit
  commentId: F:TinyLife.Objects.ObjectCategory.TeaKit
  id: TeaKit
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: TeaKit
  nameWithType: ObjectCategory.TeaKit
  fullName: TinyLife.Objects.ObjectCategory.TeaKit
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where tea can be made
  example: []
  syntax:
    content: public static readonly ObjectCategory TeaKit
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly TeaKit As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.LandlinePhone
  commentId: F:TinyLife.Objects.ObjectCategory.LandlinePhone
  id: LandlinePhone
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: LandlinePhone
  nameWithType: ObjectCategory.LandlinePhone
  fullName: TinyLife.Objects.ObjectCategory.LandlinePhone
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents landline phones, usually used with <xref href="TinyLife.Actions.Behaviors.PhoneBehavior" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly ObjectCategory LandlinePhone
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly LandlinePhone As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Rocks
  commentId: F:TinyLife.Objects.ObjectCategory.Rocks
  id: Rocks
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Rocks
  nameWithType: ObjectCategory.Rocks
  fullName: TinyLife.Objects.ObjectCategory.Rocks
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for big and small rocks.
  example: []
  syntax:
    content: public static readonly ObjectCategory Rocks
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Rocks As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.ArtPiece
  commentId: F:TinyLife.Objects.ObjectCategory.ArtPiece
  id: ArtPiece
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ArtPiece
  nameWithType: ObjectCategory.ArtPiece
  fullName: TinyLife.Objects.ObjectCategory.ArtPiece
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for art pieces that count towards a museum's requirements, and that can be viewed.
  example: []
  syntax:
    content: public static readonly ObjectCategory ArtPiece
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ArtPiece As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.TallObject
  commentId: F:TinyLife.Objects.ObjectCategory.TallObject
  id: TallObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: TallObject
  nameWithType: ObjectCategory.TallObject
  fullName: TinyLife.Objects.ObjectCategory.TallObject
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for objects that are tall enough that their upper half should be rendered on a higher floor, which is handled in <xref href="TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single%2cSystem.Object%2cMicrosoft.Xna.Framework.Vector2%2cMLEM.Maths.Direction2%2cMLEM.Textures.TextureRegion%2cMicrosoft.Xna.Framework.Color%2cSystem.Single%2cSystem.Collections.Generic.List%7bMLEM.Graphics.StaticSpriteBatch.Item%7d%2cSystem.Boolean%2cTinyLife.Objects.ParentInfo%2cSystem.Single%2cMicrosoft.Xna.Framework.Graphics.SpriteEffects)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly ObjectCategory TallObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly TallObject As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CanGetDirty
  commentId: F:TinyLife.Objects.ObjectCategory.CanGetDirty
  id: CanGetDirty
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanGetDirty
  nameWithType: ObjectCategory.CanGetDirty
  fullName: TinyLife.Objects.ObjectCategory.CanGetDirty
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for objects that can get dirty and subsequently be cleaned. This category is automatically applied to <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref> settings that have the <xref href="TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName" data-throw-if-not-resolved="false"></xref> set.
  example: []
  syntax:
    content: public static readonly ObjectCategory CanGetDirty
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanGetDirty As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.IgnoreHideHangingObjects
  commentId: F:TinyLife.Objects.ObjectCategory.IgnoreHideHangingObjects
  id: IgnoreHideHangingObjects
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: IgnoreHideHangingObjects
  nameWithType: ObjectCategory.IgnoreHideHangingObjects
  fullName: TinyLife.Objects.ObjectCategory.IgnoreHideHangingObjects
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: By default, all <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> objects that have the <xref href="TinyLife.Objects.ObjectCategory.WallHanging" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.ObjectCategory.NonColliding" data-throw-if-not-resolved="false"></xref> categories will be hidden from view if the <xref href="TinyLife.Options.HideHangingObjects" data-throw-if-not-resolved="false"></xref> option is enabled, and the current tool is the <xref href="TinyLife.Tools.PlayModeTool" data-throw-if-not-resolved="false"></xref>. This category causes a furniture object to display at all times regardless of these conditions.
  example: []
  syntax:
    content: public static readonly ObjectCategory IgnoreHideHangingObjects
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly IgnoreHideHangingObjects As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Potty
  commentId: F:TinyLife.Objects.ObjectCategory.Potty
  id: Potty
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Potty
  nameWithType: ObjectCategory.Potty
  fullName: TinyLife.Objects.ObjectCategory.Potty
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents toilets for babies
  example: []
  syntax:
    content: public static readonly ObjectCategory Potty
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Potty As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Treadmill
  commentId: F:TinyLife.Objects.ObjectCategory.Treadmill
  id: Treadmill
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Treadmill
  nameWithType: ObjectCategory.Treadmill
  fullName: TinyLife.Objects.ObjectCategory.Treadmill
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where people can run on a treadmill
  example: []
  syntax:
    content: public static readonly ObjectCategory Treadmill
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Treadmill As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.DumbbellHolder
  commentId: F:TinyLife.Objects.ObjectCategory.DumbbellHolder
  id: DumbbellHolder
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: DumbbellHolder
  nameWithType: ObjectCategory.DumbbellHolder
  fullName: TinyLife.Objects.ObjectCategory.DumbbellHolder
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where people can use dumbbells
  example: []
  syntax:
    content: public static readonly ObjectCategory DumbbellHolder
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly DumbbellHolder As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.WoodworkingItem
  commentId: F:TinyLife.Objects.ObjectCategory.WoodworkingItem
  id: WoodworkingItem
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: WoodworkingItem
  nameWithType: ObjectCategory.WoodworkingItem
  fullName: TinyLife.Objects.ObjectCategory.WoodworkingItem
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where woodworking can be done
  example: []
  syntax:
    content: public static readonly ObjectCategory WoodworkingItem
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly WoodworkingItem As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.ChangingStation
  commentId: F:TinyLife.Objects.ObjectCategory.ChangingStation
  id: ChangingStation
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ChangingStation
  nameWithType: ObjectCategory.ChangingStation
  fullName: TinyLife.Objects.ObjectCategory.ChangingStation
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where a baby's diaper can be changed
  example: []
  syntax:
    content: public static readonly ObjectCategory ChangingStation
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ChangingStation As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Crib
  commentId: F:TinyLife.Objects.ObjectCategory.Crib
  id: Crib
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Crib
  nameWithType: ObjectCategory.Crib
  fullName: TinyLife.Objects.ObjectCategory.Crib
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where a baby can sleep.
  example: []
  syntax:
    content: public static readonly ObjectCategory Crib
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Crib As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.BabyBathtub
  commentId: F:TinyLife.Objects.ObjectCategory.BabyBathtub
  id: BabyBathtub
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: BabyBathtub
  nameWithType: ObjectCategory.BabyBathtub
  fullName: TinyLife.Objects.ObjectCategory.BabyBathtub
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where a baby can be bathed.
  example: []
  syntax:
    content: public static readonly ObjectCategory BabyBathtub
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly BabyBathtub As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.ProteinShakeMaker
  commentId: F:TinyLife.Objects.ObjectCategory.ProteinShakeMaker
  id: ProteinShakeMaker
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ProteinShakeMaker
  nameWithType: ObjectCategory.ProteinShakeMaker
  fullName: TinyLife.Objects.ObjectCategory.ProteinShakeMaker
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where protein shakes can be made.
  example: []
  syntax:
    content: public static readonly ObjectCategory ProteinShakeMaker
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ProteinShakeMaker As ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Numerics.BigInteger
  commentId: M:TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Numerics.BigInteger
  id: op_Implicit(TinyLife.Objects.ObjectCategory)~System.Numerics.BigInteger
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: implicit operator BigInteger(ObjectCategory)
  nameWithType: ObjectCategory.implicit operator BigInteger(ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.implicit operator System.Numerics.BigInteger(TinyLife.Objects.ObjectCategory)
  type: Operator
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: Returns the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> representation of the given dynamic enum value
  example: []
  syntax:
    content: public static implicit operator BigInteger(ObjectCategory category)
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
    return:
      type: System.Numerics.BigInteger
      description: The value's number representation
    content.vb: Public Shared Widening Operator CType(category As ObjectCategory) As BigInteger
  overload: TinyLife.Objects.ObjectCategory.op_Implicit*
  nameWithType.vb: ObjectCategory.CType(ObjectCategory)
  fullName.vb: TinyLife.Objects.ObjectCategory.CType(TinyLife.Objects.ObjectCategory)
  name.vb: CType(ObjectCategory)
- uid: TinyLife.Objects.ObjectCategory.op_Implicit(System.Numerics.BigInteger)~TinyLife.Objects.ObjectCategory
  commentId: M:TinyLife.Objects.ObjectCategory.op_Implicit(System.Numerics.BigInteger)~TinyLife.Objects.ObjectCategory
  id: op_Implicit(System.Numerics.BigInteger)~TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: implicit operator ObjectCategory(BigInteger)
  nameWithType: ObjectCategory.implicit operator ObjectCategory(BigInteger)
  fullName: TinyLife.Objects.ObjectCategory.implicit operator TinyLife.Objects.ObjectCategory(System.Numerics.BigInteger)
  type: Operator
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: Returns the defined or combined dynamic enum value for the given <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> representation
  example: []
  syntax:
    content: public static implicit operator ObjectCategory(BigInteger value)
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value whose dynamic enum value to get
    return:
      type: TinyLife.Objects.ObjectCategory
      description: The defined or combined dynamic enum value
    content.vb: Public Shared Widening Operator CType(value As BigInteger) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_Implicit*
  nameWithType.vb: ObjectCategory.CType(BigInteger)
  fullName.vb: TinyLife.Objects.ObjectCategory.CType(System.Numerics.BigInteger)
  name.vb: CType(BigInteger)
- uid: TinyLife.Objects.ObjectCategory.op_BitwiseOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ObjectCategory.op_BitwiseOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  id: op_BitwiseOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: operator |(ObjectCategory, ObjectCategory)
  nameWithType: ObjectCategory.operator |(ObjectCategory, ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.operator |(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  type: Operator
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: Returns the bitwise OR (|) combination of the two dynamic enum values
  example: []
  syntax:
    content: public static ObjectCategory operator |(ObjectCategory left, ObjectCategory right)
    parameters:
    - id: left
      type: TinyLife.Objects.ObjectCategory
      description: The left value
    - id: right
      type: TinyLife.Objects.ObjectCategory
      description: The right value
    return:
      type: TinyLife.Objects.ObjectCategory
      description: The bitwise OR (|) combination
    content.vb: Public Shared Operator Or(left As ObjectCategory, right As ObjectCategory) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_BitwiseOr*
  nameWithType.vb: ObjectCategory.Or(ObjectCategory, ObjectCategory)
  fullName.vb: TinyLife.Objects.ObjectCategory.Or(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  name.vb: Or(ObjectCategory, ObjectCategory)
- uid: TinyLife.Objects.ObjectCategory.op_BitwiseAnd(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ObjectCategory.op_BitwiseAnd(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  id: op_BitwiseAnd(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: operator &(ObjectCategory, ObjectCategory)
  nameWithType: ObjectCategory.operator &(ObjectCategory, ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.operator &(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  type: Operator
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: Returns the bitwise AND (&amp;) combination of the two dynamic enum values
  example: []
  syntax:
    content: public static ObjectCategory operator &(ObjectCategory left, ObjectCategory right)
    parameters:
    - id: left
      type: TinyLife.Objects.ObjectCategory
      description: The left value
    - id: right
      type: TinyLife.Objects.ObjectCategory
      description: The right value
    return:
      type: TinyLife.Objects.ObjectCategory
      description: The bitwise AND (&amp;) combination
    content.vb: Public Shared Operator And(left As ObjectCategory, right As ObjectCategory) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_BitwiseAnd*
  nameWithType.vb: ObjectCategory.And(ObjectCategory, ObjectCategory)
  fullName.vb: TinyLife.Objects.ObjectCategory.And(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  name.vb: And(ObjectCategory, ObjectCategory)
- uid: TinyLife.Objects.ObjectCategory.op_ExclusiveOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ObjectCategory.op_ExclusiveOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  id: op_ExclusiveOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: operator ^(ObjectCategory, ObjectCategory)
  nameWithType: ObjectCategory.operator ^(ObjectCategory, ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.operator ^(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  type: Operator
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: Returns the bitwise XOR (^) combination of the two dynamic enum values
  example: []
  syntax:
    content: public static ObjectCategory operator ^(ObjectCategory left, ObjectCategory right)
    parameters:
    - id: left
      type: TinyLife.Objects.ObjectCategory
      description: The left value
    - id: right
      type: TinyLife.Objects.ObjectCategory
      description: The right value
    return:
      type: TinyLife.Objects.ObjectCategory
      description: The bitwise XOR (^) combination
    content.vb: Public Shared Operator Xor(left As ObjectCategory, right As ObjectCategory) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_ExclusiveOr*
  nameWithType.vb: ObjectCategory.Xor(ObjectCategory, ObjectCategory)
  fullName.vb: TinyLife.Objects.ObjectCategory.Xor(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  name.vb: Xor(ObjectCategory, ObjectCategory)
- uid: TinyLife.Objects.ObjectCategory.op_OnesComplement(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ObjectCategory.op_OnesComplement(TinyLife.Objects.ObjectCategory)
  id: op_OnesComplement(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: operator ~(ObjectCategory)
  nameWithType: ObjectCategory.operator ~(ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.operator ~(TinyLife.Objects.ObjectCategory)
  type: Operator
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: Returns the bitwise NEG (~) combination of the dynamic enum value
  example: []
  syntax:
    content: public static ObjectCategory operator ~(ObjectCategory value)
    parameters:
    - id: value
      type: TinyLife.Objects.ObjectCategory
      description: The value
    return:
      type: TinyLife.Objects.ObjectCategory
      description: The bitwise NEG (~) value
    content.vb: Public Shared Operator Not(value As ObjectCategory) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_OnesComplement*
  nameWithType.vb: ObjectCategory.Not(ObjectCategory)
  fullName.vb: TinyLife.Objects.ObjectCategory.Not(TinyLife.Objects.ObjectCategory)
  name.vb: Not(ObjectCategory)
references:
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  href: TinyLife.Actions.Action.html
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  href: TinyLife.Objects.AbstractSpot.html
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
- uid: DynamicEnums.DynamicEnum
  commentId: T:DynamicEnums.DynamicEnum
  parent: DynamicEnums
  isExternal: true
  name: DynamicEnum
  nameWithType: DynamicEnum
  fullName: DynamicEnums.DynamicEnum
- uid: System.FlagsAttribute
  commentId: T:System.FlagsAttribute
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.flagsattribute
  name: FlagsAttribute
  nameWithType: FlagsAttribute
  fullName: System.FlagsAttribute
- uid: DynamicEnums.DynamicEnum.AddFlag``1(System.String)
  commentId: M:DynamicEnums.DynamicEnum.AddFlag``1(System.String)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: AddFlag<T>(string)
  nameWithType: DynamicEnum.AddFlag<T>(string)
  fullName: DynamicEnums.DynamicEnum.AddFlag<T>(string)
  nameWithType.vb: DynamicEnum.AddFlag(Of T)(String)
  fullName.vb: DynamicEnums.DynamicEnum.AddFlag(Of T)(String)
  name.vb: AddFlag(Of T)(String)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.AddFlag``1(System.String)
    name: AddFlag
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.AddFlag``1(System.String)
    name: AddFlag
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: DynamicEnums.DynamicEnum.Parse``1(System.String)
  commentId: M:DynamicEnums.DynamicEnum.Parse``1(System.String)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Parse<T>(string)
  nameWithType: DynamicEnum.Parse<T>(string)
  fullName: DynamicEnums.DynamicEnum.Parse<T>(string)
  nameWithType.vb: DynamicEnum.Parse(Of T)(String)
  fullName.vb: DynamicEnums.DynamicEnum.Parse(Of T)(String)
  name.vb: Parse(Of T)(String)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Parse``1(System.String)
    name: Parse
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Parse``1(System.String)
    name: Parse
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: TinyLife.Mods.ModInfo.Id
  commentId: F:TinyLife.Mods.ModInfo.Id
  href: TinyLife.Mods.ModInfo.html#TinyLife_Mods_ModInfo_Id
  name: Id
  nameWithType: ModInfo.Id
  fullName: TinyLife.Mods.ModInfo.Id
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: DynamicEnums.DynamicEnum.HasAllFlags(DynamicEnums.DynamicEnum)
  commentId: M:DynamicEnums.DynamicEnum.HasAllFlags(DynamicEnums.DynamicEnum)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  name: HasAllFlags(DynamicEnum)
  nameWithType: DynamicEnum.HasAllFlags(DynamicEnum)
  fullName: DynamicEnums.DynamicEnum.HasAllFlags(DynamicEnums.DynamicEnum)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.HasAllFlags(DynamicEnums.DynamicEnum)
    name: HasAllFlags
    isExternal: true
  - name: (
  - uid: DynamicEnums.DynamicEnum
    name: DynamicEnum
    isExternal: true
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.HasAllFlags(DynamicEnums.DynamicEnum)
    name: HasAllFlags
    isExternal: true
  - name: (
  - uid: DynamicEnums.DynamicEnum
    name: DynamicEnum
    isExternal: true
  - name: )
- uid: DynamicEnums.DynamicEnum.HasAnyFlags(DynamicEnums.DynamicEnum)
  commentId: M:DynamicEnums.DynamicEnum.HasAnyFlags(DynamicEnums.DynamicEnum)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  name: HasAnyFlags(DynamicEnum)
  nameWithType: DynamicEnum.HasAnyFlags(DynamicEnum)
  fullName: DynamicEnums.DynamicEnum.HasAnyFlags(DynamicEnums.DynamicEnum)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.HasAnyFlags(DynamicEnums.DynamicEnum)
    name: HasAnyFlags
    isExternal: true
  - name: (
  - uid: DynamicEnums.DynamicEnum
    name: DynamicEnum
    isExternal: true
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.HasAnyFlags(DynamicEnums.DynamicEnum)
    name: HasAnyFlags
    isExternal: true
  - name: (
  - uid: DynamicEnums.DynamicEnum
    name: DynamicEnum
    isExternal: true
  - name: )
- uid: DynamicEnums.DynamicEnum.ToString
  commentId: M:DynamicEnums.DynamicEnum.ToString
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  name: ToString()
  nameWithType: DynamicEnum.ToString()
  fullName: DynamicEnums.DynamicEnum.ToString()
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: DynamicEnums.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
  commentId: M:DynamicEnums.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Add<T>(string, BigInteger)
  nameWithType: DynamicEnum.Add<T>(string, BigInteger)
  fullName: DynamicEnums.DynamicEnum.Add<T>(string, System.Numerics.BigInteger)
  nameWithType.vb: DynamicEnum.Add(Of T)(String, BigInteger)
  fullName.vb: DynamicEnums.DynamicEnum.Add(Of T)(String, System.Numerics.BigInteger)
  name.vb: Add(Of T)(String, BigInteger)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
    name: Add
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
    name: Add
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
- uid: DynamicEnums.DynamicEnum.AddValue``1(System.String)
  commentId: M:DynamicEnums.DynamicEnum.AddValue``1(System.String)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: AddValue<T>(string)
  nameWithType: DynamicEnum.AddValue<T>(string)
  fullName: DynamicEnums.DynamicEnum.AddValue<T>(string)
  nameWithType.vb: DynamicEnum.AddValue(Of T)(String)
  fullName.vb: DynamicEnums.DynamicEnum.AddValue(Of T)(String)
  name.vb: AddValue(Of T)(String)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.AddValue``1(System.String)
    name: AddValue
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.AddValue``1(System.String)
    name: AddValue
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: DynamicEnums.DynamicEnum.GetValues``1
  commentId: M:DynamicEnums.DynamicEnum.GetValues``1
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  name: GetValues<T>()
  nameWithType: DynamicEnum.GetValues<T>()
  fullName: DynamicEnums.DynamicEnum.GetValues<T>()
  nameWithType.vb: DynamicEnum.GetValues(Of T)()
  fullName.vb: DynamicEnums.DynamicEnum.GetValues(Of T)()
  name.vb: GetValues(Of T)()
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetValues``1
    name: GetValues
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetValues``1
    name: GetValues
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: DynamicEnums.DynamicEnum.GetUniqueValues``1
  commentId: M:DynamicEnums.DynamicEnum.GetUniqueValues``1
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  name: GetUniqueValues<T>()
  nameWithType: DynamicEnum.GetUniqueValues<T>()
  fullName: DynamicEnums.DynamicEnum.GetUniqueValues<T>()
  nameWithType.vb: DynamicEnum.GetUniqueValues(Of T)()
  fullName.vb: DynamicEnums.DynamicEnum.GetUniqueValues(Of T)()
  name.vb: GetUniqueValues(Of T)()
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetUniqueValues``1
    name: GetUniqueValues
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetUniqueValues``1
    name: GetUniqueValues
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: DynamicEnums.DynamicEnum.GetValues(System.Type)
  commentId: M:DynamicEnums.DynamicEnum.GetValues(System.Type)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: GetValues(Type)
  nameWithType: DynamicEnum.GetValues(Type)
  fullName: DynamicEnums.DynamicEnum.GetValues(System.Type)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetValues(System.Type)
    name: GetValues
    isExternal: true
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetValues(System.Type)
    name: GetValues
    isExternal: true
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: DynamicEnums.DynamicEnum.GetFlags``1({T},System.Boolean)
  commentId: M:DynamicEnums.DynamicEnum.GetFlags``1(``0,System.Boolean)
  parent: DynamicEnums.DynamicEnum
  definition: DynamicEnums.DynamicEnum.GetFlags``1(``0,System.Boolean)
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetFlags<T>(T, bool)
  nameWithType: DynamicEnum.GetFlags<T>(T, bool)
  fullName: DynamicEnums.DynamicEnum.GetFlags<T>(T, bool)
  nameWithType.vb: DynamicEnum.GetFlags(Of T)(T, Boolean)
  fullName.vb: DynamicEnums.DynamicEnum.GetFlags(Of T)(T, Boolean)
  name.vb: GetFlags(Of T)(T, Boolean)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetFlags``1(``0,System.Boolean)
    name: GetFlags
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetFlags``1(``0,System.Boolean)
    name: GetFlags
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: DynamicEnums.DynamicEnum.GetUniqueFlags``1({T})
  commentId: M:DynamicEnums.DynamicEnum.GetUniqueFlags``1(``0)
  parent: DynamicEnums.DynamicEnum
  definition: DynamicEnums.DynamicEnum.GetUniqueFlags``1(``0)
  name: GetUniqueFlags<T>(T)
  nameWithType: DynamicEnum.GetUniqueFlags<T>(T)
  fullName: DynamicEnums.DynamicEnum.GetUniqueFlags<T>(T)
  nameWithType.vb: DynamicEnum.GetUniqueFlags(Of T)(T)
  fullName.vb: DynamicEnums.DynamicEnum.GetUniqueFlags(Of T)(T)
  name.vb: GetUniqueFlags(Of T)(T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetUniqueFlags``1(``0)
    name: GetUniqueFlags
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetUniqueFlags``1(``0)
    name: GetUniqueFlags
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.Or``1({T},{T})
  commentId: M:DynamicEnums.DynamicEnum.Or``1(``0,``0)
  parent: DynamicEnums.DynamicEnum
  definition: DynamicEnums.DynamicEnum.Or``1(``0,``0)
  name: Or<T>(T, T)
  nameWithType: DynamicEnum.Or<T>(T, T)
  fullName: DynamicEnums.DynamicEnum.Or<T>(T, T)
  nameWithType.vb: DynamicEnum.Or(Of T)(T, T)
  fullName.vb: DynamicEnums.DynamicEnum.Or(Of T)(T, T)
  name.vb: Or(Of T)(T, T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Or``1(``0,``0)
    name: Or
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Or``1(``0,``0)
    name: Or
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.And``1({T},{T})
  commentId: M:DynamicEnums.DynamicEnum.And``1(``0,``0)
  parent: DynamicEnums.DynamicEnum
  definition: DynamicEnums.DynamicEnum.And``1(``0,``0)
  name: And<T>(T, T)
  nameWithType: DynamicEnum.And<T>(T, T)
  fullName: DynamicEnums.DynamicEnum.And<T>(T, T)
  nameWithType.vb: DynamicEnum.And(Of T)(T, T)
  fullName.vb: DynamicEnums.DynamicEnum.And(Of T)(T, T)
  name.vb: And(Of T)(T, T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.And``1(``0,``0)
    name: And
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.And``1(``0,``0)
    name: And
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.Xor``1({T},{T})
  commentId: M:DynamicEnums.DynamicEnum.Xor``1(``0,``0)
  parent: DynamicEnums.DynamicEnum
  definition: DynamicEnums.DynamicEnum.Xor``1(``0,``0)
  name: Xor<T>(T, T)
  nameWithType: DynamicEnum.Xor<T>(T, T)
  fullName: DynamicEnums.DynamicEnum.Xor<T>(T, T)
  nameWithType.vb: DynamicEnum.Xor(Of T)(T, T)
  fullName.vb: DynamicEnums.DynamicEnum.Xor(Of T)(T, T)
  name.vb: Xor(Of T)(T, T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Xor``1(``0,``0)
    name: Xor
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Xor``1(``0,``0)
    name: Xor
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.Neg``1({T})
  commentId: M:DynamicEnums.DynamicEnum.Neg``1(``0)
  parent: DynamicEnums.DynamicEnum
  definition: DynamicEnums.DynamicEnum.Neg``1(``0)
  name: Neg<T>(T)
  nameWithType: DynamicEnum.Neg<T>(T)
  fullName: DynamicEnums.DynamicEnum.Neg<T>(T)
  nameWithType.vb: DynamicEnum.Neg(Of T)(T)
  fullName.vb: DynamicEnums.DynamicEnum.Neg(Of T)(T)
  name.vb: Neg(Of T)(T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Neg``1(``0)
    name: Neg
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Neg``1(``0)
    name: Neg
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.GetValue(DynamicEnums.DynamicEnum)
  commentId: M:DynamicEnums.DynamicEnum.GetValue(DynamicEnums.DynamicEnum)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  name: GetValue(DynamicEnum)
  nameWithType: DynamicEnum.GetValue(DynamicEnum)
  fullName: DynamicEnums.DynamicEnum.GetValue(DynamicEnums.DynamicEnum)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetValue(DynamicEnums.DynamicEnum)
    name: GetValue
    isExternal: true
  - name: (
  - uid: DynamicEnums.DynamicEnum
    name: DynamicEnum
    isExternal: true
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetValue(DynamicEnums.DynamicEnum)
    name: GetValue
    isExternal: true
  - name: (
  - uid: DynamicEnums.DynamicEnum
    name: DynamicEnum
    isExternal: true
  - name: )
- uid: DynamicEnums.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
  commentId: M:DynamicEnums.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  name: GetEnumValue<T>(BigInteger)
  nameWithType: DynamicEnum.GetEnumValue<T>(BigInteger)
  fullName: DynamicEnums.DynamicEnum.GetEnumValue<T>(System.Numerics.BigInteger)
  nameWithType.vb: DynamicEnum.GetEnumValue(Of T)(BigInteger)
  fullName.vb: DynamicEnums.DynamicEnum.GetEnumValue(Of T)(System.Numerics.BigInteger)
  name.vb: GetEnumValue(Of T)(BigInteger)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
    name: GetEnumValue
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
    name: GetEnumValue
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
- uid: DynamicEnums.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
  commentId: M:DynamicEnums.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: GetEnumValue(Type, BigInteger)
  nameWithType: DynamicEnum.GetEnumValue(Type, BigInteger)
  fullName: DynamicEnums.DynamicEnum.GetEnumValue(System.Type, System.Numerics.BigInteger)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
    name: GetEnumValue
    isExternal: true
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
    name: GetEnumValue
    isExternal: true
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
- uid: DynamicEnums.DynamicEnum.Parse(System.Type,System.String)
  commentId: M:DynamicEnums.DynamicEnum.Parse(System.Type,System.String)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Parse(Type, string)
  nameWithType: DynamicEnum.Parse(Type, string)
  fullName: DynamicEnums.DynamicEnum.Parse(System.Type, string)
  nameWithType.vb: DynamicEnum.Parse(Type, String)
  fullName.vb: DynamicEnums.DynamicEnum.Parse(System.Type, String)
  name.vb: Parse(Type, String)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Parse(System.Type,System.String)
    name: Parse
    isExternal: true
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Parse(System.Type,System.String)
    name: Parse
    isExternal: true
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: DynamicEnums.DynamicEnum.IsDefined(System.Type,System.Numerics.BigInteger)
  commentId: M:DynamicEnums.DynamicEnum.IsDefined(System.Type,System.Numerics.BigInteger)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: IsDefined(Type, BigInteger)
  nameWithType: DynamicEnum.IsDefined(Type, BigInteger)
  fullName: DynamicEnums.DynamicEnum.IsDefined(System.Type, System.Numerics.BigInteger)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.IsDefined(System.Type,System.Numerics.BigInteger)
    name: IsDefined
    isExternal: true
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.IsDefined(System.Type,System.Numerics.BigInteger)
    name: IsDefined
    isExternal: true
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
- uid: DynamicEnums.DynamicEnum.IsDefined(DynamicEnums.DynamicEnum)
  commentId: M:DynamicEnums.DynamicEnum.IsDefined(DynamicEnums.DynamicEnum)
  parent: DynamicEnums.DynamicEnum
  isExternal: true
  name: IsDefined(DynamicEnum)
  nameWithType: DynamicEnum.IsDefined(DynamicEnum)
  fullName: DynamicEnums.DynamicEnum.IsDefined(DynamicEnums.DynamicEnum)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.IsDefined(DynamicEnums.DynamicEnum)
    name: IsDefined
    isExternal: true
  - name: (
  - uid: DynamicEnums.DynamicEnum
    name: DynamicEnum
    isExternal: true
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.IsDefined(DynamicEnums.DynamicEnum)
    name: IsDefined
    isExternal: true
  - name: (
  - uid: DynamicEnums.DynamicEnum
    name: DynamicEnum
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultDirtyOverlayTextureName_TinyLife_Objects_ObjectCategory_
  name: GetDefaultDirtyOverlayTextureName(ObjectCategory)
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
    name: GetDefaultDirtyOverlayTextureName
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultDirtyOverlayTextureName_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
    name: GetDefaultDirtyOverlayTextureName
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultDirtyOverlayTextureName_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
- uid: TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.GetDefaultTab
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultTab_TinyLife_Objects_ObjectCategory_
  name: GetDefaultTab(ObjectCategory)
  nameWithType: Extensions.GetDefaultTab(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
    name: GetDefaultTab
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultTab_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
    name: GetDefaultTab
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultTab_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
- uid: TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<ObjectCategory>(ObjectCategory)
  nameWithType: Extensions.JsonCopy<ObjectCategory>(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ObjectCategory>(TinyLife.Objects.ObjectCategory)
  nameWithType.vb: Extensions.JsonCopy(Of ObjectCategory)(ObjectCategory)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ObjectCategory)(TinyLife.Objects.ObjectCategory)
  name.vb: JsonCopy(Of ObjectCategory)(ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.ObjectCategory)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.ObjectCategory)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: DynamicEnums
  commentId: N:DynamicEnums
  isExternal: true
  name: DynamicEnums
  nameWithType: DynamicEnums
  fullName: DynamicEnums
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: DynamicEnums.DynamicEnum.GetFlags``1(``0,System.Boolean)
  commentId: M:DynamicEnums.DynamicEnum.GetFlags``1(``0,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetFlags<T>(T, bool)
  nameWithType: DynamicEnum.GetFlags<T>(T, bool)
  fullName: DynamicEnums.DynamicEnum.GetFlags<T>(T, bool)
  nameWithType.vb: DynamicEnum.GetFlags(Of T)(T, Boolean)
  fullName.vb: DynamicEnums.DynamicEnum.GetFlags(Of T)(T, Boolean)
  name.vb: GetFlags(Of T)(T, Boolean)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetFlags``1(``0,System.Boolean)
    name: GetFlags
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetFlags``1(``0,System.Boolean)
    name: GetFlags
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: DynamicEnums.DynamicEnum.GetUniqueFlags``1(``0)
  commentId: M:DynamicEnums.DynamicEnum.GetUniqueFlags``1(``0)
  isExternal: true
  name: GetUniqueFlags<T>(T)
  nameWithType: DynamicEnum.GetUniqueFlags<T>(T)
  fullName: DynamicEnums.DynamicEnum.GetUniqueFlags<T>(T)
  nameWithType.vb: DynamicEnum.GetUniqueFlags(Of T)(T)
  fullName.vb: DynamicEnums.DynamicEnum.GetUniqueFlags(Of T)(T)
  name.vb: GetUniqueFlags(Of T)(T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.GetUniqueFlags``1(``0)
    name: GetUniqueFlags
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.GetUniqueFlags``1(``0)
    name: GetUniqueFlags
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.Or``1(``0,``0)
  commentId: M:DynamicEnums.DynamicEnum.Or``1(``0,``0)
  isExternal: true
  name: Or<T>(T, T)
  nameWithType: DynamicEnum.Or<T>(T, T)
  fullName: DynamicEnums.DynamicEnum.Or<T>(T, T)
  nameWithType.vb: DynamicEnum.Or(Of T)(T, T)
  fullName.vb: DynamicEnums.DynamicEnum.Or(Of T)(T, T)
  name.vb: Or(Of T)(T, T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Or``1(``0,``0)
    name: Or
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Or``1(``0,``0)
    name: Or
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.And``1(``0,``0)
  commentId: M:DynamicEnums.DynamicEnum.And``1(``0,``0)
  isExternal: true
  name: And<T>(T, T)
  nameWithType: DynamicEnum.And<T>(T, T)
  fullName: DynamicEnums.DynamicEnum.And<T>(T, T)
  nameWithType.vb: DynamicEnum.And(Of T)(T, T)
  fullName.vb: DynamicEnums.DynamicEnum.And(Of T)(T, T)
  name.vb: And(Of T)(T, T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.And``1(``0,``0)
    name: And
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.And``1(``0,``0)
    name: And
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.Xor``1(``0,``0)
  commentId: M:DynamicEnums.DynamicEnum.Xor``1(``0,``0)
  isExternal: true
  name: Xor<T>(T, T)
  nameWithType: DynamicEnum.Xor<T>(T, T)
  fullName: DynamicEnums.DynamicEnum.Xor<T>(T, T)
  nameWithType.vb: DynamicEnum.Xor(Of T)(T, T)
  fullName.vb: DynamicEnums.DynamicEnum.Xor(Of T)(T, T)
  name.vb: Xor(Of T)(T, T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Xor``1(``0,``0)
    name: Xor
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Xor``1(``0,``0)
    name: Xor
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: DynamicEnums.DynamicEnum.Neg``1(``0)
  commentId: M:DynamicEnums.DynamicEnum.Neg``1(``0)
  isExternal: true
  name: Neg<T>(T)
  nameWithType: DynamicEnum.Neg<T>(T)
  fullName: DynamicEnums.DynamicEnum.Neg<T>(T)
  nameWithType.vb: DynamicEnum.Neg(Of T)(T)
  fullName.vb: DynamicEnums.DynamicEnum.Neg(Of T)(T)
  name.vb: Neg(Of T)(T)
  spec.csharp:
  - uid: DynamicEnums.DynamicEnum.Neg``1(``0)
    name: Neg
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: DynamicEnums.DynamicEnum.Neg``1(``0)
    name: Neg
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultDirtyOverlayTextureName_TinyLife_Objects_ObjectCategory_
  name: GetDefaultDirtyOverlayTextureName(ObjectCategory)
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
    name: GetDefaultDirtyOverlayTextureName
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultDirtyOverlayTextureName_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
    name: GetDefaultDirtyOverlayTextureName
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultDirtyOverlayTextureName_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultTab_TinyLife_Objects_ObjectCategory_
  name: GetDefaultTab(ObjectCategory)
  nameWithType: Extensions.GetDefaultTab(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
    name: GetDefaultTab
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultTab_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
    name: GetDefaultTab
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_GetDefaultTab_TinyLife_Objects_ObjectCategory_
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    href: TinyLife.Objects.ObjectCategory.html
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectCategory.html
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CounterObject
  commentId: F:TinyLife.Objects.ObjectCategory.CounterObject
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_CounterObject
  name: CounterObject
  nameWithType: ObjectCategory.CounterObject
  fullName: TinyLife.Objects.ObjectCategory.CounterObject
- uid: TinyLife.Objects.ObjectCategory.Counter
  commentId: F:TinyLife.Objects.ObjectCategory.Counter
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Counter
  name: Counter
  nameWithType: ObjectCategory.Counter
  fullName: TinyLife.Objects.ObjectCategory.Counter
- uid: TinyLife.Objects.ObjectCategory.Table
  commentId: F:TinyLife.Objects.ObjectCategory.Table
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Table
  name: Table
  nameWithType: ObjectCategory.Table
  fullName: TinyLife.Objects.ObjectCategory.Table
- uid: TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  commentId: F:TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_LargeSurfaceObject
  name: LargeSurfaceObject
  nameWithType: ObjectCategory.LargeSurfaceObject
  fullName: TinyLife.Objects.ObjectCategory.LargeSurfaceObject
- uid: TinyLife.Tools.FurnitureTool
  commentId: T:TinyLife.Tools.FurnitureTool
  parent: TinyLife.Tools
  href: TinyLife.Tools.FurnitureTool.html
  name: FurnitureTool
  nameWithType: FurnitureTool
  fullName: TinyLife.Tools.FurnitureTool
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  href: TinyLife.html
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Tools
    name: Tools
    href: TinyLife.Tools.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Tools
    name: Tools
    href: TinyLife.Tools.html
- uid: TinyLife.Objects.ObjectCategory.SmallObject
  commentId: F:TinyLife.Objects.ObjectCategory.SmallObject
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_SmallObject
  name: SmallObject
  nameWithType: ObjectCategory.SmallObject
  fullName: TinyLife.Objects.ObjectCategory.SmallObject
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.Objects.ObjectCategory.Sink
  commentId: F:TinyLife.Objects.ObjectCategory.Sink
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Sink
  name: Sink
  nameWithType: ObjectCategory.Sink
  fullName: TinyLife.Objects.ObjectCategory.Sink
- uid: TinyLife.World.Tile.Category.Natural
  commentId: F:TinyLife.World.Tile.Category.Natural
  href: TinyLife.World.Tile.Category.html#TinyLife_World_Tile_Category_Natural
  name: Natural
  nameWithType: Tile.Category.Natural
  fullName: TinyLife.World.Tile.Category.Natural
- uid: TinyLife.World.Tile.Category.Sand
  commentId: F:TinyLife.World.Tile.Category.Sand
  href: TinyLife.World.Tile.Category.html#TinyLife_World_Tile_Category_Sand
  name: Sand
  nameWithType: Tile.Category.Sand
  fullName: TinyLife.World.Tile.Category.Sand
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  href: TinyLife.World.Wall.html
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Objects.ObjectCategory.CanCoverWindow
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverWindow
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_CanCoverWindow
  name: CanCoverWindow
  nameWithType: ObjectCategory.CanCoverWindow
  fullName: TinyLife.Objects.ObjectCategory.CanCoverWindow
- uid: TinyLife.Objects.ObjectCategory.CanCoverDoor
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverDoor
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_CanCoverDoor
  name: CanCoverDoor
  nameWithType: ObjectCategory.CanCoverDoor
  fullName: TinyLife.Objects.ObjectCategory.CanCoverDoor
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: TinyLife.Tools.RemoveTool
  commentId: T:TinyLife.Tools.RemoveTool
  parent: TinyLife.Tools
  href: TinyLife.Tools.RemoveTool.html
  name: RemoveTool
  nameWithType: RemoveTool
  fullName: TinyLife.Tools.RemoveTool
- uid: TinyLife.Tools.MoveTool
  commentId: T:TinyLife.Tools.MoveTool
  parent: TinyLife.Tools
  href: TinyLife.Tools.MoveTool.html
  name: MoveTool
  nameWithType: MoveTool
  fullName: TinyLife.Tools.MoveTool
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.WallLike.html
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.Actions.Action.FindAllFreeWalls``1(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeWalls``1(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeWalls__1_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_
  name: FindAllFreeWalls<T>(PersonLike, Map, Vector2?, float?, float?, bool, bool)
  nameWithType: Action.FindAllFreeWalls<T>(PersonLike, Map, Vector2?, float?, float?, bool, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeWalls<T>(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, float?, float?, bool, bool)
  nameWithType.vb: Action.FindAllFreeWalls(Of T)(PersonLike, Map, Vector2?, Single?, Single?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeWalls(Of T)(TinyLife.Objects.PersonLike, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2?, Single?, Single?, Boolean, Boolean)
  name.vb: FindAllFreeWalls(Of T)(PersonLike, Map, Vector2?, Single?, Single?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeWalls``1(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeWalls
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeWalls__1_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeWalls``1(TinyLife.Objects.PersonLike,TinyLife.World.Map,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeWalls
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_FindAllFreeWalls__1_TinyLife_Objects_PersonLike_TinyLife_World_Map_System_Nullable_Microsoft_Xna_Framework_Vector2__System_Nullable_System_Single__System_Nullable_System_Single__System_Boolean_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.ILightObject
  commentId: T:TinyLife.Objects.ILightObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.ILightObject.html
  name: ILightObject
  nameWithType: ILightObject
  fullName: TinyLife.Objects.ILightObject
- uid: TinyLife.Objects.ObjectCategory.NonColliding
  commentId: F:TinyLife.Objects.ObjectCategory.NonColliding
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_NonColliding
  name: NonColliding
  nameWithType: ObjectCategory.NonColliding
  fullName: TinyLife.Objects.ObjectCategory.NonColliding
- uid: TinyLife.Objects.ObjectCategory.WallHanging
  commentId: F:TinyLife.Objects.ObjectCategory.WallHanging
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_WallHanging
  name: WallHanging
  nameWithType: ObjectCategory.WallHanging
  fullName: TinyLife.Objects.ObjectCategory.WallHanging
- uid: TinyLife.World.WalkableOpening
  commentId: T:TinyLife.World.WalkableOpening
  parent: TinyLife.World
  href: TinyLife.World.WalkableOpening.html
  name: WalkableOpening
  nameWithType: WalkableOpening
  fullName: TinyLife.World.WalkableOpening
- uid: TinyLife.Objects.ObjectCategory.CanBeThrownAway
  commentId: F:TinyLife.Objects.ObjectCategory.CanBeThrownAway
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_CanBeThrownAway
  name: CanBeThrownAway
  nameWithType: ObjectCategory.CanBeThrownAway
  fullName: TinyLife.Objects.ObjectCategory.CanBeThrownAway
- uid: TinyLife.Objects.ObjectCategory.TrashCan
  commentId: F:TinyLife.Objects.ObjectCategory.TrashCan
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_TrashCan
  name: TrashCan
  nameWithType: ObjectCategory.TrashCan
  fullName: TinyLife.Objects.ObjectCategory.TrashCan
- uid: TinyLife.Objects.ObjectCategory.Holdable
  commentId: F:TinyLife.Objects.ObjectCategory.Holdable
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Holdable
  name: Holdable
  nameWithType: ObjectCategory.Holdable
  fullName: TinyLife.Objects.ObjectCategory.Holdable
- uid: TinyLife.Actions.ActionType.Scrap
  commentId: F:TinyLife.Actions.ActionType.Scrap
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Scrap
  name: Scrap
  nameWithType: ActionType.Scrap
  fullName: TinyLife.Actions.ActionType.Scrap
- uid: TinyLife.Objects.ObjectCategory.Tree
  commentId: F:TinyLife.Objects.ObjectCategory.Tree
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Tree
  name: Tree
  nameWithType: ObjectCategory.Tree
  fullName: TinyLife.Objects.ObjectCategory.Tree
- uid: TinyLife.Actions.Behaviors.PhoneBehavior
  commentId: T:TinyLife.Actions.Behaviors.PhoneBehavior
  href: TinyLife.Actions.Behaviors.PhoneBehavior.html
  name: PhoneBehavior
  nameWithType: PhoneBehavior
  fullName: TinyLife.Actions.Behaviors.PhoneBehavior
- uid: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Maths.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects)
  commentId: M:TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Maths.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects)
  isExternal: true
  href: TinyLife.Objects.FurnitureType.html#TinyLife_Objects_FurnitureType_DrawColumns_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_System_Object_Microsoft_Xna_Framework_Vector2_MLEM_Maths_Direction2_MLEM_Textures_TextureRegion_Microsoft_Xna_Framework_Color_System_Single_System_Collections_Generic_List_MLEM_Graphics_StaticSpriteBatch_Item__System_Boolean_TinyLife_Objects_ParentInfo_System_Single_Microsoft_Xna_Framework_Graphics_SpriteEffects_
  name: DrawColumns(Map, Vector2, float, object, Vector2, Direction2, TextureRegion, Color, float, List<Item>, bool, ParentInfo, float, SpriteEffects)
  nameWithType: FurnitureType.DrawColumns(Map, Vector2, float, object, Vector2, Direction2, TextureRegion, Color, float, List<StaticSpriteBatch.Item>, bool, ParentInfo, float, SpriteEffects)
  fullName: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, float, object, Microsoft.Xna.Framework.Vector2, MLEM.Maths.Direction2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, float, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>, bool, TinyLife.Objects.ParentInfo, float, Microsoft.Xna.Framework.Graphics.SpriteEffects)
  nameWithType.vb: FurnitureType.DrawColumns(Map, Vector2, Single, Object, Vector2, Direction2, TextureRegion, Color, Single, List(Of StaticSpriteBatch.Item), Boolean, ParentInfo, Single, SpriteEffects)
  fullName.vb: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Single, Object, Microsoft.Xna.Framework.Vector2, MLEM.Maths.Direction2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, Single, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item), Boolean, TinyLife.Objects.ParentInfo, Single, Microsoft.Xna.Framework.Graphics.SpriteEffects)
  name.vb: DrawColumns(Map, Vector2, Single, Object, Vector2, Direction2, TextureRegion, Color, Single, List(Of Item), Boolean, ParentInfo, Single, SpriteEffects)
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Maths.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects)
    name: DrawColumns
    href: TinyLife.Objects.FurnitureType.html#TinyLife_Objects_FurnitureType_DrawColumns_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_System_Object_Microsoft_Xna_Framework_Vector2_MLEM_Maths_Direction2_MLEM_Textures_TextureRegion_Microsoft_Xna_Framework_Color_System_Single_System_Collections_Generic_List_MLEM_Graphics_StaticSpriteBatch_Item__System_Boolean_TinyLife_Objects_ParentInfo_System_Single_Microsoft_Xna_Framework_Graphics_SpriteEffects_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
    href: TinyLife.Objects.ParentInfo.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Maths.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects)
    name: DrawColumns
    href: TinyLife.Objects.FurnitureType.html#TinyLife_Objects_FurnitureType_DrawColumns_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_System_Object_Microsoft_Xna_Framework_Vector2_MLEM_Maths_Direction2_MLEM_Textures_TextureRegion_Microsoft_Xna_Framework_Color_System_Single_System_Collections_Generic_List_MLEM_Graphics_StaticSpriteBatch_Item__System_Boolean_TinyLife_Objects_ParentInfo_System_Single_Microsoft_Xna_Framework_Graphics_SpriteEffects_
  - name: (
  - uid: TinyLife.World.Map
    name: Map
    href: TinyLife.World.Map.html
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
    href: TinyLife.Objects.ParentInfo.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    isExternal: true
  - name: )
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  href: TinyLife.Objects.FurnitureType.html
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  href: TinyLife.Objects.FurnitureType.TypeSettings.html#TinyLife_Objects_FurnitureType_TypeSettings_DirtyOverlayTextureName
  name: DirtyOverlayTextureName
  nameWithType: FurnitureType.TypeSettings.DirtyOverlayTextureName
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  href: TinyLife.Objects.Furniture.html
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Options.HideHangingObjects
  commentId: F:TinyLife.Options.HideHangingObjects
  href: TinyLife.Options.html#TinyLife_Options_HideHangingObjects
  name: HideHangingObjects
  nameWithType: Options.HideHangingObjects
  fullName: TinyLife.Options.HideHangingObjects
- uid: TinyLife.Tools.PlayModeTool
  commentId: T:TinyLife.Tools.PlayModeTool
  parent: TinyLife.Tools
  href: TinyLife.Tools.PlayModeTool.html
  name: PlayModeTool
  nameWithType: PlayModeTool
  fullName: TinyLife.Tools.PlayModeTool
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: TinyLife.Objects.ObjectCategory.op_Implicit*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_Implicit
  name: implicit operator
  nameWithType: ObjectCategory.implicit operator
  fullName: TinyLife.Objects.ObjectCategory.implicit operator
  nameWithType.vb: ObjectCategory.CType
  fullName.vb: TinyLife.Objects.ObjectCategory.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: TinyLife.Objects.ObjectCategory.op_BitwiseOr*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_BitwiseOr
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_op_BitwiseOr_TinyLife_Objects_ObjectCategory_TinyLife_Objects_ObjectCategory_
  name: operator |
  nameWithType: ObjectCategory.operator |
  fullName: TinyLife.Objects.ObjectCategory.operator |
  nameWithType.vb: ObjectCategory.Or
  fullName.vb: TinyLife.Objects.ObjectCategory.Or
  name.vb: Or
  spec.csharp:
  - name: operator
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory.op_BitwiseOr*
    name: '|'
    href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_op_BitwiseOr_TinyLife_Objects_ObjectCategory_TinyLife_Objects_ObjectCategory_
- uid: TinyLife.Objects.ObjectCategory.op_BitwiseAnd*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_BitwiseAnd
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_op_BitwiseAnd_TinyLife_Objects_ObjectCategory_TinyLife_Objects_ObjectCategory_
  name: operator &
  nameWithType: ObjectCategory.operator &
  fullName: TinyLife.Objects.ObjectCategory.operator &
  nameWithType.vb: ObjectCategory.And
  fullName.vb: TinyLife.Objects.ObjectCategory.And
  name.vb: And
  spec.csharp:
  - name: operator
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory.op_BitwiseAnd*
    name: '&'
    href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_op_BitwiseAnd_TinyLife_Objects_ObjectCategory_TinyLife_Objects_ObjectCategory_
- uid: TinyLife.Objects.ObjectCategory.op_ExclusiveOr*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_ExclusiveOr
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_op_ExclusiveOr_TinyLife_Objects_ObjectCategory_TinyLife_Objects_ObjectCategory_
  name: operator ^
  nameWithType: ObjectCategory.operator ^
  fullName: TinyLife.Objects.ObjectCategory.operator ^
  nameWithType.vb: ObjectCategory.Xor
  fullName.vb: TinyLife.Objects.ObjectCategory.Xor
  name.vb: Xor
  spec.csharp:
  - name: operator
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory.op_ExclusiveOr*
    name: ^
    href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_op_ExclusiveOr_TinyLife_Objects_ObjectCategory_TinyLife_Objects_ObjectCategory_
- uid: TinyLife.Objects.ObjectCategory.op_OnesComplement*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_OnesComplement
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_op_OnesComplement_TinyLife_Objects_ObjectCategory_
  name: operator ~
  nameWithType: ObjectCategory.operator ~
  fullName: TinyLife.Objects.ObjectCategory.operator ~
  nameWithType.vb: ObjectCategory.Not
  fullName.vb: TinyLife.Objects.ObjectCategory.Not
  name.vb: Not
  spec.csharp:
  - name: operator
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory.op_OnesComplement*
    name: "~"
    href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_op_OnesComplement_TinyLife_Objects_ObjectCategory_
