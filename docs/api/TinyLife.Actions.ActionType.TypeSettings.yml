### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.ActionType.TypeSettings
  commentId: T:TinyLife.Actions.ActionType.TypeSettings
  id: ActionType.TypeSettings
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.ActionType.TypeSettings.#ctor
  - TinyLife.Actions.ActionType.TypeSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.Type)
  - TinyLife.Actions.ActionType.TypeSettings.Ai
  - TinyLife.Actions.ActionType.TypeSettings.CanExecute
  - TinyLife.Actions.ActionType.TypeSettings.Categories
  - TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  - TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  - TinyLife.Actions.ActionType.TypeSettings.Context
  - TinyLife.Actions.ActionType.TypeSettings.EnqueuePriority
  - TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
  - TinyLife.Actions.ActionType.TypeSettings.GetData``1(System.String)
  - TinyLife.Actions.ActionType.TypeSettings.GetDisplayName
  - TinyLife.Actions.ActionType.TypeSettings.IconName
  - TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
  - TinyLife.Actions.ActionType.TypeSettings.InteractionMenuPriority
  - TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  - TinyLife.Actions.ActionType.TypeSettings.MaximumArguments
  - TinyLife.Actions.ActionType.TypeSettings.Migrations
  - TinyLife.Actions.ActionType.TypeSettings.Name
  - TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  - TinyLife.Actions.ActionType.TypeSettings.NoValidArgumentsResult
  - TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
  - TinyLife.Actions.ActionType.TypeSettings.RequiredAges
  - TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  - TinyLife.Actions.ActionType.TypeSettings.RequiredJob
  - TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerAges
  - TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerEmployment
  - TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerType
  - TinyLife.Actions.ActionType.TypeSettings.RequiredPersonType
  - TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  - TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  - TinyLife.Actions.ActionType.TypeSettings.RequiredUpgrade
  - TinyLife.Actions.ActionType.TypeSettings.SetData``1(System.String,``0)
  - TinyLife.Actions.ActionType.TypeSettings.Texture
  langs:
  - csharp
  - vb
  name: ActionType.TypeSettings
  nameWithType: ActionType.TypeSettings
  fullName: TinyLife.Actions.ActionType.TypeSettings
  type: Struct
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: A struct that contains information about an <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: 'public struct ActionType.TypeSettings : IGenericDataHolder'
    content.vb: Public Structure ActionType.TypeSettings Implements IGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Actions.ActionType.TypeSettings.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Actions.ActionType.TypeSettings.Name
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Name
  id: Name
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ActionType.TypeSettings.Name
  fullName: TinyLife.Actions.ActionType.TypeSettings.Name
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The name of this action type
  example: []
  syntax:
    content: public string Name
    return:
      type: System.String
    content.vb: Public Name As String
- uid: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  commentId: P:TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  id: NameWithoutCategory
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: NameWithoutCategory
  nameWithType: ActionType.TypeSettings.NameWithoutCategory
  fullName: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.Actions.ActionType.TypeSettings.Name" data-throw-if-not-resolved="false"></xref> of this action type, but without a possible category prefix.

    This property automatically returns a substring of <xref href="TinyLife.Actions.ActionType.TypeSettings.Name" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly string NameWithoutCategory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property NameWithoutCategory As String
  overload: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory*
- uid: TinyLife.Actions.ActionType.TypeSettings.Categories
  commentId: P:TinyLife.Actions.ActionType.TypeSettings.Categories
  id: Categories
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Categories
  nameWithType: ActionType.TypeSettings.Categories
  fullName: TinyLife.Actions.ActionType.TypeSettings.Categories
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The categories of this action type. The categories are strings at the start of this action type's <xref href="TinyLife.Actions.ActionType.TypeSettings.Name" data-throw-if-not-resolved="false"></xref> delimited with a slash (/) character.

    This property automatically returns a substring of <xref href="TinyLife.Actions.ActionType.TypeSettings.Name" data-throw-if-not-resolved="false"></xref>, converted to an array.
  example: []
  syntax:
    content: public readonly string[] Categories { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property Categories As String()
  overload: TinyLife.Actions.ActionType.TypeSettings.Categories*
- uid: TinyLife.Actions.ActionType.TypeSettings.Texture
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Texture
  id: Texture
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: ActionType.TypeSettings.Texture
  fullName: TinyLife.Actions.ActionType.TypeSettings.Texture
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The texture region used in the top left action queue display in-game.

    If this value is null, <xref href="TinyLife.Actions.Action.GetIconObject" data-throw-if-not-resolved="false"></xref> is used for the icon instead.
  example: []
  syntax:
    content: public TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public Texture As TextureRegion
- uid: TinyLife.Actions.ActionType.TypeSettings.Context
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Context
  id: Context
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: ActionType.TypeSettings.Context
  fullName: TinyLife.Actions.ActionType.TypeSettings.Context
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A combined <xref href="TinyLife.Objects.ObjectCategory" data-throw-if-not-resolved="false"></xref> flag that represents all of the objects that this action can be executed on.

    Setting the context to <xref href="TinyLife.Objects.ObjectCategory.Nothing" data-throw-if-not-resolved="false"></xref> and giving the action <xref href="TinyLife.Actions.ActionType.AiSettings" data-throw-if-not-resolved="false"></xref> causes it to be invoked from the AI as if it had the <xref href="TinyLife.Objects.ObjectCategory.Self" data-throw-if-not-resolved="false"></xref> category instead.
  example: []
  syntax:
    content: public ObjectCategory Context
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Context As ObjectCategory
- uid: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.CanExecute
  id: CanExecute
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: CanExecute
  nameWithType: ActionType.TypeSettings.CanExecute
  fullName: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A delegate that returns a <xref href="TinyLife.Actions.CanExecuteResult" data-throw-if-not-resolved="false"></xref> based on whether the given situation allows this action to be executed.

    This value is initialized always return <xref href="TinyLife.Actions.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref>.

    To query this delegate effectively, use <xref href="TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>, which also validates the <xref href="TinyLife.Actions.ActionType.TypeSettings.RequiredSkill" data-throw-if-not-resolved="false"></xref>, the <xref href="TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality" data-throw-if-not-resolved="false"></xref> and the <xref href="TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ActionType.CanExecuteDelegate CanExecute
    return:
      type: TinyLife.Actions.ActionType.CanExecuteDelegate
    content.vb: Public CanExecute As ActionType.CanExecuteDelegate
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  id: ConstructedType
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: ConstructedType
  nameWithType: ActionType.TypeSettings.ConstructedType
  fullName: TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The type that is constructed in <xref href="TinyLife.Actions.ActionType.Construct%60%601(TinyLife.Actions.ActionInfo%2cTinyLife.Actions.ActionArgument%5b%5d)" data-throw-if-not-resolved="false"></xref> to create a new action instance.

    If additional arguments are required, use <xref href="TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Type ConstructedType
    return:
      type: System.Type
    content.vb: Public ConstructedType As Type
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  id: ConstructorArguments
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: ConstructorArguments
  nameWithType: ActionType.TypeSettings.ConstructorArguments
  fullName: TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A function that can, optionally, return a set of <xref href="System.Object" data-throw-if-not-resolved="false"></xref> instances that should be passed to this action type's <xref href="TinyLife.Actions.ActionType.TypeSettings.ConstructedType" data-throw-if-not-resolved="false"></xref>'s constructor.

    If this function is null, which is its default value, the two arguments it receives (the <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref> and an <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>) are passed directly to the constructor.
  example: []
  syntax:
    content: public Func<ActionType, ActionInfo, IEnumerable<object>> ConstructorArguments
    return:
      type: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
    content.vb: Public ConstructorArguments As Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
- uid: TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
  id: PossibleArguments
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: PossibleArguments
  nameWithType: ActionType.TypeSettings.PossibleArguments
  fullName: TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A set of <xref href="TinyLife.Actions.ActionArgument" data-throw-if-not-resolved="false"></xref> instances that represent different versions of this action.

    If this is set, and a non-null collection is returned, a menu pops up (like when cooking food) that displays all of the arguments as options to the user.

    If the returned collection is empty, the action is treated the same as if its <xref href="TinyLife.Actions.ActionType.TypeSettings.CanExecute" data-throw-if-not-resolved="false"></xref> function returned the <xref href="TinyLife.Actions.ActionType.TypeSettings.NoValidArgumentsResult" data-throw-if-not-resolved="false"></xref>.

    When the <xref href="TinyLife.Objects.PersonAi" data-throw-if-not-resolved="false"></xref> invokes an action with a set of arguments, it chooses arguments randomly based on the amount of <xref href="TinyLife.Actions.ActionType.TypeSettings.MaximumArguments" data-throw-if-not-resolved="false"></xref> and the arguments' <xref href="TinyLife.Actions.ActionArgument.PassivePriority" data-throw-if-not-resolved="false"></xref>.

    To query this function and do all of the appropriate error handling, use <xref href="TinyLife.Actions.ActionType.GetPossibleArguments(TinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Func<ActionInfo, bool, IEnumerable<ActionArgument>> PossibleArguments
    return:
      type: System.Func{TinyLife.Actions.ActionInfo,System.Boolean,System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionArgument}}
    content.vb: Public PossibleArguments As Func(Of ActionInfo, Boolean, IEnumerable(Of ActionArgument))
- uid: TinyLife.Actions.ActionType.TypeSettings.MaximumArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.MaximumArguments
  id: MaximumArguments
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: MaximumArguments
  nameWithType: ActionType.TypeSettings.MaximumArguments
  fullName: TinyLife.Actions.ActionType.TypeSettings.MaximumArguments
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The maximum amount of <xref href="TinyLife.Actions.ActionType.TypeSettings.PossibleArguments" data-throw-if-not-resolved="false"></xref> that can be passed to the action's constructor at once.

    This value defaults to 1 and, if increased, the action selection menu will automatically switch to displaying a multi-select menu.
  example: []
  syntax:
    content: public int MaximumArguments
    return:
      type: System.Int32
    content.vb: Public MaximumArguments As Integer
- uid: TinyLife.Actions.ActionType.TypeSettings.NoValidArgumentsResult
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.NoValidArgumentsResult
  id: NoValidArgumentsResult
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: NoValidArgumentsResult
  nameWithType: ActionType.TypeSettings.NoValidArgumentsResult
  fullName: TinyLife.Actions.ActionType.TypeSettings.NoValidArgumentsResult
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A <xref href="TinyLife.Actions.CanExecuteResult" data-throw-if-not-resolved="false"></xref> that is returned and displayed if no valid valid argument is found in this settings' <xref href="TinyLife.Actions.ActionType.TypeSettings.PossibleArguments" data-throw-if-not-resolved="false"></xref>.

    This value defaults to <xref href="TinyLife.Actions.CanExecuteResult.Hidden" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CanExecuteResult NoValidArgumentsResult
    return:
      type: TinyLife.Actions.CanExecuteResult
    content.vb: Public NoValidArgumentsResult As CanExecuteResult
- uid: TinyLife.Actions.ActionType.TypeSettings.Ai
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Ai
  id: Ai
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Ai
  nameWithType: ActionType.TypeSettings.Ai
  fullName: TinyLife.Actions.ActionType.TypeSettings.Ai
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A set of settings for <xref href="TinyLife.Objects.PersonAi" data-throw-if-not-resolved="false"></xref> invocation of this action.

    This value defaults to <xref href="TinyLife.Actions.ActionType.AiSettings.%23ctor" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ActionType.AiSettings Ai
    return:
      type: TinyLife.Actions.ActionType.AiSettings
    content.vb: Public Ai As ActionType.AiSettings
- uid: TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  id: IsInappropriateElsewhere
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: IsInappropriateElsewhere
  nameWithType: ActionType.TypeSettings.IsInappropriateElsewhere
  fullName: TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    If this value is true, this action will not automatically be invoked by <xref href="TinyLife.Objects.PersonAi" data-throw-if-not-resolved="false"></xref> on lots that the person does not own.

    Additionally, when the player invokes an action with this value set to true, the lot's owner will come up to them and tell them to stop.

    To query this value effectively, you can use <xref href="TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Func<ActionInfo, bool> IsInappropriateElsewhere
    return:
      type: System.Func{TinyLife.Actions.ActionInfo,System.Boolean}
    content.vb: Public IsInappropriateElsewhere As Func(Of ActionInfo, Boolean)
- uid: TinyLife.Actions.ActionType.TypeSettings.IconName
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IconName
  id: IconName
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: IconName
  nameWithType: ActionType.TypeSettings.IconName
  fullName: TinyLife.Actions.ActionType.TypeSettings.IconName
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The name of the icon that this action type should display in front of its name.

    To make the icon work, its name needs to be added to the <xref href="MLEM.Ui.UiSystem" data-throw-if-not-resolved="false"></xref>'s <xref href="MLEM.Formatting.TextFormatter" data-throw-if-not-resolved="false"></xref> using <xref href="MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter%2cSystem.String%2cMLEM.Textures.TextureRegion%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.

    To access an action's icon name, including automatically set icon names, use <xref href="TinyLife.Actions.ActionType.GetIconName(TinyLife.Actions.ActionInfo)" data-throw-if-not-resolved="false"></xref> instead.
  example: []
  syntax:
    content: public Func<ActionInfo, string> IconName
    return:
      type: System.Func{TinyLife.Actions.ActionInfo,System.String}
    content.vb: Public IconName As Func(Of ActionInfo, String)
- uid: TinyLife.Actions.ActionType.TypeSettings.GetDisplayName
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.GetDisplayName
  id: GetDisplayName
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetDisplayName
  nameWithType: ActionType.TypeSettings.GetDisplayName
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetDisplayName
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A function that determines this action's actual display name.

    The function is given the default display name (<xref href="TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) and an <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> for the current situation, the latter of which may be null.

    If this value is null (which it is by default), the default display name will be displayed.
  example: []
  syntax:
    content: public Func<string, ActionInfo, string> GetDisplayName
    return:
      type: System.Func{System.String,TinyLife.Actions.ActionInfo,System.String}
    content.vb: Public GetDisplayName As Func(Of String, ActionInfo, String)
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  id: RequiredSkill
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredSkill
  nameWithType: ActionType.TypeSettings.RequiredSkill
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.Skills.SkillType" data-throw-if-not-resolved="false"></xref> and level of the skill that is required for this action to become available, where otherwise it will be <xref href="TinyLife.Actions.CanExecuteResult.Hidden" data-throw-if-not-resolved="false"></xref>.

    When the required skill is leveled up, this action will also be displayed in the list of now-available actions.

    If the <xref href="TinyLife.Actions.ActionType.TypeSettings.IconName" data-throw-if-not-resolved="false"></xref> is not set, the required skill's icon will automatically be used.
  example: []
  syntax:
    content: public (SkillType Type, int Level) RequiredSkill
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
    content.vb: Public RequiredSkill As (Type As SkillType, Level As Integer)
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredAges
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredAges
  id: RequiredAges
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredAges
  nameWithType: ActionType.TypeSettings.RequiredAges
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredAges
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A combined flag of <xref href="TinyLife.Objects.AgeGroup" data-throw-if-not-resolved="false"></xref> values that determines people of which ages can do this action.

    This defaults to <xref href="TinyLife.Objects.AgeGroup.ChildOrOlder" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public AgeGroup RequiredAges
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public RequiredAges As AgeGroup
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  id: RequiredEmotion
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredEmotion
  nameWithType: ActionType.TypeSettings.RequiredEmotion
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.Emotions.EmotionType" data-throw-if-not-resolved="false"></xref> that is required for this action to be available.

    If the <xref href="TinyLife.Actions.ActionType.TypeSettings.IconName" data-throw-if-not-resolved="false"></xref> is not set, the requird emotion's icon will automatically be used.
  example: []
  syntax:
    content: public EmotionType RequiredEmotion
    return:
      type: TinyLife.Emotions.EmotionType
    content.vb: Public RequiredEmotion As EmotionType
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  id: RequiredPersonality
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredPersonality
  nameWithType: ActionType.TypeSettings.RequiredPersonality
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.PersonalityType" data-throw-if-not-resolved="false"></xref> that is required for this action to be available.

    If the <xref href="TinyLife.Actions.ActionType.TypeSettings.IconName" data-throw-if-not-resolved="false"></xref> is not set, the required personality type's icon will automatically be used.
  example: []
  syntax:
    content: public PersonalityType RequiredPersonality
    return:
      type: TinyLife.PersonalityType
    content.vb: Public RequiredPersonality As PersonalityType
- uid: TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
  id: IgnoreObjectConditions
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: IgnoreObjectConditions
  nameWithType: ActionType.TypeSettings.IgnoreObjectConditions
  fullName: TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A function that can return whether a given <xref href="TinyLife.Objects.MapObject" data-throw-if-not-resolved="false"></xref>'s action conditions should be ignored in a given case.

    This function is used in <xref href="TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject%2cTinyLife.Actions.CanExecuteResult)" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> to determine whether an action object should have a say in whether this action can be executed.

    By default, this function is null, meaning no action object conditions will be ignored.
  example: []
  syntax:
    content: public Func<(ActionInfo Info, bool Automatic, MapObject Object, bool IsAuxiliary, CanExecuteResult Reason), bool> IgnoreObjectConditions
    return:
      type: System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult},System.Boolean}
    content.vb: Public IgnoreObjectConditions As Func(Of (Info As ActionInfo, Automatic As Boolean, [Object] As MapObject, IsAuxiliary As Boolean, Reason As CanExecuteResult), Boolean)
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerEmployment
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerEmployment
  id: RequiredPartnerEmployment
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredPartnerEmployment
  nameWithType: ActionType.TypeSettings.RequiredPartnerEmployment
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerEmployment
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.World.LotType" data-throw-if-not-resolved="false"></xref> that this interaction's partner (<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>) has to be working on.

    This is useful for actions like <xref href="TinyLife.Actions.ActionType.OrderCoffee" data-throw-if-not-resolved="false"></xref> which require talking to a <xref href="TinyLife.World.LotType.Cafe" data-throw-if-not-resolved="false"></xref> employee.

    If the <xref href="TinyLife.Actions.ActionType.TypeSettings.IconName" data-throw-if-not-resolved="false"></xref> is not set, the required lot type's icon will automatically be used.
  example: []
  syntax:
    content: public LotEmployment RequiredPartnerEmployment
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public RequiredPartnerEmployment As LotEmployment
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerAges
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerAges
  id: RequiredPartnerAges
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredPartnerAges
  nameWithType: ActionType.TypeSettings.RequiredPartnerAges
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerAges
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.Objects.AgeGroup" data-throw-if-not-resolved="false"></xref> values that an action partner can have for this action to become available to a person.

    By default, this value is 0, meaning a partner is not required for the action.
  example: []
  syntax:
    content: public AgeGroup RequiredPartnerAges
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public RequiredPartnerAges As AgeGroup
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredJob
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredJob
  id: RequiredJob
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredJob
  nameWithType: ActionType.TypeSettings.RequiredJob
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredJob
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.Goals.JobType" data-throw-if-not-resolved="false"></xref> that a person executing this action is required to have for this action to be available.

    If the <xref href="TinyLife.Actions.ActionType.TypeSettings.IconName" data-throw-if-not-resolved="false"></xref> is not set, the required job type's icon will automatically be used.
  example: []
  syntax:
    content: public JobType RequiredJob
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public RequiredJob As JobType
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredUpgrade
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredUpgrade
  id: RequiredUpgrade
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredUpgrade
  nameWithType: ActionType.TypeSettings.RequiredUpgrade
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredUpgrade
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The <xref href="TinyLife.Objects.Upgrade" data-throw-if-not-resolved="false"></xref> that is required on the action object for this action to be available.

    If the <xref href="TinyLife.Actions.ActionType.TypeSettings.IconName" data-throw-if-not-resolved="false"></xref> is not set, the required upgrade's icon will automatically be used.
  example: []
  syntax:
    content: public Upgrade RequiredUpgrade
    return:
      type: TinyLife.Objects.Upgrade
    content.vb: Public RequiredUpgrade As Upgrade
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonType
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPersonType
  id: RequiredPersonType
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredPersonType
  nameWithType: ActionType.TypeSettings.RequiredPersonType
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonType
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The type of <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> that is required to execute this action.

    This defaults to the <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> type.
  example: []
  syntax:
    content: public Type RequiredPersonType
    return:
      type: System.Type
    content.vb: Public RequiredPersonType As Type
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerType
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerType
  id: RequiredPartnerType
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredPartnerType
  nameWithType: ActionType.TypeSettings.RequiredPartnerType
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredPartnerType
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    The type of <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> that this interaction's partner (<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>) is required to have to execute this action.

    This defaults to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, meaning no partner is required.
  example: []
  syntax:
    content: public Type RequiredPartnerType
    return:
      type: System.Type
    content.vb: Public RequiredPartnerType As Type
- uid: TinyLife.Actions.ActionType.TypeSettings.Migrations
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Migrations
  id: Migrations
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Migrations
  nameWithType: ActionType.TypeSettings.Migrations
  fullName: TinyLife.Actions.ActionType.TypeSettings.Migrations
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: The migrations that will be applied for an instance of this action type when it is loaded from disk.
  example: []
  syntax:
    content: public List<Migration<Action>> Migrations
    return:
      type: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.Actions.Action}}
    content.vb: Public Migrations As List(Of Migration(Of Action))
- uid: TinyLife.Actions.ActionType.TypeSettings.EnqueuePriority
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.EnqueuePriority
  id: EnqueuePriority
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: EnqueuePriority
  nameWithType: ActionType.TypeSettings.EnqueuePriority
  fullName: TinyLife.Actions.ActionType.TypeSettings.EnqueuePriority
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: >-
    A function that optionally returns whether the action should be enqueued at the start of the action queue when the AI starts it, rather than at the end.

    The arguments this function receives are the action info in question, as well as whether the action was started automatically.
  example: []
  syntax:
    content: public Func<ActionInfo, bool, bool> EnqueuePriority
    return:
      type: System.Func{TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean}
    content.vb: Public EnqueuePriority As Func(Of ActionInfo, Boolean, Boolean)
- uid: TinyLife.Actions.ActionType.TypeSettings.InteractionMenuPriority
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.InteractionMenuPriority
  id: InteractionMenuPriority
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: InteractionMenuPriority
  nameWithType: ActionType.TypeSettings.InteractionMenuPriority
  fullName: TinyLife.Actions.ActionType.TypeSettings.InteractionMenuPriority
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  syntax:
    content: public int InteractionMenuPriority
    return:
      type: System.Int32
    content.vb: Public InteractionMenuPriority As Integer
- uid: TinyLife.Actions.ActionType.TypeSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.Type)
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.Type)
  id: '#ctor(System.String,TinyLife.Objects.ObjectCategory,System.Type)'
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: TypeSettings(string, ObjectCategory, Type)
  nameWithType: ActionType.TypeSettings.TypeSettings(string, ObjectCategory, Type)
  fullName: TinyLife.Actions.ActionType.TypeSettings.TypeSettings(string, TinyLife.Objects.ObjectCategory, System.Type)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Creates a new type settings instance with the given values, as well as the default settings from <xref href="TinyLife.Actions.ActionType.TypeSettings.%23ctor" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public TypeSettings(string name, ObjectCategory context, Type constructedType)
    parameters:
    - id: name
      type: System.String
      description: The name of this action type
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: A combined <xref href="TinyLife.Objects.ObjectCategory" data-throw-if-not-resolved="false"></xref> flag that represents all of the objects that this action can be executed on. Setting the context to <xref href="TinyLife.Objects.ObjectCategory.Nothing" data-throw-if-not-resolved="false"></xref> and giving the action <xref href="TinyLife.Actions.ActionType.AiSettings" data-throw-if-not-resolved="false"></xref> causes it to be invoked from the AI as if it had the <xref href="TinyLife.Objects.ObjectCategory.Self" data-throw-if-not-resolved="false"></xref> category instead.
    - id: constructedType
      type: System.Type
      description: The type that is constructed in <xref href="TinyLife.Actions.ActionType.Construct%60%601(TinyLife.Actions.ActionInfo%2cTinyLife.Actions.ActionArgument%5b%5d)" data-throw-if-not-resolved="false"></xref> to create a new action instance. If additional arguments are required, use <xref href="TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(name As String, context As ObjectCategory, constructedType As Type)
  overload: TinyLife.Actions.ActionType.TypeSettings.#ctor*
  nameWithType.vb: ActionType.TypeSettings.New(String, ObjectCategory, Type)
  fullName.vb: TinyLife.Actions.ActionType.TypeSettings.New(String, TinyLife.Objects.ObjectCategory, System.Type)
  name.vb: New(String, ObjectCategory, Type)
- uid: TinyLife.Actions.ActionType.TypeSettings.#ctor
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.#ctor
  id: '#ctor'
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: TypeSettings()
  nameWithType: ActionType.TypeSettings.TypeSettings()
  fullName: TinyLife.Actions.ActionType.TypeSettings.TypeSettings()
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Creates a new type settings instance with the default values.
  example: []
  syntax:
    content: public TypeSettings()
    content.vb: Public Sub New()
  overload: TinyLife.Actions.ActionType.TypeSettings.#ctor*
  nameWithType.vb: ActionType.TypeSettings.New()
  fullName.vb: TinyLife.Actions.ActionType.TypeSettings.New()
  name.vb: New()
- uid: TinyLife.Actions.ActionType.TypeSettings.SetData``1(System.String,``0)
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.SetData``1(System.String,``0)
  id: SetData``1(System.String,``0)
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: SetData<T>(string, T)
  nameWithType: ActionType.TypeSettings.SetData<T>(string, T)
  fullName: TinyLife.Actions.ActionType.TypeSettings.SetData<T>(string, T)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Store a piece of generic data on this object.
  example: []
  syntax:
    content: public void SetData<T>(string key, T data)
    parameters:
    - id: key
      type: System.String
      description: The key to store the data by
    - id: data
      type: '{T}'
      description: The data to store in the object
    typeParameters:
    - id: T
    content.vb: Public Sub SetData(Of T)(key As String, data As T)
  overload: TinyLife.Actions.ActionType.TypeSettings.SetData*
  implements:
  - MLEM.Misc.IGenericDataHolder.SetData``1(System.String,{T})
  nameWithType.vb: ActionType.TypeSettings.SetData(Of T)(String, T)
  fullName.vb: TinyLife.Actions.ActionType.TypeSettings.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
- uid: TinyLife.Actions.ActionType.TypeSettings.GetData``1(System.String)
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.GetData``1(System.String)
  id: GetData``1(System.String)
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetData<T>(string)
  nameWithType: ActionType.TypeSettings.GetData<T>(string)
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetData<T>(string)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns a piece of generic data of the given type on this object.
  example: []
  syntax:
    content: public readonly T GetData<T>(string key)
    parameters:
    - id: key
      type: System.String
      description: The key that the data is stored by
    typeParameters:
    - id: T
      description: The type of the data stored
    return:
      type: '{T}'
      description: The data, or default if it doesn't exist
    content.vb: Public Function GetData(Of T)(key As String) As T
  overload: TinyLife.Actions.ActionType.TypeSettings.GetData*
  implements:
  - MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  nameWithType.vb: ActionType.TypeSettings.GetData(Of T)(String)
  fullName.vb: TinyLife.Actions.ActionType.TypeSettings.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
- uid: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
  id: GetDataKeys
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetDataKeys()
  nameWithType: ActionType.TypeSettings.GetDataKeys()
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Actions
  summary: Returns all of the generic data that this object stores.
  example: []
  syntax:
    content: public readonly IEnumerable<string> GetDataKeys()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The generic data on this object
    content.vb: Public Function GetDataKeys() As IEnumerable(Of String)
  overload: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys*
  implements:
  - MLEM.Misc.IGenericDataHolder.GetDataKeys
references:
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<TypeSettings>(TypeSettings)
  nameWithType: Extensions.JsonCopy<ActionType.TypeSettings>(ActionType.TypeSettings)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionType.TypeSettings>(TinyLife.Actions.ActionType.TypeSettings)
  nameWithType.vb: Extensions.JsonCopy(Of ActionType.TypeSettings)(ActionType.TypeSettings)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionType.TypeSettings)(TinyLife.Actions.ActionType.TypeSettings)
  name.vb: JsonCopy(Of TypeSettings)(TypeSettings)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.ActionType.TypeSettings)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.ActionType.TypeSettings)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html
  - name: )
  - name: (
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html
  - name: )
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.Actions.ActionType.TypeSettings.Name
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Name
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_Name
  name: Name
  nameWithType: ActionType.TypeSettings.Name
  fullName: TinyLife.Actions.ActionType.TypeSettings.Name
- uid: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_NameWithoutCategory
  name: NameWithoutCategory
  nameWithType: ActionType.TypeSettings.NameWithoutCategory
  fullName: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
- uid: TinyLife.Actions.ActionType.TypeSettings.Categories*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.Categories
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_Categories
  name: Categories
  nameWithType: ActionType.TypeSettings.Categories
  fullName: TinyLife.Actions.ActionType.TypeSettings.Categories
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetIconObject
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetIconObject
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetIconObject
  - name: (
  - name: )
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  href: TinyLife.Actions.Action.html
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectCategory.html
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Nothing
  commentId: F:TinyLife.Objects.ObjectCategory.Nothing
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Nothing
  name: Nothing
  nameWithType: ObjectCategory.Nothing
  fullName: TinyLife.Objects.ObjectCategory.Nothing
- uid: TinyLife.Actions.ActionType.AiSettings
  commentId: T:TinyLife.Actions.ActionType.AiSettings
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType.AiSettings
  nameWithType: ActionType.AiSettings
  fullName: TinyLife.Actions.ActionType.AiSettings
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.AiSettings
    name: AiSettings
    href: TinyLife.Actions.ActionType.AiSettings.html
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.AiSettings
    name: AiSettings
    href: TinyLife.Actions.ActionType.AiSettings.html
- uid: TinyLife.Objects.ObjectCategory.Self
  commentId: F:TinyLife.Objects.ObjectCategory.Self
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_Self
  name: Self
  nameWithType: ObjectCategory.Self
  fullName: TinyLife.Objects.ObjectCategory.Self
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  href: TinyLife.Actions.CanExecuteResult.html
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Actions.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.CanExecuteResult.Valid
  href: TinyLife.Actions.CanExecuteResult.html#TinyLife_Actions_CanExecuteResult_Valid
  name: Valid
  nameWithType: CanExecuteResult.Valid
  fullName: TinyLife.Actions.CanExecuteResult.Valid
- uid: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_CanExecuteAction_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  name: CanExecuteAction(ActionType, ActionInfo, bool)
  nameWithType: PersonLike.CanExecuteAction(ActionType, ActionInfo, bool)
  fullName: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: PersonLike.CanExecuteAction(ActionType, ActionInfo, Boolean)
  fullName.vb: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean)
  name.vb: CanExecuteAction(ActionType, ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
    name: CanExecuteAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_CanExecuteAction_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
    name: CanExecuteAction
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_CanExecuteAction_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_RequiredSkill
  name: RequiredSkill
  nameWithType: ActionType.TypeSettings.RequiredSkill
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_RequiredPersonality
  name: RequiredPersonality
  nameWithType: ActionType.TypeSettings.RequiredPersonality
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_RequiredEmotion
  name: RequiredEmotion
  nameWithType: ActionType.TypeSettings.RequiredEmotion
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: CanExecuteDelegate
    href: TinyLife.Actions.ActionType.CanExecuteDelegate.html
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: CanExecuteDelegate
    href: TinyLife.Actions.ActionType.CanExecuteDelegate.html
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.Actions.ActionType.Construct``1(TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionArgument[])
  commentId: M:TinyLife.Actions.ActionType.Construct``1(TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionArgument[])
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Construct__1_TinyLife_Actions_ActionInfo_TinyLife_Actions_ActionArgument___
  name: Construct<T>(ActionInfo, params ActionArgument[])
  nameWithType: ActionType.Construct<T>(ActionInfo, params ActionArgument[])
  fullName: TinyLife.Actions.ActionType.Construct<T>(TinyLife.Actions.ActionInfo, params TinyLife.Actions.ActionArgument[])
  nameWithType.vb: ActionType.Construct(Of T)(ActionInfo, ParamArray ActionArgument())
  fullName.vb: TinyLife.Actions.ActionType.Construct(Of T)(TinyLife.Actions.ActionInfo, ParamArray TinyLife.Actions.ActionArgument())
  name.vb: Construct(Of T)(ActionInfo, ParamArray ActionArgument())
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.Construct``1(TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionArgument[])
    name: Construct
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Construct__1_TinyLife_Actions_ActionInfo_TinyLife_Actions_ActionArgument___
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: TinyLife.Actions.ActionArgument
    name: ActionArgument
    href: TinyLife.Actions.ActionArgument.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.Construct``1(TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionArgument[])
    name: Construct
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_Construct__1_TinyLife_Actions_ActionInfo_TinyLife_Actions_ActionArgument___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: TinyLife.Actions.ActionArgument
    name: ActionArgument
    href: TinyLife.Actions.ActionArgument.html
  - name: (
  - name: )
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_ConstructorArguments
  name: ConstructorArguments
  nameWithType: ActionType.TypeSettings.ConstructorArguments
  fullName: TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_ConstructedType
  name: ConstructedType
  nameWithType: ActionType.TypeSettings.ConstructedType
  fullName: TinyLife.Actions.ActionType.TypeSettings.ConstructedType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionInfo.html
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
  commentId: T:System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<ActionType, ActionInfo, IEnumerable<object>>
  nameWithType: Func<ActionType, ActionInfo, IEnumerable<object>>
  fullName: System.Func<TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable<object>>
  nameWithType.vb: Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
  fullName.vb: System.Func(Of TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable(Of Object))
  name.vb: Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Actions.ActionArgument
  commentId: T:TinyLife.Actions.ActionArgument
  href: TinyLife.Actions.ActionArgument.html
  name: ActionArgument
  nameWithType: ActionArgument
  fullName: TinyLife.Actions.ActionArgument
- uid: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.CanExecute
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_CanExecute
  name: CanExecute
  nameWithType: ActionType.TypeSettings.CanExecute
  fullName: TinyLife.Actions.ActionType.TypeSettings.CanExecute
- uid: TinyLife.Actions.ActionType.TypeSettings.NoValidArgumentsResult
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.NoValidArgumentsResult
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_NoValidArgumentsResult
  name: NoValidArgumentsResult
  nameWithType: ActionType.TypeSettings.NoValidArgumentsResult
  fullName: TinyLife.Actions.ActionType.TypeSettings.NoValidArgumentsResult
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonAi.html
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Actions.ActionType.TypeSettings.MaximumArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.MaximumArguments
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_MaximumArguments
  name: MaximumArguments
  nameWithType: ActionType.TypeSettings.MaximumArguments
  fullName: TinyLife.Actions.ActionType.TypeSettings.MaximumArguments
- uid: TinyLife.Actions.ActionArgument.PassivePriority
  commentId: F:TinyLife.Actions.ActionArgument.PassivePriority
  href: TinyLife.Actions.ActionArgument.html#TinyLife_Actions_ActionArgument_PassivePriority
  name: PassivePriority
  nameWithType: ActionArgument.PassivePriority
  fullName: TinyLife.Actions.ActionArgument.PassivePriority
- uid: TinyLife.Actions.ActionType.GetPossibleArguments(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.GetPossibleArguments(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetPossibleArguments_TinyLife_Actions_ActionInfo_System_Boolean_
  name: GetPossibleArguments(ActionInfo, bool)
  nameWithType: ActionType.GetPossibleArguments(ActionInfo, bool)
  fullName: TinyLife.Actions.ActionType.GetPossibleArguments(TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: ActionType.GetPossibleArguments(ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.ActionType.GetPossibleArguments(TinyLife.Actions.ActionInfo, Boolean)
  name.vb: GetPossibleArguments(ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.GetPossibleArguments(TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetPossibleArguments
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetPossibleArguments_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.GetPossibleArguments(TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetPossibleArguments
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetPossibleArguments_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetRandomValidArguments_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  name: GetRandomValidArguments(ActionType, ActionInfo, bool)
  nameWithType: Action.GetRandomValidArguments(ActionType, ActionInfo, bool)
  fullName: TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: Action.GetRandomValidArguments(ActionType, ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean)
  name.vb: GetRandomValidArguments(ActionType, ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetRandomValidArguments
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetRandomValidArguments_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetRandomValidArguments(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetRandomValidArguments
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_GetRandomValidArguments_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func{TinyLife.Actions.ActionInfo,System.Boolean,System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionArgument}}
  commentId: T:System.Func{TinyLife.Actions.ActionInfo,System.Boolean,System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionArgument}}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<ActionInfo, bool, IEnumerable<ActionArgument>>
  nameWithType: Func<ActionInfo, bool, IEnumerable<ActionArgument>>
  fullName: System.Func<TinyLife.Actions.ActionInfo, bool, System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionArgument>>
  nameWithType.vb: Func(Of ActionInfo, Boolean, IEnumerable(Of ActionArgument))
  fullName.vb: System.Func(Of TinyLife.Actions.ActionInfo, Boolean, System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionArgument))
  name.vb: Func(Of ActionInfo, Boolean, IEnumerable(Of ActionArgument))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionArgument
    name: ActionArgument
    href: TinyLife.Actions.ActionArgument.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionArgument
    name: ActionArgument
    href: TinyLife.Actions.ActionArgument.html
  - name: )
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_PossibleArguments
  name: PossibleArguments
  nameWithType: ActionType.TypeSettings.PossibleArguments
  fullName: TinyLife.Actions.ActionType.TypeSettings.PossibleArguments
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Actions.CanExecuteResult.Hidden
  commentId: F:TinyLife.Actions.CanExecuteResult.Hidden
  href: TinyLife.Actions.CanExecuteResult.html#TinyLife_Actions_CanExecuteResult_Hidden
  name: Hidden
  nameWithType: CanExecuteResult.Hidden
  fullName: TinyLife.Actions.CanExecuteResult.Hidden
- uid: TinyLife.Actions.ActionType.AiSettings.#ctor
  commentId: M:TinyLife.Actions.ActionType.AiSettings.#ctor
  href: TinyLife.Actions.ActionType.AiSettings.html#TinyLife_Actions_ActionType_AiSettings__ctor
  name: AiSettings()
  nameWithType: ActionType.AiSettings.AiSettings()
  fullName: TinyLife.Actions.ActionType.AiSettings.AiSettings()
  nameWithType.vb: ActionType.AiSettings.New()
  fullName.vb: TinyLife.Actions.ActionType.AiSettings.New()
  name.vb: New()
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.AiSettings.#ctor
    name: AiSettings
    href: TinyLife.Actions.ActionType.AiSettings.html#TinyLife_Actions_ActionType_AiSettings__ctor
  - name: (
  - name: )
  spec.vb:
  - name: New
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsInappropriate_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_
  name: IsInappropriate(ActionType, ActionInfo)
  nameWithType: Action.IsInappropriate(ActionType, ActionInfo)
  fullName: TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  spec.csharp:
  - uid: TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
    name: IsInappropriate
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsInappropriate_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.IsInappropriate(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
    name: IsInappropriate
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_IsInappropriate_TinyLife_Actions_ActionType_TinyLife_Actions_ActionInfo_
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
- uid: System.Func{TinyLife.Actions.ActionInfo,System.Boolean}
  commentId: T:System.Func{TinyLife.Actions.ActionInfo,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ActionInfo, bool>
  nameWithType: Func<ActionInfo, bool>
  fullName: System.Func<TinyLife.Actions.ActionInfo, bool>
  nameWithType.vb: Func(Of ActionInfo, Boolean)
  fullName.vb: System.Func(Of TinyLife.Actions.ActionInfo, Boolean)
  name.vb: Func(Of ActionInfo, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: MLEM.Ui.UiSystem
  commentId: T:MLEM.Ui.UiSystem
  parent: MLEM.Ui
  isExternal: true
  name: UiSystem
  nameWithType: UiSystem
  fullName: MLEM.Ui.UiSystem
- uid: MLEM.Formatting.TextFormatter
  commentId: T:MLEM.Formatting.TextFormatter
  isExternal: true
  name: TextFormatter
  nameWithType: TextFormatter
  fullName: MLEM.Formatting.TextFormatter
- uid: MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter,System.String,MLEM.Textures.TextureRegion,System.Boolean)
  commentId: M:MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter,System.String,MLEM.Textures.TextureRegion,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: AddImage(TextFormatter, string, TextureRegion, bool)
  nameWithType: ImageCodeExtensions.AddImage(TextFormatter, string, TextureRegion, bool)
  fullName: MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter, string, MLEM.Textures.TextureRegion, bool)
  nameWithType.vb: ImageCodeExtensions.AddImage(TextFormatter, String, TextureRegion, Boolean)
  fullName.vb: MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter, String, MLEM.Textures.TextureRegion, Boolean)
  name.vb: AddImage(TextFormatter, String, TextureRegion, Boolean)
  spec.csharp:
  - uid: MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter,System.String,MLEM.Textures.TextureRegion,System.Boolean)
    name: AddImage
    isExternal: true
  - name: (
  - uid: MLEM.Formatting.TextFormatter
    name: TextFormatter
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter,System.String,MLEM.Textures.TextureRegion,System.Boolean)
    name: AddImage
    isExternal: true
  - name: (
  - uid: MLEM.Formatting.TextFormatter
    name: TextFormatter
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionType.GetIconName(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.ActionType.GetIconName(TinyLife.Actions.ActionInfo)
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetIconName_TinyLife_Actions_ActionInfo_
  name: GetIconName(ActionInfo)
  nameWithType: ActionType.GetIconName(ActionInfo)
  fullName: TinyLife.Actions.ActionType.GetIconName(TinyLife.Actions.ActionInfo)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.GetIconName(TinyLife.Actions.ActionInfo)
    name: GetIconName
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetIconName_TinyLife_Actions_ActionInfo_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.GetIconName(TinyLife.Actions.ActionInfo)
    name: GetIconName
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetIconName_TinyLife_Actions_ActionInfo_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: )
- uid: System.Func{TinyLife.Actions.ActionInfo,System.String}
  commentId: T:System.Func{TinyLife.Actions.ActionInfo,System.String}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ActionInfo, string>
  nameWithType: Func<ActionInfo, string>
  fullName: System.Func<TinyLife.Actions.ActionInfo, string>
  nameWithType.vb: Func(Of ActionInfo, String)
  fullName.vb: System.Func(Of TinyLife.Actions.ActionInfo, String)
  name.vb: Func(Of ActionInfo, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Ui
  commentId: N:MLEM.Ui
  isExternal: true
  name: MLEM.Ui
  nameWithType: MLEM.Ui
  fullName: MLEM.Ui
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
- uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetDisplayName_TinyLife_Actions_ActionInfo_System_Boolean_
  name: GetDisplayName(ActionInfo, bool)
  nameWithType: ActionType.GetDisplayName(ActionInfo, bool)
  fullName: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: ActionType.GetDisplayName(ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo, Boolean)
  name.vb: GetDisplayName(ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetDisplayName
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetDisplayName_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetDisplayName
    href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_GetDisplayName_TinyLife_Actions_ActionInfo_System_Boolean_
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func{System.String,TinyLife.Actions.ActionInfo,System.String}
  commentId: T:System.Func{System.String,TinyLife.Actions.ActionInfo,System.String}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<string, ActionInfo, string>
  nameWithType: Func<string, ActionInfo, string>
  fullName: System.Func<string, TinyLife.Actions.ActionInfo, string>
  nameWithType.vb: Func(Of String, ActionInfo, String)
  fullName.vb: System.Func(Of String, TinyLife.Actions.ActionInfo, String)
  name.vb: Func(Of String, ActionInfo, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  href: TinyLife.Skills.SkillType.html
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Actions.ActionType.TypeSettings.IconName
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IconName
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_IconName
  name: IconName
  nameWithType: ActionType.TypeSettings.IconName
  fullName: TinyLife.Actions.ActionType.TypeSettings.IconName
- uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  commentId: T:System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  href: TinyLife.Skills.SkillType.html
  name: (SkillType Type, int Level)
  nameWithType: (SkillType Type, int Level)
  fullName: (TinyLife.Skills.SkillType Type, int Level)
  nameWithType.vb: (Type As SkillType, Level As Integer)
  fullName.vb: (Type As TinyLife.Skills.SkillType, Level As Integer)
  name.vb: (Type As SkillType, Level As Integer)
  spec.csharp:
  - name: (
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    href: TinyLife.Skills.SkillType.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}.Type
    name: Type
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.skills.skilltype,system.int32-.type
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}.Level
    name: Level
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.skills.skilltype,system.int32-.level
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}.Type
    name: Type
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.skills.skilltype,system.int32-.type
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    href: TinyLife.Skills.SkillType.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}.Level
    name: Level
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.skills.skilltype,system.int32-.level
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  href: TinyLife.html
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Skills
    name: Skills
    href: TinyLife.Skills.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Skills
    name: Skills
    href: TinyLife.Skills.html
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  href: TinyLife.Objects.AgeGroup.html
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Objects.AgeGroup.ChildOrOlder
  commentId: F:TinyLife.Objects.AgeGroup.ChildOrOlder
  href: TinyLife.Objects.AgeGroup.html#TinyLife_Objects_AgeGroup_ChildOrOlder
  name: ChildOrOlder
  nameWithType: AgeGroup.ChildOrOlder
  fullName: TinyLife.Objects.AgeGroup.ChildOrOlder
- uid: TinyLife.Emotions.EmotionType
  commentId: T:TinyLife.Emotions.EmotionType
  parent: TinyLife.Emotions
  href: TinyLife.Emotions.EmotionType.html
  name: EmotionType
  nameWithType: EmotionType
  fullName: TinyLife.Emotions.EmotionType
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  href: TinyLife.html
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Emotions
    name: Emotions
    href: TinyLife.Emotions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Emotions
    name: Emotions
    href: TinyLife.Emotions.html
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  href: TinyLife.PersonalityType.html
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife
  commentId: N:TinyLife
  href: TinyLife.html
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.MapObject.html
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
  commentId: M:TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
  parent: TinyLife.Actions.Action
  href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanObjectInterrupt_TinyLife_Objects_MapObject_TinyLife_Actions_CanExecuteResult_
  name: CanObjectInterrupt(MapObject, CanExecuteResult)
  nameWithType: Action.CanObjectInterrupt(MapObject, CanExecuteResult)
  fullName: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject, TinyLife.Actions.CanExecuteResult)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
    name: CanObjectInterrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanObjectInterrupt_TinyLife_Objects_MapObject_TinyLife_Actions_CanExecuteResult_
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanObjectInterrupt(TinyLife.Objects.MapObject,TinyLife.Actions.CanExecuteResult)
    name: CanObjectInterrupt
    href: TinyLife.Actions.Action.html#TinyLife_Actions_Action_CanObjectInterrupt_TinyLife_Objects_MapObject_TinyLife_Actions_CanExecuteResult_
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: )
- uid: System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult},System.Boolean}
  commentId: T:System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult},System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<(ActionInfo Info, bool Automatic, MapObject Object, bool IsAuxiliary, CanExecuteResult Reason), bool>
  nameWithType: Func<(ActionInfo Info, bool Automatic, MapObject Object, bool IsAuxiliary, CanExecuteResult Reason), bool>
  fullName: System.Func<(TinyLife.Actions.ActionInfo Info, bool Automatic, TinyLife.Objects.MapObject Object, bool IsAuxiliary, TinyLife.Actions.CanExecuteResult Reason), bool>
  nameWithType.vb: Func(Of (Info As ActionInfo, Automatic As Boolean, Object As MapObject, IsAuxiliary As Boolean, Reason As CanExecuteResult), Boolean)
  fullName.vb: System.Func(Of (Info As TinyLife.Actions.ActionInfo, Automatic As Boolean, Object As TinyLife.Objects.MapObject, IsAuxiliary As Boolean, Reason As TinyLife.Actions.CanExecuteResult), Boolean)
  name.vb: Func(Of (Info As ActionInfo, Automatic As Boolean, Object As MapObject, IsAuxiliary As Boolean, Reason As CanExecuteResult), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.Info
    name: Info
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.info
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.Automatic
    name: Automatic
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.automatic
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.Object
    name: Object
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.object
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.IsAuxiliary
    name: IsAuxiliary
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.isauxiliary
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.Reason
    name: Reason
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.reason
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.Info
    name: Info
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.info
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.Automatic
    name: Automatic
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.automatic
  - name: " "
  - name: As
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.Object
    name: Object
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.object
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    href: TinyLife.Objects.MapObject.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.IsAuxiliary
    name: IsAuxiliary
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.isauxiliary
  - name: " "
  - name: As
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Objects.MapObject,System.Boolean,TinyLife.Actions.CanExecuteResult}.Reason
    name: Reason
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.actions.actioninfo,system.boolean,tinylife.objects.mapobject,system.boolean,tinylife.actions.canexecuteresult-.reason
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  href: TinyLife.World.LotType.html
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  isExternal: true
  href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  name: GetActionObject<T>(bool)
  nameWithType: ActionInfo.GetActionObject<T>(bool)
  fullName: TinyLife.Actions.ActionInfo.GetActionObject<T>(bool)
  nameWithType.vb: ActionInfo.GetActionObject(Of T)(Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetActionObject(Of T)(Boolean)
  name.vb: GetActionObject(Of T)(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
    href: TinyLife.Actions.ActionInfo.html#TinyLife_Actions_ActionInfo_GetActionObject__1_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionType.OrderCoffee
  commentId: F:TinyLife.Actions.ActionType.OrderCoffee
  href: TinyLife.Actions.ActionType.html#TinyLife_Actions_ActionType_OrderCoffee
  name: OrderCoffee
  nameWithType: ActionType.OrderCoffee
  fullName: TinyLife.Actions.ActionType.OrderCoffee
- uid: TinyLife.World.LotType.Cafe
  commentId: F:TinyLife.World.LotType.Cafe
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_Cafe
  name: Cafe
  nameWithType: LotType.Cafe
  fullName: TinyLife.World.LotType.Cafe
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  href: TinyLife.World.LotEmployment.html
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: TinyLife.Goals.JobType
  commentId: T:TinyLife.Goals.JobType
  parent: TinyLife.Goals
  href: TinyLife.Goals.JobType.html
  name: JobType
  nameWithType: JobType
  fullName: TinyLife.Goals.JobType
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  href: TinyLife.html
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Goals
    name: Goals
    href: TinyLife.Goals.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Goals
    name: Goals
    href: TinyLife.Goals.html
- uid: TinyLife.Objects.Upgrade
  commentId: T:TinyLife.Objects.Upgrade
  parent: TinyLife.Objects
  href: TinyLife.Objects.Upgrade.html
  name: Upgrade
  nameWithType: Upgrade
  fullName: TinyLife.Objects.Upgrade
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  href: TinyLife.Objects.Person.html
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.Actions.Action}}
  commentId: T:System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.Actions.Action}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Migration<Action>>
  nameWithType: List<Migration<Action>>
  fullName: System.Collections.Generic.List<TinyLife.Utilities.Migration<TinyLife.Actions.Action>>
  nameWithType.vb: List(Of Migration(Of Action))
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Utilities.Migration(Of TinyLife.Actions.Action))
  name.vb: List(Of Migration(Of Action))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
    href: TinyLife.Actions.Action.html
  - name: )
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Func{TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean}
  commentId: T:System.Func{TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<ActionInfo, bool, bool>
  nameWithType: Func<ActionInfo, bool, bool>
  fullName: System.Func<TinyLife.Actions.ActionInfo, bool, bool>
  nameWithType.vb: Func(Of ActionInfo, Boolean, Boolean)
  fullName.vb: System.Func(Of TinyLife.Actions.ActionInfo, Boolean, Boolean)
  name.vb: Func(Of ActionInfo, Boolean, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.#ctor
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.#ctor
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings__ctor
  name: TypeSettings()
  nameWithType: ActionType.TypeSettings.TypeSettings()
  fullName: TinyLife.Actions.ActionType.TypeSettings.TypeSettings()
  nameWithType.vb: ActionType.TypeSettings.New()
  fullName.vb: TinyLife.Actions.ActionType.TypeSettings.New()
  name.vb: New()
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.TypeSettings.#ctor
    name: TypeSettings
    href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings__ctor
  - name: (
  - name: )
  spec.vb:
  - name: New
  - name: (
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.#ctor*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.#ctor
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings__ctor_System_String_TinyLife_Objects_ObjectCategory_System_Type_
  name: TypeSettings
  nameWithType: ActionType.TypeSettings.TypeSettings
  fullName: TinyLife.Actions.ActionType.TypeSettings.TypeSettings
  nameWithType.vb: ActionType.TypeSettings.New
  fullName.vb: TinyLife.Actions.ActionType.TypeSettings.New
  name.vb: New
- uid: TinyLife.Actions.ActionType.TypeSettings.SetData*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.SetData
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_SetData__1_System_String___0_
  name: SetData
  nameWithType: ActionType.TypeSettings.SetData
  fullName: TinyLife.Actions.ActionType.TypeSettings.SetData
- uid: MLEM.Misc.IGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Misc.IGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Misc.IGenericDataHolder
  definition: MLEM.Misc.IGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: IGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Misc.IGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: IGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Misc.IGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: MLEM.Misc.IGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Misc.IGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: IGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Misc.IGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: IGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Misc.IGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Actions.ActionType.TypeSettings.GetData*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.GetData
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_GetData__1_System_String_
  name: GetData
  nameWithType: ActionType.TypeSettings.GetData
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetData
- uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.IGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: IGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Misc.IGenericDataHolder.GetData<T>(string)
  nameWithType.vb: IGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.IGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_GetDataKeys
  name: GetDataKeys
  nameWithType: ActionType.TypeSettings.GetDataKeys
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
- uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.IGenericDataHolder.GetDataKeys
  parent: MLEM.Misc.IGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: IGenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.IGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
