### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  id: Opening
  parent: TinyLife.World
  children:
  - TinyLife.World.Opening.#ctor(TinyLife.World.OpeningType,System.Int32[])
  - TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  - TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Map,TinyLife.Objects.WallLike,TinyLife.Objects.MapObject)
  - TinyLife.World.Opening.Colors
  - TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.Objects.WallLike,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.World.Opening.GetDescription
  - TinyLife.World.Opening.Migrations
  - TinyLife.World.Opening.Type
  - TinyLife.World.Opening.Validate(TinyLife.Objects.WallLike,TinyLife.World.Map,TinyLife.Utilities.AppliedMigrations)
  langs:
  - csharp
  - vb
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    An opening is some sort of extrusion in a <xref href="TinyLife.Objects.WallLike" data-throw-if-not-resolved="false"></xref>, like a window or a door.

    Openings are created from their underlying <xref href="TinyLife.World.OpeningType" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Opening
    content.vb: >-
      <DataContract>

      Public Class Opening
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.World.WalkableOpening
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Opening.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Opening.Migrations
  commentId: F:TinyLife.World.Opening.Migrations
  id: Migrations
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Migrations
  nameWithType: Opening.Migrations
  fullName: TinyLife.World.Opening.Migrations
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The global set of migrations that should be applied to every <xref href="TinyLife.World.Opening" data-throw-if-not-resolved="false"></xref> instance.

    To register migrations for specific opening types only, use <xref href="TinyLife.World.OpeningType.Migrations" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly List<Migration<Opening>> Migrations
    return:
      type: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.Opening}}
    content.vb: Public Shared ReadOnly Migrations As List(Of Migration(Of Opening))
- uid: TinyLife.World.Opening.Type
  commentId: F:TinyLife.World.Opening.Type
  id: Type
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Opening.Type
  fullName: TinyLife.World.Opening.Type
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The <xref href="TinyLife.World.OpeningType" data-throw-if-not-resolved="false"></xref> that this opening has
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly OpeningType Type
    return:
      type: TinyLife.World.OpeningType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As OpeningType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Opening.Colors
  commentId: F:TinyLife.World.Opening.Colors
  id: Colors
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Opening.Colors
  fullName: TinyLife.World.Opening.Colors
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The indices of the <xref href="TinyLife.World.OpeningType" data-throw-if-not-resolved="false"></xref>'s <xref href="TinyLife.World.OpeningType.Colors" data-throw-if-not-resolved="false"></xref> that this opening instance has.
  example: []
  syntax:
    content: >-
      [DataMember]

      public int[] Colors
    return:
      type: System.Int32[]
    content.vb: >-
      <DataMember>

      Public Colors As Integer()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Opening.#ctor(TinyLife.World.OpeningType,System.Int32[])
  commentId: M:TinyLife.World.Opening.#ctor(TinyLife.World.OpeningType,System.Int32[])
  id: '#ctor(TinyLife.World.OpeningType,System.Int32[])'
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Opening(OpeningType, int[])
  nameWithType: Opening.Opening(OpeningType, int[])
  fullName: TinyLife.World.Opening.Opening(TinyLife.World.OpeningType, int[])
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new opening from the given opening type and color
  example: []
  syntax:
    content: public Opening(OpeningType type, int[] colors)
    parameters:
    - id: type
      type: TinyLife.World.OpeningType
      description: The opening type
    - id: colors
      type: System.Int32[]
      description: The indices of the colors to use
    content.vb: Public Sub New(type As OpeningType, colors As Integer())
  overload: TinyLife.World.Opening.#ctor*
  nameWithType.vb: Opening.New(OpeningType, Integer())
  fullName.vb: TinyLife.World.Opening.New(TinyLife.World.OpeningType, Integer())
  name.vb: New(OpeningType, Integer())
- uid: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.Objects.WallLike,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.Objects.WallLike,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.Objects.WallLike,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Map, WallLike, Vector2, bool, float, Color?)
  nameWithType: Opening.Draw(GameTime, SpriteBatch, Map, WallLike, Vector2, bool, float, Color?)
  fullName: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.Objects.WallLike, Microsoft.Xna.Framework.Vector2, bool, float, Microsoft.Xna.Framework.Color?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Draws this opening in the world with the given settings
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch, Map map, WallLike wall, Vector2 drawPos, bool vertical, float scale, Color? overrideColor)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: map
      type: TinyLife.World.Map
      description: The map that the opening is on
    - id: wall
      type: TinyLife.Objects.WallLike
      description: The wall that the opening is in
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw the opening on
    - id: vertical
      type: System.Boolean
      description: Whether the wall that the opening is on is vertical
    - id: scale
      type: System.Single
      description: The scale to draw the opening with
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that should be used instead of this opening's default color, or null to use the opening's default color
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch, map As Map, wall As WallLike, drawPos As Vector2, vertical As Boolean, scale As Single, overrideColor As Color?)
  overload: TinyLife.World.Opening.Draw*
  nameWithType.vb: Opening.Draw(GameTime, SpriteBatch, Map, WallLike, Vector2, Boolean, Single, Color?)
  fullName.vb: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.Objects.WallLike, Microsoft.Xna.Framework.Vector2, Boolean, Single, Microsoft.Xna.Framework.Color?)
  name.vb: Draw(GameTime, SpriteBatch, Map, WallLike, Vector2, Boolean, Single, Color?)
- uid: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Map,TinyLife.Objects.WallLike,TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Map,TinyLife.Objects.WallLike,TinyLife.Objects.MapObject)
  id: CanWalkThrough(TinyLife.World.Map,TinyLife.Objects.WallLike,TinyLife.Objects.MapObject)
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: CanWalkThrough(Map, WallLike, MapObject)
  nameWithType: Opening.CanWalkThrough(Map, WallLike, MapObject)
  fullName: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Map, TinyLife.Objects.WallLike, TinyLife.Objects.MapObject)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    Returns whether a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> is able to walk through a <xref href="TinyLife.Objects.WallLike" data-throw-if-not-resolved="false"></xref> that has this opening.

    This returns true for <xref href="TinyLife.World.WalkableOpening" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.LockableAnimatedDoor" data-throw-if-not-resolved="false"></xref> and false for <xref href="TinyLife.World.Opening" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual bool CanWalkThrough(Map map, WallLike wall, MapObject obj)
    parameters:
    - id: map
      type: TinyLife.World.Map
    - id: wall
      type: TinyLife.Objects.WallLike
    - id: obj
      type: TinyLife.Objects.MapObject
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overridable Function CanWalkThrough(map As Map, wall As WallLike, obj As MapObject) As Boolean
  overload: TinyLife.World.Opening.CanWalkThrough*
- uid: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  commentId: M:TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  id: CanPlaceOn(TinyLife.Objects.FurnitureType)
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: CanPlaceOn(FurnitureType)
  nameWithType: Opening.CanPlaceOn(FurnitureType)
  fullName: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    Whether the given <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref> can be attached to this opening.

    By default, this method returns true when the furniture has the <xref href="TinyLife.Objects.ObjectCategory.CanCoverWindow" data-throw-if-not-resolved="false"></xref> category.
  example: []
  syntax:
    content: public virtual bool CanPlaceOn(FurnitureType type)
    parameters:
    - id: type
      type: TinyLife.Objects.FurnitureType
    return:
      type: System.Boolean
      description: Whether the opening is a window
    content.vb: Public Overridable Function CanPlaceOn(type As FurnitureType) As Boolean
  overload: TinyLife.World.Opening.CanPlaceOn*
- uid: TinyLife.World.Opening.Validate(TinyLife.Objects.WallLike,TinyLife.World.Map,TinyLife.Utilities.AppliedMigrations)
  commentId: M:TinyLife.World.Opening.Validate(TinyLife.Objects.WallLike,TinyLife.World.Map,TinyLife.Utilities.AppliedMigrations)
  id: Validate(TinyLife.Objects.WallLike,TinyLife.World.Map,TinyLife.Utilities.AppliedMigrations)
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Validate(WallLike, Map, AppliedMigrations)
  nameWithType: Opening.Validate(WallLike, Map, AppliedMigrations)
  fullName: TinyLife.World.Opening.Validate(TinyLife.Objects.WallLike, TinyLife.World.Map, TinyLife.Utilities.AppliedMigrations)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Validates this opening, returning false if it is somehow invalid. This method is called when a <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref> is loaded.
  example: []
  syntax:
    content: public virtual bool Validate(WallLike wall, Map map, AppliedMigrations appliedMigrations)
    parameters:
    - id: wall
      type: TinyLife.Objects.WallLike
      description: The wall that this opening is on.
    - id: map
      type: TinyLife.World.Map
      description: The map that this opening is on.
    - id: appliedMigrations
      type: TinyLife.Utilities.AppliedMigrations
      description: The set of migrations that have already been applied on this object.
    return:
      type: System.Boolean
      description: Whether this opening is valid.
    content.vb: Public Overridable Function Validate(wall As WallLike, map As Map, appliedMigrations As AppliedMigrations) As Boolean
  overload: TinyLife.World.Opening.Validate*
- uid: TinyLife.World.Opening.GetDescription
  commentId: M:TinyLife.World.Opening.GetDescription
  id: GetDescription
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: GetDescription()
  nameWithType: Opening.GetDescription()
  fullName: TinyLife.World.Opening.GetDescription()
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Returns a set of strings that should be displayed if this opening is hovered over in build mode.
  example: []
  syntax:
    content: public virtual IEnumerable<string> GetDescription()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A set of description strings for this opening.
    content.vb: Public Overridable Function GetDescription() As IEnumerable(Of String)
  overload: TinyLife.World.Opening.GetDescription*
references:
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.WallLike.html
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.World.OpeningType
  commentId: T:TinyLife.World.OpeningType
  parent: TinyLife.World
  href: TinyLife.World.OpeningType.html
  name: OpeningType
  nameWithType: OpeningType
  fullName: TinyLife.World.OpeningType
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.Opening.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<Opening>(Opening)
  nameWithType: Extensions.JsonCopy<Opening>(Opening)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Opening>(TinyLife.World.Opening)
  nameWithType.vb: Extensions.JsonCopy(Of Opening)(Opening)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Opening)(TinyLife.World.Opening)
  name.vb: JsonCopy(Of Opening)(Opening)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Opening)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Opening)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: )
  - name: (
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  href: TinyLife.World.Opening.html
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World.OpeningType.Migrations
  commentId: P:TinyLife.World.OpeningType.Migrations
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Migrations
  name: Migrations
  nameWithType: OpeningType.Migrations
  fullName: TinyLife.World.OpeningType.Migrations
- uid: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.Opening}}
  commentId: T:System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.Opening}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Migration<Opening>>
  nameWithType: List<Migration<Opening>>
  fullName: System.Collections.Generic.List<TinyLife.Utilities.Migration<TinyLife.World.Opening>>
  nameWithType.vb: List(Of Migration(Of Opening))
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Utilities.Migration(Of TinyLife.World.Opening))
  name.vb: List(Of Migration(Of Opening))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: <
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: )
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.World.OpeningType.Colors
  commentId: F:TinyLife.World.OpeningType.Colors
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Colors
  name: Colors
  nameWithType: OpeningType.Colors
  fullName: TinyLife.World.OpeningType.Colors
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: TinyLife.World.Opening.#ctor*
  commentId: Overload:TinyLife.World.Opening.#ctor
  href: TinyLife.World.Opening.html#TinyLife_World_Opening__ctor_TinyLife_World_OpeningType_System_Int32___
  name: Opening
  nameWithType: Opening.Opening
  fullName: TinyLife.World.Opening.Opening
  nameWithType.vb: Opening.New
  fullName.vb: TinyLife.World.Opening.New
  name.vb: New
- uid: TinyLife.World.Opening.Draw*
  commentId: Overload:TinyLife.World.Opening.Draw
  href: TinyLife.World.Opening.html#TinyLife_World_Opening_Draw_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_TinyLife_World_Map_TinyLife_Objects_WallLike_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Single_System_Nullable_Microsoft_Xna_Framework_Color__
  name: Draw
  nameWithType: Opening.Draw
  fullName: TinyLife.World.Opening.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.World.WalkableOpening
  commentId: T:TinyLife.World.WalkableOpening
  parent: TinyLife.World
  href: TinyLife.World.WalkableOpening.html
  name: WalkableOpening
  nameWithType: WalkableOpening
  fullName: TinyLife.World.WalkableOpening
- uid: TinyLife.World.LockableAnimatedDoor
  commentId: T:TinyLife.World.LockableAnimatedDoor
  parent: TinyLife.World
  href: TinyLife.World.LockableAnimatedDoor.html
  name: LockableAnimatedDoor
  nameWithType: LockableAnimatedDoor
  fullName: TinyLife.World.LockableAnimatedDoor
- uid: TinyLife.World.Opening.CanWalkThrough*
  commentId: Overload:TinyLife.World.Opening.CanWalkThrough
  href: TinyLife.World.Opening.html#TinyLife_World_Opening_CanWalkThrough_TinyLife_World_Map_TinyLife_Objects_WallLike_TinyLife_Objects_MapObject_
  name: CanWalkThrough
  nameWithType: Opening.CanWalkThrough
  fullName: TinyLife.World.Opening.CanWalkThrough
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  href: TinyLife.Objects.MapObject.html
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  href: TinyLife.Objects.FurnitureType.html
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Objects.ObjectCategory.CanCoverWindow
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverWindow
  href: TinyLife.Objects.ObjectCategory.html#TinyLife_Objects_ObjectCategory_CanCoverWindow
  name: CanCoverWindow
  nameWithType: ObjectCategory.CanCoverWindow
  fullName: TinyLife.Objects.ObjectCategory.CanCoverWindow
- uid: TinyLife.World.Opening.CanPlaceOn*
  commentId: Overload:TinyLife.World.Opening.CanPlaceOn
  href: TinyLife.World.Opening.html#TinyLife_World_Opening_CanPlaceOn_TinyLife_Objects_FurnitureType_
  name: CanPlaceOn
  nameWithType: Opening.CanPlaceOn
  fullName: TinyLife.World.Opening.CanPlaceOn
- uid: TinyLife.World.Opening.Validate*
  commentId: Overload:TinyLife.World.Opening.Validate
  href: TinyLife.World.Opening.html#TinyLife_World_Opening_Validate_TinyLife_Objects_WallLike_TinyLife_World_Map_TinyLife_Utilities_AppliedMigrations_
  name: Validate
  nameWithType: Opening.Validate
  fullName: TinyLife.World.Opening.Validate
- uid: TinyLife.Utilities.AppliedMigrations
  commentId: T:TinyLife.Utilities.AppliedMigrations
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.AppliedMigrations.html
  name: AppliedMigrations
  nameWithType: AppliedMigrations
  fullName: TinyLife.Utilities.AppliedMigrations
- uid: TinyLife.World.Opening.GetDescription*
  commentId: Overload:TinyLife.World.Opening.GetDescription
  href: TinyLife.World.Opening.html#TinyLife_World_Opening_GetDescription
  name: GetDescription
  nameWithType: Opening.GetDescription
  fullName: TinyLife.World.Opening.GetDescription
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
