### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  id: LotType
  parent: TinyLife.World
  children:
  - TinyLife.World.LotType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Single},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  - TinyLife.World.LotType.ActionPriorityMultiplier
  - TinyLife.World.LotType.Bar
  - TinyLife.World.LotType.Cafe
  - TinyLife.World.LotType.CanExecuteAction
  - TinyLife.World.LotType.DisplayName
  - TinyLife.World.LotType.Employments
  - TinyLife.World.LotType.GenericPublicLot
  - TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
  - TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot,System.Single,System.Int32)
  - TinyLife.World.LotType.GetVisitPriority
  - TinyLife.World.LotType.Gym
  - TinyLife.World.LotType.Icon
  - TinyLife.World.LotType.IsResidential
  - TinyLife.World.LotType.KidsPlayground
  - TinyLife.World.LotType.Library
  - TinyLife.World.LotType.Museum
  - TinyLife.World.LotType.Name
  - TinyLife.World.LotType.OnGetCurrentVisitPriority
  - TinyLife.World.LotType.Park
  - TinyLife.World.LotType.RecCenter
  - TinyLife.World.LotType.Register(TinyLife.World.LotType)
  - TinyLife.World.LotType.RequiredFurniture
  - TinyLife.World.LotType.Residential
  - TinyLife.World.LotType.Types
  - TinyLife.World.LotType.VisitHours
  langs:
  - csharp
  - vb
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A lot type is data for a <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref> that determines the required furniture on the lot as well as whether the lot is residential or not.

    Additionally, custom lot types can define different reasons and interactions for <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> objects to visit lots of the type.
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(MigratingStaticJsonConverter<LotType>), new object[] { typeof(LotType), "PrivateTypes", true })]

      public class LotType
    content.vb: >-
      <JsonConverter(GetType(MigratingStaticJsonConverter(Of LotType)), New Object() { GetType(LotType), "PrivateTypes", True })>

      Public Class LotType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotType.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.LotType.Types
  commentId: F:TinyLife.World.LotType.Types
  id: Types
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: LotType.Types
  fullName: TinyLife.World.LotType.Types
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: A registry for all <xref href="TinyLife.World.LotType" data-throw-if-not-resolved="false"></xref> objects that the game and mods define
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, LotType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.LotType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, LotType)
- uid: TinyLife.World.LotType.Residential
  commentId: F:TinyLife.World.LotType.Residential
  id: Residential
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Residential
  nameWithType: LotType.Residential
  fullName: TinyLife.World.LotType.Residential
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Residential
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Residential As LotType
- uid: TinyLife.World.LotType.Park
  commentId: F:TinyLife.World.LotType.Park
  id: Park
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Park
  nameWithType: LotType.Park
  fullName: TinyLife.World.LotType.Park
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Park
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Park As LotType
- uid: TinyLife.World.LotType.Cafe
  commentId: F:TinyLife.World.LotType.Cafe
  id: Cafe
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Cafe
  nameWithType: LotType.Cafe
  fullName: TinyLife.World.LotType.Cafe
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Cafe
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Cafe As LotType
- uid: TinyLife.World.LotType.KidsPlayground
  commentId: F:TinyLife.World.LotType.KidsPlayground
  id: KidsPlayground
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: KidsPlayground
  nameWithType: LotType.KidsPlayground
  fullName: TinyLife.World.LotType.KidsPlayground
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType KidsPlayground
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly KidsPlayground As LotType
- uid: TinyLife.World.LotType.Library
  commentId: F:TinyLife.World.LotType.Library
  id: Library
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Library
  nameWithType: LotType.Library
  fullName: TinyLife.World.LotType.Library
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Library
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Library As LotType
- uid: TinyLife.World.LotType.GenericPublicLot
  commentId: F:TinyLife.World.LotType.GenericPublicLot
  id: GenericPublicLot
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GenericPublicLot
  nameWithType: LotType.GenericPublicLot
  fullName: TinyLife.World.LotType.GenericPublicLot
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType GenericPublicLot
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly GenericPublicLot As LotType
- uid: TinyLife.World.LotType.Gym
  commentId: F:TinyLife.World.LotType.Gym
  id: Gym
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Gym
  nameWithType: LotType.Gym
  fullName: TinyLife.World.LotType.Gym
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Gym
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Gym As LotType
- uid: TinyLife.World.LotType.Bar
  commentId: F:TinyLife.World.LotType.Bar
  id: Bar
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Bar
  nameWithType: LotType.Bar
  fullName: TinyLife.World.LotType.Bar
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Bar
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Bar As LotType
- uid: TinyLife.World.LotType.Museum
  commentId: F:TinyLife.World.LotType.Museum
  id: Museum
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Museum
  nameWithType: LotType.Museum
  fullName: TinyLife.World.LotType.Museum
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Museum
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Museum As LotType
- uid: TinyLife.World.LotType.RecCenter
  commentId: F:TinyLife.World.LotType.RecCenter
  id: RecCenter
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: RecCenter
  nameWithType: LotType.RecCenter
  fullName: TinyLife.World.LotType.RecCenter
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType RecCenter
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly RecCenter As LotType
- uid: TinyLife.World.LotType.OnGetCurrentVisitPriority
  commentId: E:TinyLife.World.LotType.OnGetCurrentVisitPriority
  id: OnGetCurrentVisitPriority
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: OnGetCurrentVisitPriority
  nameWithType: LotType.OnGetCurrentVisitPriority
  fullName: TinyLife.World.LotType.OnGetCurrentVisitPriority
  type: Event
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: An event that is invoked in <xref href="TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cSystem.Nullable%7bSystem.TimeSpan%7d)" data-throw-if-not-resolved="false"></xref>, which allows modifying the visitation priority of this lot.
  example: []
  syntax:
    content: public static event LotType.CurrentVisitPriorityDelegate OnGetCurrentVisitPriority
    return:
      type: TinyLife.World.LotType.CurrentVisitPriorityDelegate
    content.vb: Public Shared Event OnGetCurrentVisitPriority As LotType.CurrentVisitPriorityDelegate
- uid: TinyLife.World.LotType.Name
  commentId: F:TinyLife.World.LotType.Name
  id: Name
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LotType.Name
  fullName: TinyLife.World.LotType.Name
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The name of this lot type
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
- uid: TinyLife.World.LotType.Icon
  commentId: F:TinyLife.World.LotType.Icon
  id: Icon
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: LotType.Icon
  fullName: TinyLife.World.LotType.Icon
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The icon that this lot type should display.
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
- uid: TinyLife.World.LotType.IsResidential
  commentId: F:TinyLife.World.LotType.IsResidential
  id: IsResidential
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: IsResidential
  nameWithType: LotType.IsResidential
  fullName: TinyLife.World.LotType.IsResidential
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    Whether this lot is residential.

    A residential lot is one that <xref href="TinyLife.World.Household" data-throw-if-not-resolved="false"></xref>s can move into.
  example: []
  syntax:
    content: public readonly bool IsResidential
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsResidential As Boolean
- uid: TinyLife.World.LotType.RequiredFurniture
  commentId: F:TinyLife.World.LotType.RequiredFurniture
  id: RequiredFurniture
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: RequiredFurniture
  nameWithType: LotType.RequiredFurniture
  fullName: TinyLife.World.LotType.RequiredFurniture
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A set of furniture that is required on the lot.

    Each entry determines the <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> required, as well as the amount of that item that is required on the lot and an unlocalized display name for the requirement.
  example: []
  syntax:
    content: public readonly (Predicate<Furniture> Predicate, int Amount, string Name)[] RequiredFurniture
    return:
      type: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
    content.vb: Public ReadOnly RequiredFurniture As (Predicate As Predicate(Of Furniture), Amount As Integer, Name As String)()
- uid: TinyLife.World.LotType.GetVisitPriority
  commentId: F:TinyLife.World.LotType.GetVisitPriority
  id: GetVisitPriority
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GetVisitPriority
  nameWithType: LotType.GetVisitPriority
  fullName: TinyLife.World.LotType.GetVisitPriority
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A function that returns, for a <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref> with this lot type, and a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> trying ot visit the lot, how likely it is for the lot to be chosen. It is recommended to use a helper method like <xref href="TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot%2cSystem.Single%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    The higher the return value is, the more likely it is for this lot to be chosen.

    For reference, the "Park" lot type always returns 200.

    See also <xref href="TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cSystem.Nullable%7bSystem.TimeSpan%7d)" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly Func<Lot, PersonLike, float> GetVisitPriority
    return:
      type: System.Func{TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Single}
    content.vb: Public ReadOnly GetVisitPriority As Func(Of Lot, PersonLike, Single)
- uid: TinyLife.World.LotType.Employments
  commentId: P:TinyLife.World.LotType.Employments
  id: Employments
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Employments
  nameWithType: LotType.Employments
  fullName: TinyLife.World.LotType.Employments
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A set of <xref href="TinyLife.World.LotEmployment" data-throw-if-not-resolved="false"></xref> instances that this lot requires to keep running.

    Players have the ability to add people from their exported households to work in a lot employment position.
  example: []
  syntax:
    content: public LotEmployment[] Employments { get; init; }
    parameters: []
    return:
      type: TinyLife.World.LotEmployment[]
    content.vb: Public Property Employments As LotEmployment()
  overload: TinyLife.World.LotType.Employments*
- uid: TinyLife.World.LotType.CanExecuteAction
  commentId: P:TinyLife.World.LotType.CanExecuteAction
  id: CanExecuteAction
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: CanExecuteAction
  nameWithType: LotType.CanExecuteAction
  fullName: TinyLife.World.LotType.CanExecuteAction
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A function that optionally determines whether a certain <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref> can be executed on this lot. This function also receives a <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>, and a <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">bool</a> that indicates whether the action is started automatically.

    This function is useful for lots like <xref href="TinyLife.World.LotType.Cafe" data-throw-if-not-resolved="false"></xref>, where using a coffee machine is disallowed if the person is not a lot employee.
  example: []
  syntax:
    content: public Func<ActionType, ActionInfo, bool, CanExecuteResult> CanExecuteAction { get; init; }
    parameters: []
    return:
      type: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.CanExecuteResult}
    content.vb: Public Property CanExecuteAction As Func(Of ActionType, ActionInfo, Boolean, CanExecuteResult)
  overload: TinyLife.World.LotType.CanExecuteAction*
- uid: TinyLife.World.LotType.VisitHours
  commentId: P:TinyLife.World.LotType.VisitHours
  id: VisitHours
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: VisitHours
  nameWithType: LotType.VisitHours
  fullName: TinyLife.World.LotType.VisitHours
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The visitation hours that this lot has, which is used in <xref href="TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot%2cTinyLife.Objects.PersonLike%2cSystem.Nullable%7bSystem.TimeSpan%7d)" data-throw-if-not-resolved="false"></xref>.

    The default value for this property is 6 to 23.
  example: []
  syntax:
    content: public (int, int) VisitHours { get; init; }
    parameters: []
    return:
      type: System.ValueTuple{System.Int32,System.Int32}
    content.vb: Public Property VisitHours As (Integer, Integer)
  overload: TinyLife.World.LotType.VisitHours*
- uid: TinyLife.World.LotType.ActionPriorityMultiplier
  commentId: P:TinyLife.World.LotType.ActionPriorityMultiplier
  id: ActionPriorityMultiplier
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: ActionPriorityMultiplier
  nameWithType: LotType.ActionPriorityMultiplier
  fullName: TinyLife.World.LotType.ActionPriorityMultiplier
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A function that can optionally be used to make certain actions have a higher priority for people visiting this lot.

    The returned <xref href="System.Single" data-throw-if-not-resolved="false"></xref> will be multiplied with the default priority for the given <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Func<PersonLike, ActionType, float> ActionPriorityMultiplier { get; init; }
    parameters: []
    return:
      type: System.Func{TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,System.Single}
    content.vb: Public Property ActionPriorityMultiplier As Func(Of PersonLike, ActionType, Single)
  overload: TinyLife.World.LotType.ActionPriorityMultiplier*
- uid: TinyLife.World.LotType.DisplayName
  commentId: P:TinyLife.World.LotType.DisplayName
  id: DisplayName
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: LotType.DisplayName
  fullName: TinyLife.World.LotType.DisplayName
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Returns the display name of this lot, which is the <xref href="TinyLife.World.LotType.Icon" data-throw-if-not-resolved="false"></xref> followed by a localized version of the <xref href="TinyLife.World.LotType.Name" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public string DisplayName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayName As String
  overload: TinyLife.World.LotType.DisplayName*
- uid: TinyLife.World.LotType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Single},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  commentId: M:TinyLife.World.LotType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Single},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Single},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])'
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: LotType(string, TextureRegion, bool, Func<Lot, PersonLike, float>, params (Predicate<Furniture>, int, string)[])
  nameWithType: LotType.LotType(string, TextureRegion, bool, Func<Lot, PersonLike, float>, params (Predicate<Furniture>, int, string)[])
  fullName: TinyLife.World.LotType.LotType(string, MLEM.Textures.TextureRegion, bool, System.Func<TinyLife.World.Lot, TinyLife.Objects.PersonLike, float>, params (System.Predicate<TinyLife.Objects.Furniture>, int, string)[])
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new lot type with the given settings
  example: []
  syntax:
    content: public LotType(string name, TextureRegion icon, bool isResidential, Func<Lot, PersonLike, float> getVisitPriority, params (Predicate<Furniture>, int, string)[] requiredFurniture)
    parameters:
    - id: name
      type: System.String
      description: The name of this lot type
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The icon that this lot type should display.
    - id: isResidential
      type: System.Boolean
      description: Whether lots of this type should be considered residential
    - id: getVisitPriority
      type: System.Func{TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Single}
      description: A function that returns this lot type's visitation priority. It's recommended to use a helper method like <xref href="TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot%2cSystem.Single%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.
    - id: requiredFurniture
      type: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
      description: A set of furniture and amounts that have to be present on lots of this type, as well as an unlocalized name for the requirement
    content.vb: Public Sub New(name As String, icon As TextureRegion, isResidential As Boolean, getVisitPriority As Func(Of Lot, PersonLike, Single), ParamArray requiredFurniture As (Predicate(Of Furniture), Integer, String)())
  overload: TinyLife.World.LotType.#ctor*
  nameWithType.vb: LotType.New(String, TextureRegion, Boolean, Func(Of Lot, PersonLike, Single), ParamArray (Predicate(Of Furniture), Integer, String)())
  fullName.vb: TinyLife.World.LotType.New(String, MLEM.Textures.TextureRegion, Boolean, System.Func(Of TinyLife.World.Lot, TinyLife.Objects.PersonLike, Single), ParamArray (System.Predicate(Of TinyLife.Objects.Furniture), Integer, String)())
  name.vb: New(String, TextureRegion, Boolean, Func(Of Lot, PersonLike, Single), ParamArray (Predicate(Of Furniture), Integer, String)())
- uid: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
  id: GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GetCurrentVisitPriority(Lot, PersonLike, TimeSpan?)
  nameWithType: LotType.GetCurrentVisitPriority(Lot, PersonLike, TimeSpan?)
  fullName: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot, TinyLife.Objects.PersonLike, System.TimeSpan?)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    Returns this lot's current visitation priority, which is a combination of the <xref href="TinyLife.World.LotType.GetVisitPriority" data-throw-if-not-resolved="false"></xref> function, this lot's <xref href="TinyLife.World.LotType.VisitHours" data-throw-if-not-resolved="false"></xref>, the <xref href="TinyLife.World.LotType.OnGetCurrentVisitPriority" data-throw-if-not-resolved="false"></xref> event, as well as the lot's <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref>'s <xref href="TinyLife.World.Map.GetVisitPriority(TinyLife.Objects.PersonLike)" data-throw-if-not-resolved="false"></xref> method.

    Note that visitation priority doesn't factor in whether the lot's <xref href="TinyLife.World.Lot.Map" data-throw-if-not-resolved="false"></xref> is the same as the <code class="paramref">person</code>'s.

    See also <xref href="TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float GetCurrentVisitPriority(Lot lot, PersonLike person, TimeSpan? time = null)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot.
    - id: person
      type: TinyLife.Objects.PersonLike
      description: The person whose visitation priority to query.
    - id: time
      type: System.Nullable{System.TimeSpan}
      description: The current time, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to use the <xref href="TinyLife.World.Map.Time" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Single
      description: The current visitation priority for the lot.
    content.vb: Public Function GetCurrentVisitPriority(lot As Lot, person As PersonLike, time As TimeSpan? = Nothing) As Single
  overload: TinyLife.World.LotType.GetCurrentVisitPriority*
- uid: TinyLife.World.LotType.Register(TinyLife.World.LotType)
  commentId: M:TinyLife.World.LotType.Register(TinyLife.World.LotType)
  id: Register(TinyLife.World.LotType)
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Register(LotType)
  nameWithType: LotType.Register(LotType)
  fullName: TinyLife.World.LotType.Register(TinyLife.World.LotType)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Registers a new lot type to the <xref href="TinyLife.World.LotType.Types" data-throw-if-not-resolved="false"></xref> registry
  example: []
  syntax:
    content: public static LotType Register(LotType type)
    parameters:
    - id: type
      type: TinyLife.World.LotType
      description: The lot type to register
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared Function Register(type As LotType) As LotType
  overload: TinyLife.World.LotType.Register*
- uid: TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot,System.Single,System.Int32)
  commentId: M:TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot,System.Single,System.Int32)
  id: GetScalingVisitPriority(TinyLife.World.Lot,System.Single,System.Int32)
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GetScalingVisitPriority(Lot, float, int)
  nameWithType: LotType.GetScalingVisitPriority(Lot, float, int)
  fullName: TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot, float, int)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: A helper method intended to be used with <xref href="TinyLife.World.LotType.GetVisitPriority" data-throw-if-not-resolved="false"></xref> that scales the visitation priority with the amount of people that are currently on the lot, both from the current household and other households.
  example: []
  syntax:
    content: public static float GetScalingVisitPriority(Lot lot, float basePriority, int maxVisitors = 25)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot.
    - id: basePriority
      type: System.Single
      description: The base priority, which will be multiplied with the visitor scale factor.
    - id: maxVisitors
      type: System.Int32
      description: The maximum amount of visitors the lot should be able to have before a priority of 0 is returned. Defaults to 25.
    return:
      type: System.Single
      description: The scaling visit priority for the given <code class="paramref">lot</code>.
    content.vb: Public Shared Function GetScalingVisitPriority(lot As Lot, basePriority As Single, maxVisitors As Integer = 25) As Single
  overload: TinyLife.World.LotType.GetScalingVisitPriority*
  nameWithType.vb: LotType.GetScalingVisitPriority(Lot, Single, Integer)
  fullName.vb: TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot, Single, Integer)
  name.vb: GetScalingVisitPriority(Lot, Single, Integer)
references:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  href: TinyLife.World.Lot.html
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.LotType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<LotType>(LotType)
  nameWithType: Extensions.JsonCopy<LotType>(LotType)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotType>(TinyLife.World.LotType)
  nameWithType.vb: Extensions.JsonCopy(Of LotType)(LotType)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotType)(TinyLife.World.LotType)
  name.vb: JsonCopy(Of LotType)(LotType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotType)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.LotType
    name: LotType
    href: TinyLife.World.LotType.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.LotType
    name: LotType
    href: TinyLife.World.LotType.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotType)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotType
    name: LotType
    href: TinyLife.World.LotType.html
  - name: )
  - name: (
  - uid: TinyLife.World.LotType
    name: LotType
    href: TinyLife.World.LotType.html
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  href: TinyLife.World.LotType.html
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.LotType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.LotType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<string, LotType>
  nameWithType: ReadOnlyDictionary<string, LotType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<string, TinyLife.World.LotType>
  nameWithType.vb: ReadOnlyDictionary(Of String, LotType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of String, TinyLife.World.LotType)
  name.vb: ReadOnlyDictionary(Of String, LotType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.LotType
    name: LotType
    href: TinyLife.World.LotType.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.LotType
    name: LotType
    href: TinyLife.World.LotType.html
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
  isExternal: true
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetCurrentVisitPriority_TinyLife_World_Lot_TinyLife_Objects_PersonLike_System_Nullable_System_TimeSpan__
  name: GetCurrentVisitPriority(Lot, PersonLike, TimeSpan?)
  nameWithType: LotType.GetCurrentVisitPriority(Lot, PersonLike, TimeSpan?)
  fullName: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot, TinyLife.Objects.PersonLike, System.TimeSpan?)
  spec.csharp:
  - uid: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
    name: GetCurrentVisitPriority
    href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetCurrentVisitPriority_TinyLife_World_Lot_TinyLife_Objects_PersonLike_System_Nullable_System_TimeSpan__
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.World.LotType.GetCurrentVisitPriority(TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Nullable{System.TimeSpan})
    name: GetCurrentVisitPriority
    href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetCurrentVisitPriority_TinyLife_World_Lot_TinyLife_Objects_PersonLike_System_Nullable_System_TimeSpan__
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  - name: )
- uid: TinyLife.World.LotType.CurrentVisitPriorityDelegate
  commentId: T:TinyLife.World.LotType.CurrentVisitPriorityDelegate
  parent: TinyLife.World
  href: TinyLife.World.LotType.html
  name: LotType.CurrentVisitPriorityDelegate
  nameWithType: LotType.CurrentVisitPriorityDelegate
  fullName: TinyLife.World.LotType.CurrentVisitPriorityDelegate
  spec.csharp:
  - uid: TinyLife.World.LotType
    name: LotType
    href: TinyLife.World.LotType.html
  - name: .
  - uid: TinyLife.World.LotType.CurrentVisitPriorityDelegate
    name: CurrentVisitPriorityDelegate
    href: TinyLife.World.LotType.CurrentVisitPriorityDelegate.html
  spec.vb:
  - uid: TinyLife.World.LotType
    name: LotType
    href: TinyLife.World.LotType.html
  - name: .
  - uid: TinyLife.World.LotType.CurrentVisitPriorityDelegate
    name: CurrentVisitPriorityDelegate
    href: TinyLife.World.LotType.CurrentVisitPriorityDelegate.html
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  href: TinyLife.World.Household.html
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  href: TinyLife.Objects.Furniture.html
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: (Predicate<Furniture> Predicate, int Amount, string Name)[]
  nameWithType: (Predicate<Furniture> Predicate, int Amount, string Name)[]
  fullName: (System.Predicate<TinyLife.Objects.Furniture> Predicate, int Amount, string Name)[]
  nameWithType.vb: (Predicate As Predicate(Of Furniture), Amount As Integer, Name As String)()
  fullName.vb: (Predicate As System.Predicate(Of TinyLife.Objects.Furniture), Amount As Integer, Name As String)()
  name.vb: (Predicate As Predicate(Of Furniture), Amount As Integer, Name As String)()
  spec.csharp:
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Predicate
    name: Predicate
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.predicate
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Amount
    name: Amount
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.amount
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Name
    name: Name
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.name
  - name: )
  - name: '['
  - name: ']'
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Predicate
    name: Predicate
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.predicate
  - name: " "
  - name: As
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Amount
    name: Amount
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.amount
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Name
    name: Name
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.name
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
- uid: TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot,System.Single,System.Int32)
  commentId: M:TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot,System.Single,System.Int32)
  isExternal: true
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetScalingVisitPriority_TinyLife_World_Lot_System_Single_System_Int32_
  name: GetScalingVisitPriority(Lot, float, int)
  nameWithType: LotType.GetScalingVisitPriority(Lot, float, int)
  fullName: TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot, float, int)
  nameWithType.vb: LotType.GetScalingVisitPriority(Lot, Single, Integer)
  fullName.vb: TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot, Single, Integer)
  name.vb: GetScalingVisitPriority(Lot, Single, Integer)
  spec.csharp:
  - uid: TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot,System.Single,System.Int32)
    name: GetScalingVisitPriority
    href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetScalingVisitPriority_TinyLife_World_Lot_System_Single_System_Int32_
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: TinyLife.World.LotType.GetScalingVisitPriority(TinyLife.World.Lot,System.Single,System.Int32)
    name: GetScalingVisitPriority
    href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetScalingVisitPriority_TinyLife_World_Lot_System_Single_System_Int32_
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_CanVisitRightNow_TinyLife_Objects_PersonLike_
  name: CanVisitRightNow(PersonLike)
  nameWithType: Lot.CanVisitRightNow(PersonLike)
  fullName: TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
  spec.csharp:
  - uid: TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
    name: CanVisitRightNow
    href: TinyLife.World.Lot.html#TinyLife_World_Lot_CanVisitRightNow_TinyLife_Objects_PersonLike_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
  spec.vb:
  - uid: TinyLife.World.Lot.CanVisitRightNow(TinyLife.Objects.PersonLike)
    name: CanVisitRightNow
    href: TinyLife.World.Lot.html#TinyLife_World_Lot_CanVisitRightNow_TinyLife_Objects_PersonLike_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
- uid: System.Func{TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Single}
  commentId: T:System.Func{TinyLife.World.Lot,TinyLife.Objects.PersonLike,System.Single}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<Lot, PersonLike, float>
  nameWithType: Func<Lot, PersonLike, float>
  fullName: System.Func<TinyLife.World.Lot, TinyLife.Objects.PersonLike, float>
  nameWithType.vb: Func(Of Lot, PersonLike, Single)
  fullName.vb: System.Func(Of TinyLife.World.Lot, TinyLife.Objects.PersonLike, Single)
  name.vb: Func(Of Lot, PersonLike, Single)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
    href: TinyLife.World.Lot.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  href: TinyLife.World.LotEmployment.html
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.World.LotType.Employments*
  commentId: Overload:TinyLife.World.LotType.Employments
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_Employments
  name: Employments
  nameWithType: LotType.Employments
  fullName: TinyLife.World.LotType.Employments
- uid: TinyLife.World.LotEmployment[]
  isExternal: true
  href: TinyLife.World.LotEmployment.html
  name: LotEmployment[]
  nameWithType: LotEmployment[]
  fullName: TinyLife.World.LotEmployment[]
  nameWithType.vb: LotEmployment()
  fullName.vb: TinyLife.World.LotEmployment()
  name.vb: LotEmployment()
  spec.csharp:
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    href: TinyLife.World.LotEmployment.html
  - name: (
  - name: )
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionInfo.html
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.World.LotType.Cafe
  commentId: F:TinyLife.World.LotType.Cafe
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_Cafe
  name: Cafe
  nameWithType: LotType.Cafe
  fullName: TinyLife.World.LotType.Cafe
- uid: TinyLife.World.LotType.CanExecuteAction*
  commentId: Overload:TinyLife.World.LotType.CanExecuteAction
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_CanExecuteAction
  name: CanExecuteAction
  nameWithType: LotType.CanExecuteAction
  fullName: TinyLife.World.LotType.CanExecuteAction
- uid: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<ActionType, ActionInfo, bool, CanExecuteResult>
  nameWithType: Func<ActionType, ActionInfo, bool, CanExecuteResult>
  fullName: System.Func<TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool, TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of ActionType, ActionInfo, Boolean, CanExecuteResult)
  fullName.vb: System.Func(Of TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean, TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of ActionType, ActionInfo, Boolean, CanExecuteResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    href: TinyLife.Actions.ActionInfo.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    href: TinyLife.Actions.CanExecuteResult.html
  - name: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.LotType.VisitHours*
  commentId: Overload:TinyLife.World.LotType.VisitHours
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_VisitHours
  name: VisitHours
  nameWithType: LotType.VisitHours
  fullName: TinyLife.World.LotType.VisitHours
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: (int Start, int End)
  nameWithType: (int Start, int End)
  fullName: (int Start, int End)
  nameWithType.vb: (Start As Integer, End As Integer)
  fullName.vb: (Start As Integer, End As Integer)
  name.vb: (Start As Integer, End As Integer)
  spec.csharp:
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Start
    name: Start
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.start
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.End
    name: End
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.end
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Int32,System.Int32}.Start
    name: Start
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.start
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.End
    name: End
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.end
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.World.LotType.ActionPriorityMultiplier*
  commentId: Overload:TinyLife.World.LotType.ActionPriorityMultiplier
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_ActionPriorityMultiplier
  name: ActionPriorityMultiplier
  nameWithType: LotType.ActionPriorityMultiplier
  fullName: TinyLife.World.LotType.ActionPriorityMultiplier
- uid: System.Func{TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,System.Single}
  commentId: T:System.Func{TinyLife.Objects.PersonLike,TinyLife.Actions.ActionType,System.Single}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<PersonLike, ActionType, float>
  nameWithType: Func<PersonLike, ActionType, float>
  fullName: System.Func<TinyLife.Objects.PersonLike, TinyLife.Actions.ActionType, float>
  nameWithType.vb: Func(Of PersonLike, ActionType, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.PersonLike, TinyLife.Actions.ActionType, Single)
  name.vb: Func(Of PersonLike, ActionType, Single)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.World.LotType.Icon
  commentId: F:TinyLife.World.LotType.Icon
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_Icon
  name: Icon
  nameWithType: LotType.Icon
  fullName: TinyLife.World.LotType.Icon
- uid: TinyLife.World.LotType.Name
  commentId: F:TinyLife.World.LotType.Name
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_Name
  name: Name
  nameWithType: LotType.Name
  fullName: TinyLife.World.LotType.Name
- uid: TinyLife.World.LotType.DisplayName*
  commentId: Overload:TinyLife.World.LotType.DisplayName
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_DisplayName
  name: DisplayName
  nameWithType: LotType.DisplayName
  fullName: TinyLife.World.LotType.DisplayName
- uid: TinyLife.World.LotType.#ctor*
  commentId: Overload:TinyLife.World.LotType.#ctor
  href: TinyLife.World.LotType.html#TinyLife_World_LotType__ctor_System_String_MLEM_Textures_TextureRegion_System_Boolean_System_Func_TinyLife_World_Lot_TinyLife_Objects_PersonLike_System_Single__System_ValueTuple_System_Predicate_TinyLife_Objects_Furniture__System_Int32_System_String____
  name: LotType
  nameWithType: LotType.LotType
  fullName: TinyLife.World.LotType.LotType
  nameWithType.vb: LotType.New
  fullName.vb: TinyLife.World.LotType.New
  name.vb: New
- uid: TinyLife.World.LotType.GetVisitPriority
  commentId: F:TinyLife.World.LotType.GetVisitPriority
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetVisitPriority
  name: GetVisitPriority
  nameWithType: LotType.GetVisitPriority
  fullName: TinyLife.World.LotType.GetVisitPriority
- uid: TinyLife.World.LotType.VisitHours
  commentId: P:TinyLife.World.LotType.VisitHours
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_VisitHours
  name: VisitHours
  nameWithType: LotType.VisitHours
  fullName: TinyLife.World.LotType.VisitHours
- uid: TinyLife.World.LotType.OnGetCurrentVisitPriority
  commentId: E:TinyLife.World.LotType.OnGetCurrentVisitPriority
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_OnGetCurrentVisitPriority
  name: OnGetCurrentVisitPriority
  nameWithType: LotType.OnGetCurrentVisitPriority
  fullName: TinyLife.World.LotType.OnGetCurrentVisitPriority
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Map.GetVisitPriority(TinyLife.Objects.PersonLike)
  commentId: M:TinyLife.World.Map.GetVisitPriority(TinyLife.Objects.PersonLike)
  href: TinyLife.World.Map.html#TinyLife_World_Map_GetVisitPriority_TinyLife_Objects_PersonLike_
  name: GetVisitPriority(PersonLike)
  nameWithType: Map.GetVisitPriority(PersonLike)
  fullName: TinyLife.World.Map.GetVisitPriority(TinyLife.Objects.PersonLike)
  spec.csharp:
  - uid: TinyLife.World.Map.GetVisitPriority(TinyLife.Objects.PersonLike)
    name: GetVisitPriority
    href: TinyLife.World.Map.html#TinyLife_World_Map_GetVisitPriority_TinyLife_Objects_PersonLike_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.GetVisitPriority(TinyLife.Objects.PersonLike)
    name: GetVisitPriority
    href: TinyLife.World.Map.html#TinyLife_World_Map_GetVisitPriority_TinyLife_Objects_PersonLike_
  - name: (
  - uid: TinyLife.Objects.PersonLike
    name: PersonLike
    href: TinyLife.Objects.PersonLike.html
  - name: )
- uid: TinyLife.World.Lot.Map
  commentId: P:TinyLife.World.Lot.Map
  href: TinyLife.World.Lot.html#TinyLife_World_Lot_Map
  name: Map
  nameWithType: Lot.Map
  fullName: TinyLife.World.Lot.Map
- uid: TinyLife.World.Map.Time
  commentId: P:TinyLife.World.Map.Time
  href: TinyLife.World.Map.html#TinyLife_World_Map_Time
  name: Time
  nameWithType: Map.Time
  fullName: TinyLife.World.Map.Time
- uid: TinyLife.World.LotType.GetCurrentVisitPriority*
  commentId: Overload:TinyLife.World.LotType.GetCurrentVisitPriority
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetCurrentVisitPriority_TinyLife_World_Lot_TinyLife_Objects_PersonLike_System_Nullable_System_TimeSpan__
  name: GetCurrentVisitPriority
  nameWithType: LotType.GetCurrentVisitPriority
  fullName: TinyLife.World.LotType.GetCurrentVisitPriority
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan?
  nameWithType: TimeSpan?
  fullName: System.TimeSpan?
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  spec.vb:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.LotType.Types
  commentId: F:TinyLife.World.LotType.Types
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_Types
  name: Types
  nameWithType: LotType.Types
  fullName: TinyLife.World.LotType.Types
- uid: TinyLife.World.LotType.Register*
  commentId: Overload:TinyLife.World.LotType.Register
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_Register_TinyLife_World_LotType_
  name: Register
  nameWithType: LotType.Register
  fullName: TinyLife.World.LotType.Register
- uid: TinyLife.World.LotType.GetScalingVisitPriority*
  commentId: Overload:TinyLife.World.LotType.GetScalingVisitPriority
  href: TinyLife.World.LotType.html#TinyLife_World_LotType_GetScalingVisitPriority_TinyLife_World_Lot_System_Single_System_Int32_
  name: GetScalingVisitPriority
  nameWithType: LotType.GetScalingVisitPriority
  fullName: TinyLife.World.LotType.GetScalingVisitPriority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
