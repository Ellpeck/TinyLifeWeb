### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  id: AbstractSpot
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.AbstractSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Maths.Direction2[])
  - TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  - TinyLife.Objects.AbstractSpot.DrawLayer
  - TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  - TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Maths.Direction2)
  - TinyLife.Objects.AbstractSpot.GetVisualDirection(MLEM.Maths.Direction2)
  - TinyLife.Objects.AbstractSpot.Group
  - TinyLife.Objects.AbstractSpot.IsOnGround
  - TinyLife.Objects.AbstractSpot.Offset
  - TinyLife.Objects.AbstractSpot.SortDrawLayers``1(``0[])
  - TinyLife.Objects.AbstractSpot.ValidDirections
  - TinyLife.Objects.AbstractSpot.VisualDirection
  - TinyLife.Objects.AbstractSpot.VisualOffset
  - TinyLife.Objects.AbstractSpot.YOffset
  langs:
  - csharp
  - vb
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: An <xref href="TinyLife.Objects.AbstractSpot" data-throw-if-not-resolved="false"></xref> is a base class for <xref href="TinyLife.Objects.ObjectSpot" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public abstract class AbstractSpot
    content.vb: Public MustInherit Class AbstractSpot
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.Objects.ActionSpot
  - TinyLife.Objects.ObjectSpot
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.AbstractSpot.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Objects.AbstractSpot.YOffset
  commentId: P:TinyLife.Objects.AbstractSpot.YOffset
  id: YOffset
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The offset on the visual y axis that the <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> slotted into this spot should render with
  example: []
  syntax:
    content: public float YOffset { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property YOffset As Single
  overload: TinyLife.Objects.AbstractSpot.YOffset*
- uid: TinyLife.Objects.AbstractSpot.Group
  commentId: P:TinyLife.Objects.AbstractSpot.Group
  id: Group
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: Group
  nameWithType: AbstractSpot.Group
  fullName: TinyLife.Objects.AbstractSpot.Group
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    The groups that this spot has, which is interpreted as a bit flag.

    Two action spots with overlapping groups ((g1 AND g2) != 0) cannot both be occupied by two different people.

    This is used by things lke <xref href="TinyLife.Objects.FurnitureType.ModernBed" data-throw-if-not-resolved="false"></xref> to stop people from sitting on a side there someone is already sleeping.

    By default, this is set to 0, meaning there is no group set.
  example: []
  syntax:
    content: public int Group { get; init; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Group As Integer
  overload: TinyLife.Objects.AbstractSpot.Group*
- uid: TinyLife.Objects.AbstractSpot.VisualDirection
  commentId: P:TinyLife.Objects.AbstractSpot.VisualDirection
  id: VisualDirection
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: VisualDirection
  nameWithType: AbstractSpot.VisualDirection
  fullName: TinyLife.Objects.AbstractSpot.VisualDirection
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    The visual direction that this action spot has.

    The visual direction is the direction used by a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> when occupying this action spot for actions like sitting.

    By default, this value is set to the first <xref href="TinyLife.Objects.AbstractSpot.ValidDirections" data-throw-if-not-resolved="false"></xref> entry in the constructor.
  example: []
  syntax:
    content: public Direction2 VisualDirection { get; init; }
    parameters: []
    return:
      type: MLEM.Maths.Direction2
    content.vb: Public Property VisualDirection As Direction2
  overload: TinyLife.Objects.AbstractSpot.VisualDirection*
- uid: TinyLife.Objects.AbstractSpot.DrawLayer
  commentId: F:TinyLife.Objects.AbstractSpot.DrawLayer
  id: DrawLayer
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: DrawLayer
  nameWithType: AbstractSpot.DrawLayer
  fullName: TinyLife.Objects.AbstractSpot.DrawLayer
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    The layer that a person slotted into this action spot using <xref href="TinyLife.Objects.PersonLike.OccupyActionSpot(TinyLife.Objects.Furniture%2cTinyLife.Objects.ActionSpot%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Maths.Direction2%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> is drawn on.

    By default, this is set to return 0, meaning it will be drawn on top of the first layer of this furniture.
  example: []
  syntax:
    content: public Func<Furniture, float> DrawLayer
    return:
      type: System.Func{TinyLife.Objects.Furniture,System.Single}
    content.vb: Public DrawLayer As Func(Of Furniture, Single)
- uid: TinyLife.Objects.AbstractSpot.IsOnGround
  commentId: P:TinyLife.Objects.AbstractSpot.IsOnGround
  id: IsOnGround
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: IsOnGround
  nameWithType: AbstractSpot.IsOnGround
  fullName: TinyLife.Objects.AbstractSpot.IsOnGround
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Returns whether this action spot is on the ground.

    This is a sort of heuristic that returns true when <xref href="TinyLife.Objects.AbstractSpot.YOffset" data-throw-if-not-resolved="false"></xref> is 0 and the <xref href="TinyLife.Objects.AbstractSpot.VisualOffset" data-throw-if-not-resolved="false"></xref> is the same as the <xref href="TinyLife.Objects.AbstractSpot.Offset" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsOnGround { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOnGround As Boolean
  overload: TinyLife.Objects.AbstractSpot.IsOnGround*
- uid: TinyLife.Objects.AbstractSpot.ValidDirections
  commentId: F:TinyLife.Objects.AbstractSpot.ValidDirections
  id: ValidDirections
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: ValidDirections
  nameWithType: AbstractSpot.ValidDirections
  fullName: TinyLife.Objects.AbstractSpot.ValidDirections
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    The <xref href="MLEM.Maths.Direction2" data-throw-if-not-resolved="false"></xref> values that this spot can be accessed from.

    These directions are relative to the owning <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref>'s <xref href="MLEM.Maths.Direction2.Up" data-throw-if-not-resolved="false"></xref> direction.
  example: []
  syntax:
    content: protected readonly Direction2[] ValidDirections
    return:
      type: MLEM.Maths.Direction2[]
    content.vb: Protected ReadOnly ValidDirections As Direction2()
- uid: TinyLife.Objects.AbstractSpot.Offset
  commentId: F:TinyLife.Objects.AbstractSpot.Offset
  id: Offset
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: AbstractSpot.Offset
  fullName: TinyLife.Objects.AbstractSpot.Offset
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: The offset on both the x and y axis that this spot has from the position of the <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> it belongs to
  example: []
  syntax:
    content: protected Vector2 Offset
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Protected Offset As Vector2
- uid: TinyLife.Objects.AbstractSpot.VisualOffset
  commentId: F:TinyLife.Objects.AbstractSpot.VisualOffset
  id: VisualOffset
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: VisualOffset
  nameWithType: AbstractSpot.VisualOffset
  fullName: TinyLife.Objects.AbstractSpot.VisualOffset
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    The visual offset on both the x and y axis that this spot has from the position of the <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> it belongs to.

    By default, this gets set to the same value as <xref href="TinyLife.Objects.AbstractSpot.Offset" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected Vector2 VisualOffset
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Protected VisualOffset As Vector2
- uid: TinyLife.Objects.AbstractSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Maths.Direction2[])
  commentId: M:TinyLife.Objects.AbstractSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Maths.Direction2[])
  id: '#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Maths.Direction2[])'
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: AbstractSpot(Vector2, Vector2, float, Direction2[])
  nameWithType: AbstractSpot.AbstractSpot(Vector2, Vector2, float, Direction2[])
  fullName: TinyLife.Objects.AbstractSpot.AbstractSpot(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, float, MLEM.Maths.Direction2[])
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Creates a new spot with the given data.

    This is called by <xref href="TinyLife.Objects.ObjectSpot" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected AbstractSpot(Vector2 offset, Vector2 visualOffset, float yOffset, Direction2[] validDirections)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Vector2
      description: The offset on both the x and y axis that this spot has
    - id: visualOffset
      type: Microsoft.Xna.Framework.Vector2
      description: The visual offset on both the x and y axis that this spot has
    - id: yOffset
      type: System.Single
      description: The offset on the visual y axis
    - id: validDirections
      type: MLEM.Maths.Direction2[]
      description: The directions that this spot can be accessed from
    content.vb: Protected Sub New(offset As Vector2, visualOffset As Vector2, yOffset As Single, validDirections As Direction2())
  overload: TinyLife.Objects.AbstractSpot.#ctor*
  nameWithType.vb: AbstractSpot.New(Vector2, Vector2, Single, Direction2())
  fullName.vb: TinyLife.Objects.AbstractSpot.New(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Single, MLEM.Maths.Direction2())
  name.vb: New(Vector2, Vector2, Single, Direction2())
- uid: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Maths.Direction2)
  commentId: M:TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Maths.Direction2)
  id: GetValidDirections(MLEM.Maths.Direction2)
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: GetValidDirections(Direction2)
  nameWithType: AbstractSpot.GetValidDirections(Direction2)
  fullName: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Maths.Direction2)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Returns the <xref href="TinyLife.Objects.AbstractSpot.ValidDirections" data-throw-if-not-resolved="false"></xref> of this spot, but rotated by the given parent <xref href="MLEM.Maths.Direction2" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IEnumerable<Direction2> GetValidDirections(Direction2 rotation)
    parameters:
    - id: rotation
      type: MLEM.Maths.Direction2
      description: The rotation of the object the spot is attached to.
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Maths.Direction2}
      description: The rotations that are valid for this spot
    content.vb: Public Function GetValidDirections(rotation As Direction2) As IEnumerable(Of Direction2)
  overload: TinyLife.Objects.AbstractSpot.GetValidDirections*
- uid: TinyLife.Objects.AbstractSpot.GetVisualDirection(MLEM.Maths.Direction2)
  commentId: M:TinyLife.Objects.AbstractSpot.GetVisualDirection(MLEM.Maths.Direction2)
  id: GetVisualDirection(MLEM.Maths.Direction2)
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: GetVisualDirection(Direction2)
  nameWithType: AbstractSpot.GetVisualDirection(Direction2)
  fullName: TinyLife.Objects.AbstractSpot.GetVisualDirection(MLEM.Maths.Direction2)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Returns the <xref href="TinyLife.Objects.AbstractSpot.VisualDirection" data-throw-if-not-resolved="false"></xref> that this action spot has, rotated by the given <code class="paramref">rotation</code>.

    The visual direction is the direction used by a <xref href="TinyLife.Objects.PersonLike" data-throw-if-not-resolved="false"></xref> when occupying this action spot for actions like sitting.
  example: []
  syntax:
    content: public Direction2 GetVisualDirection(Direction2 rotation)
    parameters:
    - id: rotation
      type: MLEM.Maths.Direction2
      description: The rotation of the containing furniture.
    return:
      type: MLEM.Maths.Direction2
      description: The visual direction for this spot.
    content.vb: Public Function GetVisualDirection(rotation As Direction2) As Direction2
  overload: TinyLife.Objects.AbstractSpot.GetVisualDirection*
- uid: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  commentId: M:TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  id: GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: GetLocation(Furniture, bool)
  nameWithType: AbstractSpot.GetLocation(Furniture, bool)
  fullName: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture, bool)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: Returns the location that this spot has in world space, based on the given <xref href="TinyLife.Objects.Furniture" data-throw-if-not-resolved="false"></xref> and its position and rotation.
  example: []
  syntax:
    content: public Vector2 GetLocation(Furniture furniture, bool visual)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture that this spot belongs to
    - id: visual
      type: System.Boolean
      description: Whetehr the <xref href="TinyLife.Objects.AbstractSpot.VisualOffset" data-throw-if-not-resolved="false"></xref> should be used instead of the <xref href="TinyLife.Objects.AbstractSpot.Offset" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: This spot's location in world space
    content.vb: Public Function GetLocation(furniture As Furniture, visual As Boolean) As Vector2
  overload: TinyLife.Objects.AbstractSpot.GetLocation*
  nameWithType.vb: AbstractSpot.GetLocation(Furniture, Boolean)
  fullName.vb: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture, Boolean)
  name.vb: GetLocation(Furniture, Boolean)
- uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  commentId: M:TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  id: DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: DoGroupsOverlap(AbstractSpot)
  nameWithType: AbstractSpot.DoGroupsOverlap(AbstractSpot)
  fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    Returns whether the passed <xref href="TinyLife.Objects.AbstractSpot" data-throw-if-not-resolved="false"></xref>'s <xref href="TinyLife.Objects.AbstractSpot.Group" data-throw-if-not-resolved="false"></xref> and this spot's Group overlap.

    Two overlapping groups are groups for which (g1 AND g2) != 0.
  example: []
  syntax:
    content: public bool DoGroupsOverlap(AbstractSpot other)
    parameters:
    - id: other
      type: TinyLife.Objects.AbstractSpot
      description: The action spot whose groups to compare
    return:
      type: System.Boolean
      description: Whether at least one group overlaps
    content.vb: Public Function DoGroupsOverlap(other As AbstractSpot) As Boolean
  overload: TinyLife.Objects.AbstractSpot.DoGroupsOverlap*
- uid: TinyLife.Objects.AbstractSpot.SortDrawLayers``1(``0[])
  commentId: M:TinyLife.Objects.AbstractSpot.SortDrawLayers``1(``0[])
  id: SortDrawLayers``1(``0[])
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: SortDrawLayers<T>(T[])
  nameWithType: AbstractSpot.SortDrawLayers<T>(T[])
  fullName: TinyLife.Objects.AbstractSpot.SortDrawLayers<T>(T[])
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.Objects
  summary: >-
    A helper method that sorts the given <xref href="TinyLife.Objects.AbstractSpot" data-throw-if-not-resolved="false"></xref> instances by depth when drawing by modifying their <xref href="TinyLife.Objects.AbstractSpot.DrawLayer" data-throw-if-not-resolved="false"></xref>.

    This method can be used for more complex objects like wide desks, that have smaller and bigger objects visually overlappying, to mitigate z-fighting.
  example: []
  syntax:
    content: 'public static T[] SortDrawLayers<T>(T[] spots) where T : AbstractSpot'
    parameters:
    - id: spots
      type: '{T}[]'
      description: The spots to sort.
    typeParameters:
    - id: T
      description: The type of spot.
    return:
      type: '{T}[]'
      description: The same <code class="paramref">spots</code>, for chaining.
    content.vb: Public Shared Function SortDrawLayers(Of T As AbstractSpot)(spots As T()) As T()
  overload: TinyLife.Objects.AbstractSpot.SortDrawLayers*
  nameWithType.vb: AbstractSpot.SortDrawLayers(Of T)(T())
  fullName.vb: TinyLife.Objects.AbstractSpot.SortDrawLayers(Of T)(T())
  name.vb: SortDrawLayers(Of T)(T())
references:
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  href: TinyLife.Objects.AbstractSpot.html
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectSpot.html
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  href: TinyLife.Objects.ActionSpot.html
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Objects.AbstractSpot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<AbstractSpot>(AbstractSpot)
  nameWithType: Extensions.JsonCopy<AbstractSpot>(AbstractSpot)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.AbstractSpot>(TinyLife.Objects.AbstractSpot)
  nameWithType.vb: Extensions.JsonCopy(Of AbstractSpot)(AbstractSpot)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.AbstractSpot)(TinyLife.Objects.AbstractSpot)
  name.vb: JsonCopy(Of AbstractSpot)(AbstractSpot)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.AbstractSpot)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    href: TinyLife.Objects.AbstractSpot.html
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    href: TinyLife.Objects.AbstractSpot.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.AbstractSpot)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    href: TinyLife.Objects.AbstractSpot.html
  - name: )
  - name: (
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    href: TinyLife.Objects.AbstractSpot.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  href: TinyLife.Objects.Furniture.html
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.PersonLike
  commentId: T:TinyLife.Objects.PersonLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.PersonLike.html
  name: PersonLike
  nameWithType: PersonLike
  fullName: TinyLife.Objects.PersonLike
- uid: TinyLife.Objects.AbstractSpot.YOffset*
  commentId: Overload:TinyLife.Objects.AbstractSpot.YOffset
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_YOffset
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.FurnitureType.ModernBed
  commentId: F:TinyLife.Objects.FurnitureType.ModernBed
  href: TinyLife.Objects.FurnitureType.html#TinyLife_Objects_FurnitureType_ModernBed
  name: ModernBed
  nameWithType: FurnitureType.ModernBed
  fullName: TinyLife.Objects.FurnitureType.ModernBed
- uid: TinyLife.Objects.AbstractSpot.Group*
  commentId: Overload:TinyLife.Objects.AbstractSpot.Group
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_Group
  name: Group
  nameWithType: AbstractSpot.Group
  fullName: TinyLife.Objects.AbstractSpot.Group
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Objects.AbstractSpot.ValidDirections
  commentId: F:TinyLife.Objects.AbstractSpot.ValidDirections
  parent: TinyLife.Objects.AbstractSpot
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_ValidDirections
  name: ValidDirections
  nameWithType: AbstractSpot.ValidDirections
  fullName: TinyLife.Objects.AbstractSpot.ValidDirections
- uid: TinyLife.Objects.AbstractSpot.VisualDirection*
  commentId: Overload:TinyLife.Objects.AbstractSpot.VisualDirection
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_VisualDirection
  name: VisualDirection
  nameWithType: AbstractSpot.VisualDirection
  fullName: TinyLife.Objects.AbstractSpot.VisualDirection
- uid: MLEM.Maths.Direction2
  commentId: T:MLEM.Maths.Direction2
  parent: MLEM.Maths
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Maths.Direction2
- uid: MLEM.Maths
  commentId: N:MLEM.Maths
  isExternal: true
  name: MLEM.Maths
  nameWithType: MLEM.Maths
  fullName: MLEM.Maths
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
- uid: TinyLife.Objects.PersonLike.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Maths.Direction2},System.Boolean)
  commentId: M:TinyLife.Objects.PersonLike.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Maths.Direction2},System.Boolean)
  parent: TinyLife.Objects.PersonLike
  isExternal: true
  href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_OccupyActionSpot_TinyLife_Objects_Furniture_TinyLife_Objects_ActionSpot_System_Boolean_System_Nullable_MLEM_Maths_Direction2__System_Boolean_
  name: OccupyActionSpot(Furniture, ActionSpot, bool, Direction2?, bool)
  nameWithType: PersonLike.OccupyActionSpot(Furniture, ActionSpot, bool, Direction2?, bool)
  fullName: TinyLife.Objects.PersonLike.OccupyActionSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, bool, MLEM.Maths.Direction2?, bool)
  nameWithType.vb: PersonLike.OccupyActionSpot(Furniture, ActionSpot, Boolean, Direction2?, Boolean)
  fullName.vb: TinyLife.Objects.PersonLike.OccupyActionSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, Boolean, MLEM.Maths.Direction2?, Boolean)
  name.vb: OccupyActionSpot(Furniture, ActionSpot, Boolean, Direction2?, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.PersonLike.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Maths.Direction2},System.Boolean)
    name: OccupyActionSpot
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_OccupyActionSpot_TinyLife_Objects_Furniture_TinyLife_Objects_ActionSpot_System_Boolean_System_Nullable_MLEM_Maths_Direction2__System_Boolean_
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.PersonLike.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Maths.Direction2},System.Boolean)
    name: OccupyActionSpot
    href: TinyLife.Objects.PersonLike.html#TinyLife_Objects_PersonLike_OccupyActionSpot_TinyLife_Objects_Furniture_TinyLife_Objects_ActionSpot_System_Boolean_System_Nullable_MLEM_Maths_Direction2__System_Boolean_
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    href: TinyLife.Objects.ActionSpot.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func{TinyLife.Objects.Furniture,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Furniture,System.Single}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Furniture, float>
  nameWithType: Func<Furniture, float>
  fullName: System.Func<TinyLife.Objects.Furniture, float>
  nameWithType.vb: Func(Of Furniture, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Furniture, Single)
  name.vb: Func(Of Furniture, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    href: TinyLife.Objects.Furniture.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Objects.AbstractSpot.YOffset
  commentId: P:TinyLife.Objects.AbstractSpot.YOffset
  parent: TinyLife.Objects.AbstractSpot
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_YOffset
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
- uid: TinyLife.Objects.AbstractSpot.VisualOffset
  commentId: F:TinyLife.Objects.AbstractSpot.VisualOffset
  parent: TinyLife.Objects.AbstractSpot
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_VisualOffset
  name: VisualOffset
  nameWithType: AbstractSpot.VisualOffset
  fullName: TinyLife.Objects.AbstractSpot.VisualOffset
- uid: TinyLife.Objects.AbstractSpot.Offset
  commentId: F:TinyLife.Objects.AbstractSpot.Offset
  parent: TinyLife.Objects.AbstractSpot
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_Offset
  name: Offset
  nameWithType: AbstractSpot.Offset
  fullName: TinyLife.Objects.AbstractSpot.Offset
- uid: TinyLife.Objects.AbstractSpot.IsOnGround*
  commentId: Overload:TinyLife.Objects.AbstractSpot.IsOnGround
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_IsOnGround
  name: IsOnGround
  nameWithType: AbstractSpot.IsOnGround
  fullName: TinyLife.Objects.AbstractSpot.IsOnGround
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MLEM.Maths.Direction2.Up
  commentId: F:MLEM.Maths.Direction2.Up
  isExternal: true
  name: Up
  nameWithType: Direction2.Up
  fullName: MLEM.Maths.Direction2.Up
- uid: MLEM.Maths.Direction2[]
  isExternal: true
  name: Direction2[]
  nameWithType: Direction2[]
  fullName: MLEM.Maths.Direction2[]
  nameWithType.vb: Direction2()
  fullName.vb: MLEM.Maths.Direction2()
  name.vb: Direction2()
  spec.csharp:
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: (
  - name: )
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Objects.AbstractSpot.#ctor*
  commentId: Overload:TinyLife.Objects.AbstractSpot.#ctor
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot__ctor_Microsoft_Xna_Framework_Vector2_Microsoft_Xna_Framework_Vector2_System_Single_MLEM_Maths_Direction2___
  name: AbstractSpot
  nameWithType: AbstractSpot.AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot.AbstractSpot
  nameWithType.vb: AbstractSpot.New
  fullName.vb: TinyLife.Objects.AbstractSpot.New
  name.vb: New
- uid: TinyLife.Objects.AbstractSpot.GetValidDirections*
  commentId: Overload:TinyLife.Objects.AbstractSpot.GetValidDirections
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_GetValidDirections_MLEM_Maths_Direction2_
  name: GetValidDirections
  nameWithType: AbstractSpot.GetValidDirections
  fullName: TinyLife.Objects.AbstractSpot.GetValidDirections
- uid: System.Collections.Generic.IEnumerable{MLEM.Maths.Direction2}
  commentId: T:System.Collections.Generic.IEnumerable{MLEM.Maths.Direction2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Direction2>
  nameWithType: IEnumerable<Direction2>
  fullName: System.Collections.Generic.IEnumerable<MLEM.Maths.Direction2>
  nameWithType.vb: IEnumerable(Of Direction2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MLEM.Maths.Direction2)
  name.vb: IEnumerable(Of Direction2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Objects.AbstractSpot.VisualDirection
  commentId: P:TinyLife.Objects.AbstractSpot.VisualDirection
  parent: TinyLife.Objects.AbstractSpot
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_VisualDirection
  name: VisualDirection
  nameWithType: AbstractSpot.VisualDirection
  fullName: TinyLife.Objects.AbstractSpot.VisualDirection
- uid: TinyLife.Objects.AbstractSpot.GetVisualDirection*
  commentId: Overload:TinyLife.Objects.AbstractSpot.GetVisualDirection
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_GetVisualDirection_MLEM_Maths_Direction2_
  name: GetVisualDirection
  nameWithType: AbstractSpot.GetVisualDirection
  fullName: TinyLife.Objects.AbstractSpot.GetVisualDirection
- uid: TinyLife.Objects.AbstractSpot.GetLocation*
  commentId: Overload:TinyLife.Objects.AbstractSpot.GetLocation
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_GetLocation_TinyLife_Objects_Furniture_System_Boolean_
  name: GetLocation
  nameWithType: AbstractSpot.GetLocation
  fullName: TinyLife.Objects.AbstractSpot.GetLocation
- uid: TinyLife.Objects.AbstractSpot.Group
  commentId: P:TinyLife.Objects.AbstractSpot.Group
  parent: TinyLife.Objects.AbstractSpot
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_Group
  name: Group
  nameWithType: AbstractSpot.Group
  fullName: TinyLife.Objects.AbstractSpot.Group
- uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap*
  commentId: Overload:TinyLife.Objects.AbstractSpot.DoGroupsOverlap
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_DoGroupsOverlap_TinyLife_Objects_AbstractSpot_
  name: DoGroupsOverlap
  nameWithType: AbstractSpot.DoGroupsOverlap
  fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap
- uid: TinyLife.Objects.AbstractSpot.DrawLayer
  commentId: F:TinyLife.Objects.AbstractSpot.DrawLayer
  parent: TinyLife.Objects.AbstractSpot
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_DrawLayer
  name: DrawLayer
  nameWithType: AbstractSpot.DrawLayer
  fullName: TinyLife.Objects.AbstractSpot.DrawLayer
- uid: TinyLife.Objects.AbstractSpot.SortDrawLayers*
  commentId: Overload:TinyLife.Objects.AbstractSpot.SortDrawLayers
  href: TinyLife.Objects.AbstractSpot.html#TinyLife_Objects_AbstractSpot_SortDrawLayers__1___0___
  name: SortDrawLayers
  nameWithType: AbstractSpot.SortDrawLayers
  fullName: TinyLife.Objects.AbstractSpot.SortDrawLayers
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
