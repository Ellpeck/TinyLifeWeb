### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  id: Tile
  parent: TinyLife.World
  children:
  - TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},System.Collections.Generic.Dictionary{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},TinyLife.Utilities.ColorSettings,System.Int32[],System.Boolean,System.Single,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{Microsoft.Xna.Framework.Point,System.Single})
  - TinyLife.World.Tile.BaseName
  - TinyLife.World.Tile.BigTiles
  - TinyLife.World.Tile.CanBuy
  - TinyLife.World.Tile.Categories
  - TinyLife.World.Tile.CheckeredHardwood
  - TinyLife.World.Tile.ColorSettings
  - TinyLife.World.Tile.Colors
  - TinyLife.World.Tile.Concrete
  - TinyLife.World.Tile.Dirt
  - TinyLife.World.Tile.DirtPath
  - TinyLife.World.Tile.DirtRoad
  - TinyLife.World.Tile.DirtRoadLines1
  - TinyLife.World.Tile.DirtRoadLines2
  - TinyLife.World.Tile.DirtWithGrass
  - TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime,System.Object,TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile})
  - TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  - TinyLife.World.Tile.FlowerGrass
  - TinyLife.World.Tile.GetAutoTileBorder(TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,TinyLife.World.Tile,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile})
  - TinyLife.World.Tile.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)
  - TinyLife.World.Tile.GetPrice
  - TinyLife.World.Tile.GetVariationTexture(MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point)
  - TinyLife.World.Tile.GetVisualOffset(MLEM.Maths.Direction2,System.Int32,System.Int32)
  - TinyLife.World.Tile.Grass
  - TinyLife.World.Tile.Icon
  - TinyLife.World.Tile.IntricateCarpet
  - TinyLife.World.Tile.LargeConcreteTiles
  - TinyLife.World.Tile.LongBoards
  - TinyLife.World.Tile.ModernBricks
  - TinyLife.World.Tile.ModernTiles
  - TinyLife.World.Tile.Name
  - TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Tile.OrnateHardwood
  - TinyLife.World.Tile.PathCostModifier
  - TinyLife.World.Tile.Price
  - TinyLife.World.Tile.PuzzlePieces
  - TinyLife.World.Tile.ReferencePrice
  - TinyLife.World.Tile.RegionWeights
  - TinyLife.World.Tile.Regions
  - TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  - TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Int32[],System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  - TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},System.Int32[],System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  - TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorSettings,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  - TinyLife.World.Tile.RicketyHardwood
  - TinyLife.World.Tile.Road1
  - TinyLife.World.Tile.Road2
  - TinyLife.World.Tile.Road3
  - TinyLife.World.Tile.Road4
  - TinyLife.World.Tile.Road5
  - TinyLife.World.Tile.Rocks
  - TinyLife.World.Tile.Sand
  - TinyLife.World.Tile.SimpleCarpet
  - TinyLife.World.Tile.SmallCheckeredHardwood
  - TinyLife.World.Tile.SoftCarpet
  - TinyLife.World.Tile.StraightBoards
  - TinyLife.World.Tile.Textures
  - TinyLife.World.Tile.Tiles
  - TinyLife.World.Tile.Water
  langs:
  - csharp
  - vb
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
  type: Class
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    A tile is an object on a <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref> that represents the covering of the ground (or the ground itself).

    To register a tile, use <xref href="TinyLife.World.Tile.Register(System.String%2cSystem.Int32%2cSystem.Collections.Generic.Dictionary%7bMicrosoft.Xna.Framework.Point%2cMLEM.Textures.TextureRegion%7d%2cMicrosoft.Xna.Framework.Point%2cTinyLife.Utilities.ColorScheme%2cSystem.Single%2cSystem.Boolean%2cTinyLife.World.Tile.Category%2cMLEM.Textures.TextureRegion%2cSystem.Func%7bMLEM.Maths.Direction2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Point%7d%7d%2cSystem.Nullable%7bSystem.Int32%7d%2cSystem.Func%7bMicrosoft.Xna.Framework.Point%2cSystem.Single%7d%2cSystem.Type)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(Tile.Converter))]

      public class Tile
    content.vb: >-
      <JsonConverter(GetType(Tile.Converter))>

      Public Class Tile
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.World.AutoTile
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Tile.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.Tile.Tiles
  commentId: F:TinyLife.World.Tile.Tiles
  id: Tiles
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Tiles
  nameWithType: Tile.Tiles
  fullName: TinyLife.World.Tile.Tiles
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: A registry of all tiles that exist in the game and its mods
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, Tile[]> Tiles
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.Tile[]}
    content.vb: Public Shared ReadOnly Tiles As ReadOnlyDictionary(Of String, Tile())
- uid: TinyLife.World.Tile.ReferencePrice
  commentId: F:TinyLife.World.Tile.ReferencePrice
  id: ReferencePrice
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: ReferencePrice
  nameWithType: Tile.ReferencePrice
  fullName: TinyLife.World.Tile.ReferencePrice
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    The reference price for tiles.

    Since Grass is replaced by Concrete in a newly created room, the two tiles have to cost the same. This is that price.

    This value is set to 5.
  example: []
  syntax:
    content: public const int ReferencePrice = 5
    return:
      type: System.Int32
    content.vb: Public Const ReferencePrice As Integer = 5
- uid: TinyLife.World.Tile.Grass
  commentId: F:TinyLife.World.Tile.Grass
  id: Grass
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Grass
  nameWithType: Tile.Grass
  fullName: TinyLife.World.Tile.Grass
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Grass
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Grass As Tile()
- uid: TinyLife.World.Tile.FlowerGrass
  commentId: F:TinyLife.World.Tile.FlowerGrass
  id: FlowerGrass
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: FlowerGrass
  nameWithType: Tile.FlowerGrass
  fullName: TinyLife.World.Tile.FlowerGrass
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] FlowerGrass
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly FlowerGrass As Tile()
- uid: TinyLife.World.Tile.Concrete
  commentId: F:TinyLife.World.Tile.Concrete
  id: Concrete
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Concrete
  nameWithType: Tile.Concrete
  fullName: TinyLife.World.Tile.Concrete
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Concrete
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Concrete As Tile()
- uid: TinyLife.World.Tile.LongBoards
  commentId: F:TinyLife.World.Tile.LongBoards
  id: LongBoards
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: LongBoards
  nameWithType: Tile.LongBoards
  fullName: TinyLife.World.Tile.LongBoards
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] LongBoards
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly LongBoards As Tile()
- uid: TinyLife.World.Tile.ModernBricks
  commentId: F:TinyLife.World.Tile.ModernBricks
  id: ModernBricks
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: ModernBricks
  nameWithType: Tile.ModernBricks
  fullName: TinyLife.World.Tile.ModernBricks
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] ModernBricks
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly ModernBricks As Tile()
- uid: TinyLife.World.Tile.BigTiles
  commentId: F:TinyLife.World.Tile.BigTiles
  id: BigTiles
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: BigTiles
  nameWithType: Tile.BigTiles
  fullName: TinyLife.World.Tile.BigTiles
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] BigTiles
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly BigTiles As Tile()
- uid: TinyLife.World.Tile.Dirt
  commentId: F:TinyLife.World.Tile.Dirt
  id: Dirt
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Dirt
  nameWithType: Tile.Dirt
  fullName: TinyLife.World.Tile.Dirt
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Dirt
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Dirt As Tile()
- uid: TinyLife.World.Tile.DirtPath
  commentId: F:TinyLife.World.Tile.DirtPath
  id: DirtPath
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DirtPath
  nameWithType: Tile.DirtPath
  fullName: TinyLife.World.Tile.DirtPath
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] DirtPath
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly DirtPath As Tile()
- uid: TinyLife.World.Tile.SimpleCarpet
  commentId: F:TinyLife.World.Tile.SimpleCarpet
  id: SimpleCarpet
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: SimpleCarpet
  nameWithType: Tile.SimpleCarpet
  fullName: TinyLife.World.Tile.SimpleCarpet
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] SimpleCarpet
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly SimpleCarpet As Tile()
- uid: TinyLife.World.Tile.PuzzlePieces
  commentId: F:TinyLife.World.Tile.PuzzlePieces
  id: PuzzlePieces
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: PuzzlePieces
  nameWithType: Tile.PuzzlePieces
  fullName: TinyLife.World.Tile.PuzzlePieces
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] PuzzlePieces
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly PuzzlePieces As Tile()
- uid: TinyLife.World.Tile.Rocks
  commentId: F:TinyLife.World.Tile.Rocks
  id: Rocks
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Rocks
  nameWithType: Tile.Rocks
  fullName: TinyLife.World.Tile.Rocks
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Rocks
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Rocks As Tile()
- uid: TinyLife.World.Tile.DirtWithGrass
  commentId: F:TinyLife.World.Tile.DirtWithGrass
  id: DirtWithGrass
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DirtWithGrass
  nameWithType: Tile.DirtWithGrass
  fullName: TinyLife.World.Tile.DirtWithGrass
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] DirtWithGrass
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly DirtWithGrass As Tile()
- uid: TinyLife.World.Tile.Water
  commentId: F:TinyLife.World.Tile.Water
  id: Water
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Water
  nameWithType: Tile.Water
  fullName: TinyLife.World.Tile.Water
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Water
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Water As Tile()
- uid: TinyLife.World.Tile.LargeConcreteTiles
  commentId: F:TinyLife.World.Tile.LargeConcreteTiles
  id: LargeConcreteTiles
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: LargeConcreteTiles
  nameWithType: Tile.LargeConcreteTiles
  fullName: TinyLife.World.Tile.LargeConcreteTiles
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] LargeConcreteTiles
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly LargeConcreteTiles As Tile()
- uid: TinyLife.World.Tile.Sand
  commentId: F:TinyLife.World.Tile.Sand
  id: Sand
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Sand
  nameWithType: Tile.Sand
  fullName: TinyLife.World.Tile.Sand
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Sand
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Sand As Tile()
- uid: TinyLife.World.Tile.IntricateCarpet
  commentId: F:TinyLife.World.Tile.IntricateCarpet
  id: IntricateCarpet
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: IntricateCarpet
  nameWithType: Tile.IntricateCarpet
  fullName: TinyLife.World.Tile.IntricateCarpet
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] IntricateCarpet
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly IntricateCarpet As Tile()
- uid: TinyLife.World.Tile.ModernTiles
  commentId: F:TinyLife.World.Tile.ModernTiles
  id: ModernTiles
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: ModernTiles
  nameWithType: Tile.ModernTiles
  fullName: TinyLife.World.Tile.ModernTiles
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] ModernTiles
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly ModernTiles As Tile()
- uid: TinyLife.World.Tile.StraightBoards
  commentId: F:TinyLife.World.Tile.StraightBoards
  id: StraightBoards
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: StraightBoards
  nameWithType: Tile.StraightBoards
  fullName: TinyLife.World.Tile.StraightBoards
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] StraightBoards
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly StraightBoards As Tile()
- uid: TinyLife.World.Tile.OrnateHardwood
  commentId: F:TinyLife.World.Tile.OrnateHardwood
  id: OrnateHardwood
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: OrnateHardwood
  nameWithType: Tile.OrnateHardwood
  fullName: TinyLife.World.Tile.OrnateHardwood
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] OrnateHardwood
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly OrnateHardwood As Tile()
- uid: TinyLife.World.Tile.RicketyHardwood
  commentId: F:TinyLife.World.Tile.RicketyHardwood
  id: RicketyHardwood
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: RicketyHardwood
  nameWithType: Tile.RicketyHardwood
  fullName: TinyLife.World.Tile.RicketyHardwood
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] RicketyHardwood
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly RicketyHardwood As Tile()
- uid: TinyLife.World.Tile.CheckeredHardwood
  commentId: F:TinyLife.World.Tile.CheckeredHardwood
  id: CheckeredHardwood
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: CheckeredHardwood
  nameWithType: Tile.CheckeredHardwood
  fullName: TinyLife.World.Tile.CheckeredHardwood
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] CheckeredHardwood
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly CheckeredHardwood As Tile()
- uid: TinyLife.World.Tile.SmallCheckeredHardwood
  commentId: F:TinyLife.World.Tile.SmallCheckeredHardwood
  id: SmallCheckeredHardwood
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: SmallCheckeredHardwood
  nameWithType: Tile.SmallCheckeredHardwood
  fullName: TinyLife.World.Tile.SmallCheckeredHardwood
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] SmallCheckeredHardwood
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly SmallCheckeredHardwood As Tile()
- uid: TinyLife.World.Tile.SoftCarpet
  commentId: F:TinyLife.World.Tile.SoftCarpet
  id: SoftCarpet
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: SoftCarpet
  nameWithType: Tile.SoftCarpet
  fullName: TinyLife.World.Tile.SoftCarpet
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] SoftCarpet
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly SoftCarpet As Tile()
- uid: TinyLife.World.Tile.Road1
  commentId: F:TinyLife.World.Tile.Road1
  id: Road1
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Road1
  nameWithType: Tile.Road1
  fullName: TinyLife.World.Tile.Road1
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Road1
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Road1 As Tile()
- uid: TinyLife.World.Tile.Road2
  commentId: F:TinyLife.World.Tile.Road2
  id: Road2
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Road2
  nameWithType: Tile.Road2
  fullName: TinyLife.World.Tile.Road2
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Road2
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Road2 As Tile()
- uid: TinyLife.World.Tile.Road3
  commentId: F:TinyLife.World.Tile.Road3
  id: Road3
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Road3
  nameWithType: Tile.Road3
  fullName: TinyLife.World.Tile.Road3
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Road3
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Road3 As Tile()
- uid: TinyLife.World.Tile.Road4
  commentId: F:TinyLife.World.Tile.Road4
  id: Road4
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Road4
  nameWithType: Tile.Road4
  fullName: TinyLife.World.Tile.Road4
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Road4
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Road4 As Tile()
- uid: TinyLife.World.Tile.Road5
  commentId: F:TinyLife.World.Tile.Road5
  id: Road5
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Road5
  nameWithType: Tile.Road5
  fullName: TinyLife.World.Tile.Road5
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] Road5
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly Road5 As Tile()
- uid: TinyLife.World.Tile.DirtRoad
  commentId: F:TinyLife.World.Tile.DirtRoad
  id: DirtRoad
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DirtRoad
  nameWithType: Tile.DirtRoad
  fullName: TinyLife.World.Tile.DirtRoad
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] DirtRoad
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly DirtRoad As Tile()
- uid: TinyLife.World.Tile.DirtRoadLines1
  commentId: F:TinyLife.World.Tile.DirtRoadLines1
  id: DirtRoadLines1
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DirtRoadLines1
  nameWithType: Tile.DirtRoadLines1
  fullName: TinyLife.World.Tile.DirtRoadLines1
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] DirtRoadLines1
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly DirtRoadLines1 As Tile()
- uid: TinyLife.World.Tile.DirtRoadLines2
  commentId: F:TinyLife.World.Tile.DirtRoadLines2
  id: DirtRoadLines2
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DirtRoadLines2
  nameWithType: Tile.DirtRoadLines2
  fullName: TinyLife.World.Tile.DirtRoadLines2
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly Tile[] DirtRoadLines2
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared ReadOnly DirtRoadLines2 As Tile()
- uid: TinyLife.World.Tile.BaseName
  commentId: F:TinyLife.World.Tile.BaseName
  id: BaseName
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: BaseName
  nameWithType: Tile.BaseName
  fullName: TinyLife.World.Tile.BaseName
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The name of this type of tile. Whereas <xref href="TinyLife.World.Tile.Name" data-throw-if-not-resolved="false"></xref> has the index of its <xref href="TinyLife.World.Tile.Colors" data-throw-if-not-resolved="false"></xref> appended to it, this one is just the type's name.
  example: []
  syntax:
    content: public readonly string BaseName
    return:
      type: System.String
    content.vb: Public ReadOnly BaseName As String
- uid: TinyLife.World.Tile.Name
  commentId: F:TinyLife.World.Tile.Name
  id: Name
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Tile.Name
  fullName: TinyLife.World.Tile.Name
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The name of this specific tile. This is comprised of the <xref href="TinyLife.World.Tile.BaseName" data-throw-if-not-resolved="false"></xref> with the <xref href="TinyLife.World.Tile.Colors" data-throw-if-not-resolved="false"></xref>'s index attached to it.
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
- uid: TinyLife.World.Tile.Price
  commentId: F:TinyLife.World.Tile.Price
  id: Price
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: Tile.Price
  fullName: TinyLife.World.Tile.Price
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The price of this tile
  example: []
  syntax:
    content: public readonly int Price
    return:
      type: System.Int32
    content.vb: Public ReadOnly Price As Integer
- uid: TinyLife.World.Tile.ColorSettings
  commentId: F:TinyLife.World.Tile.ColorSettings
  id: ColorSettings
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: ColorSettings
  nameWithType: Tile.ColorSettings
  fullName: TinyLife.World.Tile.ColorSettings
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The color settings used by this tile.
  example: []
  syntax:
    content: public readonly ColorSettings ColorSettings
    return:
      type: TinyLife.Utilities.ColorSettings
    content.vb: Public ReadOnly ColorSettings As ColorSettings
- uid: TinyLife.World.Tile.Colors
  commentId: F:TinyLife.World.Tile.Colors
  id: Colors
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Tile.Colors
  fullName: TinyLife.World.Tile.Colors
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The indices of the colors in each <xref href="TinyLife.World.Tile.ColorSettings" data-throw-if-not-resolved="false"></xref> entry that this tile has
  example: []
  syntax:
    content: public readonly int[] Colors
    return:
      type: System.Int32[]
    content.vb: Public ReadOnly Colors As Integer()
- uid: TinyLife.World.Tile.CanBuy
  commentId: F:TinyLife.World.Tile.CanBuy
  id: CanBuy
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: CanBuy
  nameWithType: Tile.CanBuy
  fullName: TinyLife.World.Tile.CanBuy
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: A field that indicates whether this tile can be bought without the "ShowNonBuyable" cheat enabled
  example: []
  syntax:
    content: public readonly bool CanBuy
    return:
      type: System.Boolean
    content.vb: Public ReadOnly CanBuy As Boolean
- uid: TinyLife.World.Tile.PathCostModifier
  commentId: F:TinyLife.World.Tile.PathCostModifier
  id: PathCostModifier
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: PathCostModifier
  nameWithType: Tile.PathCostModifier
  fullName: TinyLife.World.Tile.PathCostModifier
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    A field that indicates the "cost" for pathfinding of this tile.

    The default modifier is 1, and it should not be set to a value lower than that.
  example: []
  syntax:
    content: public readonly float PathCostModifier
    return:
      type: System.Single
    content.vb: Public ReadOnly PathCostModifier As Single
- uid: TinyLife.World.Tile.Categories
  commentId: F:TinyLife.World.Tile.Categories
  id: Categories
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Categories
  nameWithType: Tile.Categories
  fullName: TinyLife.World.Tile.Categories
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The <xref href="TinyLife.World.Tile.Category" data-throw-if-not-resolved="false"></xref> flags that this tile has.
  example: []
  syntax:
    content: public readonly Tile.Category Categories
    return:
      type: TinyLife.World.Tile.Category
    content.vb: Public ReadOnly Categories As Tile.Category
- uid: TinyLife.World.Tile.Icon
  commentId: F:TinyLife.World.Tile.Icon
  id: Icon
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: Tile.Icon
  fullName: TinyLife.World.Tile.Icon
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    The build mode icon for this object, which represents the category / theme / mod that it comes from.

    If this value is nonnull, the icon will be displayed in the corner of the build mode button for this object.
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
- uid: TinyLife.World.Tile.Textures
  commentId: F:TinyLife.World.Tile.Textures
  id: Textures
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Textures
  nameWithType: Tile.Textures
  fullName: TinyLife.World.Tile.Textures
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The texture atlas used for this tile.
  example: []
  syntax:
    content: public readonly Dictionary<Point, TextureRegion> Textures
    return:
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
    content.vb: Public ReadOnly Textures As Dictionary(Of Point, TextureRegion)
- uid: TinyLife.World.Tile.Regions
  commentId: F:TinyLife.World.Tile.Regions
  id: Regions
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Regions
  nameWithType: Tile.Regions
  fullName: TinyLife.World.Tile.Regions
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: The texture regions this tile uses, which refer to entries in <xref href="TinyLife.World.Tile.Textures" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly Dictionary<Direction2, Point[]> Regions
    return:
      type: System.Collections.Generic.Dictionary{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]}
    content.vb: Public ReadOnly Regions As Dictionary(Of Direction2, Point())
- uid: TinyLife.World.Tile.RegionWeights
  commentId: F:TinyLife.World.Tile.RegionWeights
  id: RegionWeights
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: RegionWeights
  nameWithType: Tile.RegionWeights
  fullName: TinyLife.World.Tile.RegionWeights
  type: Field
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: An optional weight function that determines how likely each variation texture is to be picked.
  example: []
  syntax:
    content: public readonly Func<Point, float> RegionWeights
    return:
      type: System.Func{Microsoft.Xna.Framework.Point,System.Single}
    content.vb: Public ReadOnly RegionWeights As Func(Of Point, Single)
- uid: TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},System.Collections.Generic.Dictionary{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},TinyLife.Utilities.ColorSettings,System.Int32[],System.Boolean,System.Single,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{Microsoft.Xna.Framework.Point,System.Single})
  commentId: M:TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},System.Collections.Generic.Dictionary{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},TinyLife.Utilities.ColorSettings,System.Int32[],System.Boolean,System.Single,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{Microsoft.Xna.Framework.Point,System.Single})
  id: '#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},System.Collections.Generic.Dictionary{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},TinyLife.Utilities.ColorSettings,System.Int32[],System.Boolean,System.Single,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{Microsoft.Xna.Framework.Point,System.Single})'
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Tile(string, string, int, Dictionary<Point, TextureRegion>, Dictionary<Direction2, Point[]>, ColorSettings, int[], bool, float, Category, TextureRegion, Func<Point, float>)
  nameWithType: Tile.Tile(string, string, int, Dictionary<Point, TextureRegion>, Dictionary<Direction2, Point[]>, ColorSettings, int[], bool, float, Tile.Category, TextureRegion, Func<Point, float>)
  fullName: TinyLife.World.Tile.Tile(string, string, int, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, System.Collections.Generic.Dictionary<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point[]>, TinyLife.Utilities.ColorSettings, int[], bool, float, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<Microsoft.Xna.Framework.Point, float>)
  type: Constructor
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Creates a new tile with the given settings.

    To create an instance of a custom tile class, use <xref href="TinyLife.World.Tile.Register(System.String%2cSystem.Int32%2cSystem.Collections.Generic.Dictionary%7bMicrosoft.Xna.Framework.Point%2cMLEM.Textures.TextureRegion%7d%2cMicrosoft.Xna.Framework.Point%2cTinyLife.Utilities.ColorScheme%2cSystem.Single%2cSystem.Boolean%2cTinyLife.World.Tile.Category%2cMLEM.Textures.TextureRegion%2cSystem.Func%7bMLEM.Maths.Direction2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Point%7d%7d%2cSystem.Nullable%7bSystem.Int32%7d%2cSystem.Func%7bMicrosoft.Xna.Framework.Point%2cSystem.Single%7d%2cSystem.Type)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected Tile(string baseName, string name, int price, Dictionary<Point, TextureRegion> textures, Dictionary<Direction2, Point[]> regions, ColorSettings colorSettings, int[] colors, bool canBuy, float pathCostModifier, Tile.Category categories, TextureRegion icon, Func<Point, float> regionWeights)
    parameters:
    - id: baseName
      type: System.String
    - id: name
      type: System.String
    - id: price
      type: System.Int32
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
    - id: regions
      type: System.Collections.Generic.Dictionary{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]}
    - id: colorSettings
      type: TinyLife.Utilities.ColorSettings
    - id: colors
      type: System.Int32[]
    - id: canBuy
      type: System.Boolean
    - id: pathCostModifier
      type: System.Single
    - id: categories
      type: TinyLife.World.Tile.Category
    - id: icon
      type: MLEM.Textures.TextureRegion
    - id: regionWeights
      type: System.Func{Microsoft.Xna.Framework.Point,System.Single}
    content.vb: Protected Sub New(baseName As String, name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), regions As Dictionary(Of Direction2, Point()), colorSettings As ColorSettings, colors As Integer(), canBuy As Boolean, pathCostModifier As Single, categories As Tile.Category, icon As TextureRegion, regionWeights As Func(Of Point, Single))
  overload: TinyLife.World.Tile.#ctor*
  nameWithType.vb: Tile.New(String, String, Integer, Dictionary(Of Point, TextureRegion), Dictionary(Of Direction2, Point()), ColorSettings, Integer(), Boolean, Single, Tile.Category, TextureRegion, Func(Of Point, Single))
  fullName.vb: TinyLife.World.Tile.New(String, String, Integer, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), System.Collections.Generic.Dictionary(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point()), TinyLife.Utilities.ColorSettings, Integer(), Boolean, Single, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of Microsoft.Xna.Framework.Point, Single))
  name.vb: New(String, String, Integer, Dictionary(Of Point, TextureRegion), Dictionary(Of Direction2, Point()), ColorSettings, Integer(), Boolean, Single, Category, TextureRegion, Func(Of Point, Single))
- uid: TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime,System.Object,TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile})
  commentId: M:TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime,System.Object,TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile})
  id: Draw(Microsoft.Xna.Framework.GameTime,System.Object,TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile})
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Draw(GameTime, object, Map, Point, int, Vector2, float, float, ICollection<Item>, bool, Func<Point, int, Tile>)
  nameWithType: Tile.Draw(GameTime, object, Map, Point, int, Vector2, float, float, ICollection<StaticSpriteBatch.Item>, bool, Func<Point, int, Tile>)
  fullName: TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime, object, TinyLife.World.Map, Microsoft.Xna.Framework.Point, int, Microsoft.Xna.Framework.Vector2, float, float, System.Collections.Generic.ICollection<MLEM.Graphics.StaticSpriteBatch.Item>, bool, System.Func<Microsoft.Xna.Framework.Point, int, TinyLife.World.Tile>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Draws this tile at the given position in the world using a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public virtual bool Draw(GameTime time, object batch, Map map, Point pos, int floor, Vector2 drawPos, float scale, float depthOffset, ICollection<StaticSpriteBatch.Item> items, bool hasStaticContext, Func<Point, int, Tile> getRelatedTileFunc = null)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's current time.
    - id: batch
      type: System.Object
      description: The sprite batch to use for drawing, which can either be a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: map
      type: TinyLife.World.Map
      description: The map that the tile is on.
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position that the tile is on.
    - id: floor
      type: System.Int32
      description: The floor that this tile is on.
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw at.
    - id: scale
      type: System.Single
      description: The scale to draw the tile with.
    - id: depthOffset
      type: System.Single
      description: A depth offset that can optionally be added to this tile's draw depth.
    - id: items
      type: System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item}
      description: The <xref href="MLEM.Graphics.StaticSpriteBatch.Item" data-throw-if-not-resolved="false"></xref> collection that added items can optionally be added to.
    - id: hasStaticContext
      type: System.Boolean
      description: Whether this tile also has a static context, that is, whether it will already be drawn using a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: getRelatedTileFunc
      type: System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}
      description: A function that can optionally be supplied to override the <xref href="TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> method when checking for neighboring tiles. This is useful for when tile placement in the world is mocked, for example.
    return:
      type: System.Boolean
      description: Whether this tile was fully drawn. If the <code class="paramref">batch</code> is a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref> and false is returned, this tile will be marked as an animated tile, causing it to draw every frame.
    content.vb: Public Overridable Function Draw(time As GameTime, batch As Object, map As Map, pos As Point, floor As Integer, drawPos As Vector2, scale As Single, depthOffset As Single, items As ICollection(Of StaticSpriteBatch.Item), hasStaticContext As Boolean, getRelatedTileFunc As Func(Of Point, Integer, Tile) = Nothing) As Boolean
  overload: TinyLife.World.Tile.Draw*
  nameWithType.vb: Tile.Draw(GameTime, Object, Map, Point, Integer, Vector2, Single, Single, ICollection(Of StaticSpriteBatch.Item), Boolean, Func(Of Point, Integer, Tile))
  fullName.vb: TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime, Object, TinyLife.World.Map, Microsoft.Xna.Framework.Point, Integer, Microsoft.Xna.Framework.Vector2, Single, Single, System.Collections.Generic.ICollection(Of MLEM.Graphics.StaticSpriteBatch.Item), Boolean, System.Func(Of Microsoft.Xna.Framework.Point, Integer, TinyLife.World.Tile))
  name.vb: Draw(GameTime, Object, Map, Point, Integer, Vector2, Single, Single, ICollection(Of Item), Boolean, Func(Of Point, Integer, Tile))
- uid: TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  commentId: M:TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  id: DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DrawUi(Element, GameTime, SpriteBatch, float)
  nameWithType: Tile.DrawUi(Element, GameTime, SpriteBatch, float)
  fullName: TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, float)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Draws this tile on the given ui element, in ui space
  example: []
  syntax:
    content: public virtual void DrawUi(Element e, GameTime time, SpriteBatch batch, float drawScale)
    parameters:
    - id: e
      type: MLEM.Ui.Elements.Element
      description: The element to draw on
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's current time.
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: drawScale
      type: System.Single
      description: The scale to draw the tile with.
    content.vb: Public Overridable Sub DrawUi(e As Element, time As GameTime, batch As SpriteBatch, drawScale As Single)
  overload: TinyLife.World.Tile.DrawUi*
  nameWithType.vb: Tile.DrawUi(Element, GameTime, SpriteBatch, Single)
  fullName.vb: TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Single)
  name.vb: DrawUi(Element, GameTime, SpriteBatch, Single)
- uid: TinyLife.World.Tile.GetPrice
  commentId: M:TinyLife.World.Tile.GetPrice
  id: GetPrice
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Tile.GetPrice()
  fullName: TinyLife.World.Tile.GetPrice()
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns the price for this tile, which is normally based on <xref href="TinyLife.World.Tile.Price" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual float GetPrice()
    return:
      type: System.Single
      description: The price for this tile.
    content.vb: Public Overridable Function GetPrice() As Single
  overload: TinyLife.World.Tile.GetPrice*
- uid: TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32)
  id: OnNeighborChanged(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: OnNeighborChanged(Map, Point, Point, int)
  nameWithType: Tile.OnNeighborChanged(Map, Point, Point, int)
  fullName: TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, int)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    A method that is called when a neighboring <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> on the <xref href="TinyLife.World.Map" data-throw-if-not-resolved="false"></xref> changes.

    This method does nothing by default, but is overriden by <xref href="TinyLife.World.AutoTile" data-throw-if-not-resolved="false"></xref> to notify neighboring tiles of changes.
  example: []
  syntax:
    content: public virtual void OnNeighborChanged(Map map, Point pos, Point neighbor, int floor)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that the tile is on.
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position that the tile is on.
    - id: neighbor
      type: Microsoft.Xna.Framework.Point
      description: The position of the tile that changed.
    - id: floor
      type: System.Int32
      description: The floor that this tile and the neighbor are on.
    content.vb: Public Overridable Sub OnNeighborChanged(map As Map, pos As Point, neighbor As Point, floor As Integer)
  overload: TinyLife.World.Tile.OnNeighborChanged*
  nameWithType.vb: Tile.OnNeighborChanged(Map, Point, Point, Integer)
  fullName.vb: TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, Integer)
  name.vb: OnNeighborChanged(Map, Point, Point, Integer)
- uid: TinyLife.World.Tile.GetAutoTileBorder(TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,TinyLife.World.Tile,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile})
  commentId: M:TinyLife.World.Tile.GetAutoTileBorder(TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,TinyLife.World.Tile,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile})
  id: GetAutoTileBorder(TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,TinyLife.World.Tile,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile})
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetAutoTileBorder(Map, Point, int, Point, Tile, int, int, Func<Point, int, Tile>)
  nameWithType: Tile.GetAutoTileBorder(Map, Point, int, Point, Tile, int, int, Func<Point, int, Tile>)
  fullName: TinyLife.World.Tile.GetAutoTileBorder(TinyLife.World.Map, Microsoft.Xna.Framework.Point, int, Microsoft.Xna.Framework.Point, TinyLife.World.Tile, int, int, System.Func<Microsoft.Xna.Framework.Point, int, TinyLife.World.Tile>)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Returns the texture that should be displayed as the border when a <xref href="TinyLife.World.AutoTile" data-throw-if-not-resolved="false"></xref> draws next to this tile.

    By default, this method returns values only for some basegame tiles.
  example: []
  syntax:
    content: public virtual (TextureRegion Texture, Color Color, float Priority)? GetAutoTileBorder(Map map, Point pos, int floor, Point neighbor, Tile neighborTile, int layer, int autoTileIndex, Func<Point, int, Tile> getRelatedTileFunc)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map.
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position of this tile.
    - id: floor
      type: System.Int32
      description: The floor that this tile is on.
    - id: neighbor
      type: Microsoft.Xna.Framework.Point
      description: The position of the neighbor tile querying the auto tile border on this tile.
    - id: neighborTile
      type: TinyLife.World.Tile
      description: The neighbor tile querying the auto tile border on this tile.
    - id: layer
      type: System.Int32
      description: The layer of the border being drawn. By default, tiles use layer 0 for regular borders, and layer 1 for special borders, like the little "cliff" that displays on water tiles.
    - id: autoTileIndex
      type: System.Int32
      description: The "offset" from the auto-tile's initial texture location that should be drawn. The value ranges from 0 to 15 and denotes the type of border (ie the corner) that is being drawn.
    - id: getRelatedTileFunc
      type: System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}
    return:
      type: System.Nullable{System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}}
      description: The texture, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to draw no auto-tile border.
    content.vb: Public Overridable Function GetAutoTileBorder(map As Map, pos As Point, floor As Integer, neighbor As Point, neighborTile As Tile, layer As Integer, autoTileIndex As Integer, getRelatedTileFunc As Func(Of Point, Integer, Tile)) As (Texture As TextureRegion, Color As Color, Priority As Single)?
  overload: TinyLife.World.Tile.GetAutoTileBorder*
  nameWithType.vb: Tile.GetAutoTileBorder(Map, Point, Integer, Point, Tile, Integer, Integer, Func(Of Point, Integer, Tile))
  fullName.vb: TinyLife.World.Tile.GetAutoTileBorder(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Integer, Microsoft.Xna.Framework.Point, TinyLife.World.Tile, Integer, Integer, System.Func(Of Microsoft.Xna.Framework.Point, Integer, TinyLife.World.Tile))
  name.vb: GetAutoTileBorder(Map, Point, Integer, Point, Tile, Integer, Integer, Func(Of Point, Integer, Tile))
- uid: TinyLife.World.Tile.GetVariationTexture(MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Tile.GetVariationTexture(MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point)
  id: GetVariationTexture(MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetVariationTexture(Direction2, Point)
  nameWithType: Tile.GetVariationTexture(Direction2, Point)
  fullName: TinyLife.World.Tile.GetVariationTexture(MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: >-
    Returns a random texture that should be displayed at the given position, based on the <xref href="TinyLife.World.Tile.Textures" data-throw-if-not-resolved="false"></xref> variations that this tile has.

    If a tile only has one variation texture, this method always returns that texture.
  example: []
  syntax:
    content: protected Point GetVariationTexture(Direction2 direction, Point pos)
    parameters:
    - id: direction
      type: MLEM.Maths.Direction2
      description: The camera rotation.
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position that the tile is at.
    return:
      type: Microsoft.Xna.Framework.Point
      description: The texture to display at the location.
    content.vb: Protected Function GetVariationTexture(direction As Direction2, pos As Point) As Point
  overload: TinyLife.World.Tile.GetVariationTexture*
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  id: Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Register(string, int, Dictionary<Point, TextureRegion>, Point, ColorScheme, float, bool, Category, TextureRegion, Func<Direction2, Point?>, int?, Func<Point, float>, Type)
  nameWithType: Tile.Register(string, int, Dictionary<Point, TextureRegion>, Point, ColorScheme, float, bool, Tile.Category, TextureRegion, Func<Direction2, Point?>, int?, Func<Point, float>, Type)
  fullName: TinyLife.World.Tile.Register(string, int, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme, float, bool, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point?>, int?, System.Func<Microsoft.Xna.Framework.Point, float>, System.Type)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Registers a new tile with the given settings.
  example: []
  syntax:
    content: public static Tile[] Register(string name, int price, Dictionary<Point, TextureRegion> textures, Point textureRegion, ColorScheme color, float pathCostModifier = 1, bool canBuy = true, Tile.Category categories = Category.None, TextureRegion icon = null, Func<Direction2, Point?> variations = null, int? defaultColor = null, Func<Point, float> regionWeights = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name that the tile should have.
    - id: price
      type: System.Int32
      description: The tile's price.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas to use.
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
      description: The texture region that this tile should use for rendering.
    - id: color
      type: TinyLife.Utilities.ColorScheme
      description: The color scheme that this tile should have.
    - id: pathCostModifier
      type: System.Single
      description: The path cost modifier, &gt;= 1, that this tile should have.
    - id: canBuy
      type: System.Boolean
      description: Whether or not the tile can be bought in the tile tool.
    - id: categories
      type: TinyLife.World.Tile.Category
      description: This tile's <xref href="TinyLife.World.Tile.Category" data-throw-if-not-resolved="false"></xref> flags.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object.
    - id: variations
      type: System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}}
      description: An optional set of variation textures that should be used based on the given camera rotation.
    - id: defaultColor
      type: System.Nullable{System.Int32}
      description: The color that this tile should display with in the tile tool by default.
    - id: regionWeights
      type: System.Func{Microsoft.Xna.Framework.Point,System.Single}
      description: An optional weight function that determines how likely each variation texture is to be picked.
    - id: constructedType
      type: System.Type
      description: The type that tiles should be constructed from, or null to construct <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> instances.
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared Function Register(name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, color As ColorScheme, pathCostModifier As Single = 1, canBuy As Boolean = True, categories As Tile.Category = Category.None, icon As TextureRegion = Nothing, variations As Func(Of Direction2, Point?) = Nothing, defaultColor As Integer? = Nothing, regionWeights As Func(Of Point, Single) = Nothing, constructedType As Type = Nothing) As Tile()
  overload: TinyLife.World.Tile.Register*
  nameWithType.vb: Tile.Register(String, Integer, Dictionary(Of Point, TextureRegion), Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Point?), Integer?, Func(Of Point, Single), Type)
  fullName.vb: TinyLife.World.Tile.Register(String, Integer, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme, Single, Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point?), Integer?, System.Func(Of Microsoft.Xna.Framework.Point, Single), System.Type)
  name.vb: Register(String, Integer, Dictionary(Of Point, TextureRegion), Point, ColorScheme, Single, Boolean, Category, TextureRegion, Func(Of Direction2, Point?), Integer?, Func(Of Point, Single), Type)
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Int32[],System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Int32[],System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  id: Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Int32[],System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Register(string, int, Dictionary<Point, TextureRegion>, Point, ColorScheme[], float, bool, Category, TextureRegion, Func<Direction2, Point?>, int[], Func<Point, float>, Type)
  nameWithType: Tile.Register(string, int, Dictionary<Point, TextureRegion>, Point, ColorScheme[], float, bool, Tile.Category, TextureRegion, Func<Direction2, Point?>, int[], Func<Point, float>, Type)
  fullName: TinyLife.World.Tile.Register(string, int, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme[], float, bool, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point?>, int[], System.Func<Microsoft.Xna.Framework.Point, float>, System.Type)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Registers a new tile with the given settings.
  example: []
  syntax:
    content: public static Tile[] Register(string name, int price, Dictionary<Point, TextureRegion> textures, Point textureRegion, ColorScheme[] colors, float pathCostModifier = 1, bool canBuy = true, Tile.Category categories = Category.None, TextureRegion icon = null, Func<Direction2, Point?> variations = null, int[] defaultColors = null, Func<Point, float> regionWeights = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name that the tile should have.
    - id: price
      type: System.Int32
      description: The tile's price.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas to use.
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
      description: The texture region that this tile should use for rendering.
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The color scheme that this tile should have.
    - id: pathCostModifier
      type: System.Single
      description: The path cost modifier, &gt;= 1, that this tile should have.
    - id: canBuy
      type: System.Boolean
      description: Whether or not the tile can be bought in the tile tool.
    - id: categories
      type: TinyLife.World.Tile.Category
      description: This tile's <xref href="TinyLife.World.Tile.Category" data-throw-if-not-resolved="false"></xref> flags.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object.
    - id: variations
      type: System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}}
      description: An optional set of variation textures that should be used based on the given camera rotation.
    - id: defaultColors
      type: System.Int32[]
      description: The colors that this tile should display with in the tile tool by default.
    - id: regionWeights
      type: System.Func{Microsoft.Xna.Framework.Point,System.Single}
      description: An optional weight function that determines how likely each variation texture is to be picked.
    - id: constructedType
      type: System.Type
      description: The type that tiles should be constructed from, or null to construct <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> instances.
    return:
      type: TinyLife.World.Tile[]
    content.vb: Public Shared Function Register(name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, colors As ColorScheme(), pathCostModifier As Single = 1, canBuy As Boolean = True, categories As Tile.Category = Category.None, icon As TextureRegion = Nothing, variations As Func(Of Direction2, Point?) = Nothing, defaultColors As Integer() = Nothing, regionWeights As Func(Of Point, Single) = Nothing, constructedType As Type = Nothing) As Tile()
  overload: TinyLife.World.Tile.Register*
  nameWithType.vb: Tile.Register(String, Integer, Dictionary(Of Point, TextureRegion), Point, ColorScheme(), Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Point?), Integer(), Func(Of Point, Single), Type)
  fullName.vb: TinyLife.World.Tile.Register(String, Integer, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme(), Single, Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point?), Integer(), System.Func(Of Microsoft.Xna.Framework.Point, Single), System.Type)
  name.vb: Register(String, Integer, Dictionary(Of Point, TextureRegion), Point, ColorScheme(), Single, Boolean, Category, TextureRegion, Func(Of Direction2, Point?), Integer(), Func(Of Point, Single), Type)
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},System.Int32[],System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},System.Int32[],System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  id: Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},System.Int32[],System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Register(string, int, Dictionary<Point, TextureRegion>, Point[], ColorScheme[], float, bool, Category, TextureRegion, Func<Direction2, Point[]>, int[], Func<Point, float>, Type)
  nameWithType: Tile.Register(string, int, Dictionary<Point, TextureRegion>, Point[], ColorScheme[], float, bool, Tile.Category, TextureRegion, Func<Direction2, Point[]>, int[], Func<Point, float>, Type)
  fullName: TinyLife.World.Tile.Register(string, int, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point[], TinyLife.Utilities.ColorScheme[], float, bool, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point[]>, int[], System.Func<Microsoft.Xna.Framework.Point, float>, System.Type)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Registers a new tile with the given settings.
  example: []
  syntax:
    content: public static Tile[] Register(string name, int price, Dictionary<Point, TextureRegion> textures, Point[] textureRegions, ColorScheme[] colors, float pathCostModifier = 1, bool canBuy = true, Tile.Category categories = Category.None, TextureRegion icon = null, Func<Direction2, Point[]> variations = null, int[] defaultColors = null, Func<Point, float> regionWeights = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name that the tile should have.
    - id: price
      type: System.Int32
      description: The tile's price.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas to use.
    - id: textureRegions
      type: Microsoft.Xna.Framework.Point[]
      description: The texture regions that this tile should use for rendering, from which a random value will be chosen for each tile.
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The color scheme that this tile should have.
    - id: pathCostModifier
      type: System.Single
      description: The path cost modifier, &gt;= 1, that this tile should have.
    - id: canBuy
      type: System.Boolean
      description: Whether or not the tile can be bought in the tile tool.
    - id: categories
      type: TinyLife.World.Tile.Category
      description: This tile's <xref href="TinyLife.World.Tile.Category" data-throw-if-not-resolved="false"></xref> flags.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object.
    - id: variations
      type: System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]}
      description: An optional set of variation textures that should be used based on the given camera rotation.
    - id: defaultColors
      type: System.Int32[]
      description: The default colors that will be passed to the <xref href="TinyLife.World.Tile.ColorSettings" data-throw-if-not-resolved="false"></xref><xref href="TinyLife.Utilities.ColorSettings.Defaults" data-throw-if-not-resolved="false"></xref>.
    - id: regionWeights
      type: System.Func{Microsoft.Xna.Framework.Point,System.Single}
      description: An optional weight function that determines how likely each variation texture is to be picked.
    - id: constructedType
      type: System.Type
      description: The type that tiles should be constructed from, or null to construct <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> instances.
    return:
      type: TinyLife.World.Tile[]
      description: The registered tiles.
    content.vb: Public Shared Function Register(name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), textureRegions As Point(), colors As ColorScheme(), pathCostModifier As Single = 1, canBuy As Boolean = True, categories As Tile.Category = Category.None, icon As TextureRegion = Nothing, variations As Func(Of Direction2, Point()) = Nothing, defaultColors As Integer() = Nothing, regionWeights As Func(Of Point, Single) = Nothing, constructedType As Type = Nothing) As Tile()
  overload: TinyLife.World.Tile.Register*
  nameWithType.vb: Tile.Register(String, Integer, Dictionary(Of Point, TextureRegion), Point(), ColorScheme(), Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Point()), Integer(), Func(Of Point, Single), Type)
  fullName.vb: TinyLife.World.Tile.Register(String, Integer, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point(), TinyLife.Utilities.ColorScheme(), Single, Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point()), Integer(), System.Func(Of Microsoft.Xna.Framework.Point, Single), System.Type)
  name.vb: Register(String, Integer, Dictionary(Of Point, TextureRegion), Point(), ColorScheme(), Single, Boolean, Category, TextureRegion, Func(Of Direction2, Point()), Integer(), Func(Of Point, Single), Type)
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorSettings,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorSettings,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  id: Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorSettings,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Register(string, int, Dictionary<Point, TextureRegion>, Point[], ColorSettings, float, bool, Category, TextureRegion, Func<Direction2, Point[]>, Func<Point, float>, Type)
  nameWithType: Tile.Register(string, int, Dictionary<Point, TextureRegion>, Point[], ColorSettings, float, bool, Tile.Category, TextureRegion, Func<Direction2, Point[]>, Func<Point, float>, Type)
  fullName: TinyLife.World.Tile.Register(string, int, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point[], TinyLife.Utilities.ColorSettings, float, bool, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point[]>, System.Func<Microsoft.Xna.Framework.Point, float>, System.Type)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Registers a new tile with the given settings.
  example: []
  syntax:
    content: public static Tile[] Register(string name, int price, Dictionary<Point, TextureRegion> textures, Point[] textureRegions, ColorSettings colors, float pathCostModifier = 1, bool canBuy = true, Tile.Category categories = Category.None, TextureRegion icon = null, Func<Direction2, Point[]> variations = null, Func<Point, float> regionWeights = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name that the tile should have.
    - id: price
      type: System.Int32
      description: The tile's price.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas to use.
    - id: textureRegions
      type: Microsoft.Xna.Framework.Point[]
      description: The texture regions that this tile should use for rendering, from which a random value will be chosen for each tile.
    - id: colors
      type: TinyLife.Utilities.ColorSettings
      description: The color scheme that this tile should have.
    - id: pathCostModifier
      type: System.Single
      description: The path cost modifier, &gt;= 1, that this tile should have.
    - id: canBuy
      type: System.Boolean
      description: Whether or not the tile can be bought in the tile tool.
    - id: categories
      type: TinyLife.World.Tile.Category
      description: This tile's <xref href="TinyLife.World.Tile.Category" data-throw-if-not-resolved="false"></xref> flags.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object.
    - id: variations
      type: System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]}
      description: An optional set of variation textures that should be used based on the given camera rotation.
    - id: regionWeights
      type: System.Func{Microsoft.Xna.Framework.Point,System.Single}
      description: An optional weight function that determines how likely each variation texture is to be picked.
    - id: constructedType
      type: System.Type
      description: The type that tiles should be constructed from, or null to construct <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> instances.
    return:
      type: TinyLife.World.Tile[]
      description: The registered tiles.
    content.vb: Public Shared Function Register(name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), textureRegions As Point(), colors As ColorSettings, pathCostModifier As Single = 1, canBuy As Boolean = True, categories As Tile.Category = Category.None, icon As TextureRegion = Nothing, variations As Func(Of Direction2, Point()) = Nothing, regionWeights As Func(Of Point, Single) = Nothing, constructedType As Type = Nothing) As Tile()
  overload: TinyLife.World.Tile.Register*
  nameWithType.vb: Tile.Register(String, Integer, Dictionary(Of Point, TextureRegion), Point(), ColorSettings, Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Point()), Func(Of Point, Single), Type)
  fullName.vb: TinyLife.World.Tile.Register(String, Integer, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point(), TinyLife.Utilities.ColorSettings, Single, Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point()), System.Func(Of Microsoft.Xna.Framework.Point, Single), System.Type)
  name.vb: Register(String, Integer, Dictionary(Of Point, TextureRegion), Point(), ColorSettings, Single, Boolean, Category, TextureRegion, Func(Of Direction2, Point()), Func(Of Point, Single), Type)
- uid: TinyLife.World.Tile.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)
  commentId: M:TinyLife.World.Tile.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)
  id: GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetDepth(Map, Vector2, float, float, bool)
  nameWithType: Tile.GetDepth(Map, Vector2, float, float, bool)
  fullName: TinyLife.World.Tile.GetDepth(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, float, float, bool)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Gets the depth that should be used for drawing a <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> at the given position
  example: []
  syntax:
    content: public static float GetDepth(Map map, Vector2 worldPos, float floor, float offset = 0, bool borderOffset = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to get depth on.
    - id: worldPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to get depth for, in tile coordinates
    - id: floor
      type: System.Single
      description: The floor to get depth for.
    - id: offset
      type: System.Single
      description: An offset added to the depth value
    - id: borderOffset
      type: System.Boolean
      description: Whether the map border offset should be applied to the camera rotation using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Maths.Direction2%7d)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Single
      description: The depth to pass to the draw call
    content.vb: Public Shared Function GetDepth(map As Map, worldPos As Vector2, floor As Single, offset As Single = 0, borderOffset As Boolean = True) As Single
  overload: TinyLife.World.Tile.GetDepth*
  nameWithType.vb: Tile.GetDepth(Map, Vector2, Single, Single, Boolean)
  fullName.vb: TinyLife.World.Tile.GetDepth(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Single, Single, Boolean)
  name.vb: GetDepth(Map, Vector2, Single, Single, Boolean)
- uid: TinyLife.World.Tile.GetVisualOffset(MLEM.Maths.Direction2,System.Int32,System.Int32)
  commentId: M:TinyLife.World.Tile.GetVisualOffset(MLEM.Maths.Direction2,System.Int32,System.Int32)
  id: GetVisualOffset(MLEM.Maths.Direction2,System.Int32,System.Int32)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetVisualOffset(Direction2, int, int)
  nameWithType: Tile.GetVisualOffset(Direction2, int, int)
  fullName: TinyLife.World.Tile.GetVisualOffset(MLEM.Maths.Direction2, int, int)
  type: Method
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: Returns the visual offset of the given <code class="paramref">x</code> and <code class="paramref">y</code> values, based on the given <code class="paramref">direction</code>, which is usually the game's <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected static Point GetVisualOffset(Direction2 direction, int x, int y)
    parameters:
    - id: direction
      type: MLEM.Maths.Direction2
      description: The rotation.
    - id: x
      type: System.Int32
      description: The x coordinate to offset.
    - id: y
      type: System.Int32
      description: The y coordinate to offset.
    return:
      type: Microsoft.Xna.Framework.Point
      description: The visual offset.
    content.vb: Protected Shared Function GetVisualOffset(direction As Direction2, x As Integer, y As Integer) As Point
  overload: TinyLife.World.Tile.GetVisualOffset*
  nameWithType.vb: Tile.GetVisualOffset(Direction2, Integer, Integer)
  fullName.vb: TinyLife.World.Tile.GetVisualOffset(MLEM.Maths.Direction2, Integer, Integer)
  name.vb: GetVisualOffset(Direction2, Integer, Integer)
references:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
  parent: TinyLife.World.Tile
  isExternal: true
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_Register_System_String_System_Int32_System_Collections_Generic_Dictionary_Microsoft_Xna_Framework_Point_MLEM_Textures_TextureRegion__Microsoft_Xna_Framework_Point_TinyLife_Utilities_ColorScheme_System_Single_System_Boolean_TinyLife_World_Tile_Category_MLEM_Textures_TextureRegion_System_Func_MLEM_Maths_Direction2_System_Nullable_Microsoft_Xna_Framework_Point___System_Nullable_System_Int32__System_Func_Microsoft_Xna_Framework_Point_System_Single__System_Type_
  name: Register(string, int, Dictionary<Point, TextureRegion>, Point, ColorScheme, float, bool, Category, TextureRegion, Func<Direction2, Point?>, int?, Func<Point, float>, Type)
  nameWithType: Tile.Register(string, int, Dictionary<Point, TextureRegion>, Point, ColorScheme, float, bool, Tile.Category, TextureRegion, Func<Direction2, Point?>, int?, Func<Point, float>, Type)
  fullName: TinyLife.World.Tile.Register(string, int, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme, float, bool, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point?>, int?, System.Func<Microsoft.Xna.Framework.Point, float>, System.Type)
  nameWithType.vb: Tile.Register(String, Integer, Dictionary(Of Point, TextureRegion), Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Point?), Integer?, Func(Of Point, Single), Type)
  fullName.vb: TinyLife.World.Tile.Register(String, Integer, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme, Single, Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point?), Integer?, System.Func(Of Microsoft.Xna.Framework.Point, Single), System.Type)
  name.vb: Register(String, Integer, Dictionary(Of Point, TextureRegion), Point, ColorScheme, Single, Boolean, Category, TextureRegion, Func(Of Direction2, Point?), Integer?, Func(Of Point, Single), Type)
  spec.csharp:
  - uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
    name: Register
    href: TinyLife.World.Tile.html#TinyLife_World_Tile_Register_System_String_System_Int32_System_Collections_Generic_Dictionary_Microsoft_Xna_Framework_Point_MLEM_Textures_TextureRegion__Microsoft_Xna_Framework_Point_TinyLife_Utilities_ColorScheme_System_Single_System_Boolean_TinyLife_World_Tile_Category_MLEM_Textures_TextureRegion_System_Func_MLEM_Maths_Direction2_System_Nullable_Microsoft_Xna_Framework_Point___System_Nullable_System_Int32__System_Func_Microsoft_Xna_Framework_Point_System_Single__System_Type_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    href: TinyLife.Utilities.ColorScheme.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile.Category
    name: Category
    href: TinyLife.World.Tile.Category.html
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '?'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Func{Microsoft.Xna.Framework.Point,System.Single},System.Type)
    name: Register
    href: TinyLife.World.Tile.html#TinyLife_World_Tile_Register_System_String_System_Int32_System_Collections_Generic_Dictionary_Microsoft_Xna_Framework_Point_MLEM_Textures_TextureRegion__Microsoft_Xna_Framework_Point_TinyLife_Utilities_ColorScheme_System_Single_System_Boolean_TinyLife_World_Tile_Category_MLEM_Textures_TextureRegion_System_Func_MLEM_Maths_Direction2_System_Nullable_Microsoft_Xna_Framework_Point___System_Nullable_System_Int32__System_Func_Microsoft_Xna_Framework_Point_System_Single__System_Type_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    href: TinyLife.Utilities.ColorScheme.html
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile.Category
    name: Category
    href: TinyLife.World.Tile.Category.html
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '?'
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.Tile.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<Tile>(Tile)
  nameWithType: Extensions.JsonCopy<Tile>(Tile)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Tile>(TinyLife.World.Tile)
  nameWithType.vb: Extensions.JsonCopy(Of Tile)(Tile)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Tile)(TinyLife.World.Tile)
  name.vb: JsonCopy(Of Tile)(Tile)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Tile)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Tile)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: )
  - name: (
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: )
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  href: TinyLife.World.Tile.html
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.Tile[]}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.Tile[]}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<string, Tile[]>
  nameWithType: ReadOnlyDictionary<string, Tile[]>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<string, TinyLife.World.Tile[]>
  nameWithType.vb: ReadOnlyDictionary(Of String, Tile())
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of String, TinyLife.World.Tile())
  name.vb: ReadOnlyDictionary(Of String, Tile())
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: (
  - name: )
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.World.Tile[]
  isExternal: true
  href: TinyLife.World.Tile.html
  name: Tile[]
  nameWithType: Tile[]
  fullName: TinyLife.World.Tile[]
  nameWithType.vb: Tile()
  fullName.vb: TinyLife.World.Tile()
  name.vb: Tile()
  spec.csharp:
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: (
  - name: )
- uid: TinyLife.World.Tile.Name
  commentId: F:TinyLife.World.Tile.Name
  parent: TinyLife.World.Tile
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_Name
  name: Name
  nameWithType: Tile.Name
  fullName: TinyLife.World.Tile.Name
- uid: TinyLife.World.Tile.Colors
  commentId: F:TinyLife.World.Tile.Colors
  parent: TinyLife.World.Tile
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_Colors
  name: Colors
  nameWithType: Tile.Colors
  fullName: TinyLife.World.Tile.Colors
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.World.Tile.BaseName
  commentId: F:TinyLife.World.Tile.BaseName
  parent: TinyLife.World.Tile
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_BaseName
  name: BaseName
  nameWithType: Tile.BaseName
  fullName: TinyLife.World.Tile.BaseName
- uid: TinyLife.Utilities.ColorSettings
  commentId: T:TinyLife.Utilities.ColorSettings
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.ColorSettings.html
  name: ColorSettings
  nameWithType: ColorSettings
  fullName: TinyLife.Utilities.ColorSettings
- uid: TinyLife.World.Tile.ColorSettings
  commentId: F:TinyLife.World.Tile.ColorSettings
  parent: TinyLife.World.Tile
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_ColorSettings
  name: ColorSettings
  nameWithType: Tile.ColorSettings
  fullName: TinyLife.World.Tile.ColorSettings
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.World.Tile.Category
  commentId: T:TinyLife.World.Tile.Category
  parent: TinyLife.World
  href: TinyLife.World.Tile.html
  name: Tile.Category
  nameWithType: Tile.Category
  fullName: TinyLife.World.Tile.Category
  spec.csharp:
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: .
  - uid: TinyLife.World.Tile.Category
    name: Category
    href: TinyLife.World.Tile.Category.html
  spec.vb:
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: .
  - uid: TinyLife.World.Tile.Category
    name: Category
    href: TinyLife.World.Tile.Category.html
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
  commentId: T:System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<Point, TextureRegion>
  nameWithType: Dictionary<Point, TextureRegion>
  fullName: System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>
  nameWithType.vb: Dictionary(Of Point, TextureRegion)
  fullName.vb: System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion)
  name.vb: Dictionary(Of Point, TextureRegion)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.World.Tile.Textures
  commentId: F:TinyLife.World.Tile.Textures
  parent: TinyLife.World.Tile
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_Textures
  name: Textures
  nameWithType: Tile.Textures
  fullName: TinyLife.World.Tile.Textures
- uid: System.Collections.Generic.Dictionary{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]}
  commentId: T:System.Collections.Generic.Dictionary{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<Direction2, Point[]>
  nameWithType: Dictionary<Direction2, Point[]>
  fullName: System.Collections.Generic.Dictionary<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point[]>
  nameWithType.vb: Dictionary(Of Direction2, Point())
  fullName.vb: System.Collections.Generic.Dictionary(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point())
  name.vb: Dictionary(Of Direction2, Point())
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: System.Func{Microsoft.Xna.Framework.Point,System.Single}
  commentId: T:System.Func{Microsoft.Xna.Framework.Point,System.Single}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Point, float>
  nameWithType: Func<Point, float>
  fullName: System.Func<Microsoft.Xna.Framework.Point, float>
  nameWithType.vb: Func(Of Point, Single)
  fullName.vb: System.Func(Of Microsoft.Xna.Framework.Point, Single)
  name.vb: Func(Of Point, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.Tile.#ctor*
  commentId: Overload:TinyLife.World.Tile.#ctor
  href: TinyLife.World.Tile.html#TinyLife_World_Tile__ctor_System_String_System_String_System_Int32_System_Collections_Generic_Dictionary_Microsoft_Xna_Framework_Point_MLEM_Textures_TextureRegion__System_Collections_Generic_Dictionary_MLEM_Maths_Direction2_Microsoft_Xna_Framework_Point____TinyLife_Utilities_ColorSettings_System_Int32___System_Boolean_System_Single_TinyLife_World_Tile_Category_MLEM_Textures_TextureRegion_System_Func_Microsoft_Xna_Framework_Point_System_Single__
  name: Tile
  nameWithType: Tile.Tile
  fullName: TinyLife.World.Tile.Tile
  nameWithType.vb: Tile.New
  fullName.vb: TinyLife.World.Tile.New
  name.vb: New
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: MLEM.Graphics.StaticSpriteBatch
  commentId: T:MLEM.Graphics.StaticSpriteBatch
  isExternal: true
  name: StaticSpriteBatch
  nameWithType: StaticSpriteBatch
  fullName: MLEM.Graphics.StaticSpriteBatch
- uid: MLEM.Graphics.StaticSpriteBatch.Item
  commentId: T:MLEM.Graphics.StaticSpriteBatch.Item
  isExternal: true
  name: StaticSpriteBatch.Item
  nameWithType: StaticSpriteBatch.Item
  fullName: MLEM.Graphics.StaticSpriteBatch.Item
  spec.csharp:
  - uid: MLEM.Graphics.StaticSpriteBatch
    name: StaticSpriteBatch
    isExternal: true
  - name: .
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  spec.vb:
  - uid: MLEM.Graphics.StaticSpriteBatch
    name: StaticSpriteBatch
    isExternal: true
  - name: .
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
- uid: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point,System.Int32)
  isExternal: true
  href: TinyLife.World.Map.html#TinyLife_World_Map_GetTile_Microsoft_Xna_Framework_Point_System_Int32_
  name: GetTile(Point, int)
  nameWithType: Map.GetTile(Point, int)
  fullName: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point, int)
  nameWithType.vb: Map.GetTile(Point, Integer)
  fullName.vb: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetTile(Point, Integer)
  spec.csharp:
  - uid: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point,System.Int32)
    name: GetTile
    href: TinyLife.World.Map.html#TinyLife_World_Map_GetTile_Microsoft_Xna_Framework_Point_System_Int32_
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point,System.Int32)
    name: GetTile
    href: TinyLife.World.Map.html#TinyLife_World_Map_GetTile_Microsoft_Xna_Framework_Point_System_Int32_
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TinyLife.World.Tile.Draw*
  commentId: Overload:TinyLife.World.Tile.Draw
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_Draw_Microsoft_Xna_Framework_GameTime_System_Object_TinyLife_World_Map_Microsoft_Xna_Framework_Point_System_Int32_Microsoft_Xna_Framework_Vector2_System_Single_System_Single_System_Collections_Generic_ICollection_MLEM_Graphics_StaticSpriteBatch_Item__System_Boolean_System_Func_Microsoft_Xna_Framework_Point_System_Int32_TinyLife_World_Tile__
  name: Draw
  nameWithType: Tile.Draw
  fullName: TinyLife.World.Tile.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item}
  commentId: T:System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<StaticSpriteBatch.Item>
  nameWithType: ICollection<StaticSpriteBatch.Item>
  fullName: System.Collections.Generic.ICollection<MLEM.Graphics.StaticSpriteBatch.Item>
  nameWithType.vb: ICollection(Of StaticSpriteBatch.Item)
  fullName.vb: System.Collections.Generic.ICollection(Of MLEM.Graphics.StaticSpriteBatch.Item)
  name.vb: ICollection(Of StaticSpriteBatch.Item)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch
    name: StaticSpriteBatch
    isExternal: true
  - name: .
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch
    name: StaticSpriteBatch
    isExternal: true
  - name: .
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
- uid: System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}
  commentId: T:System.Func{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<Point, int, Tile>
  nameWithType: Func<Point, int, Tile>
  fullName: System.Func<Microsoft.Xna.Framework.Point, int, TinyLife.World.Tile>
  nameWithType.vb: Func(Of Point, Integer, Tile)
  fullName.vb: System.Func(Of Microsoft.Xna.Framework.Point, Integer, TinyLife.World.Tile)
  name.vb: Func(Of Point, Integer, Tile)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
    href: TinyLife.World.Tile.html
  - name: )
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.Tile.DrawUi*
  commentId: Overload:TinyLife.World.Tile.DrawUi
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_DrawUi_MLEM_Ui_Elements_Element_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_System_Single_
  name: DrawUi
  nameWithType: Tile.DrawUi
  fullName: TinyLife.World.Tile.DrawUi
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.World.Tile.Price
  commentId: F:TinyLife.World.Tile.Price
  parent: TinyLife.World.Tile
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_Price
  name: Price
  nameWithType: Tile.Price
  fullName: TinyLife.World.Tile.Price
- uid: TinyLife.World.Tile.GetPrice*
  commentId: Overload:TinyLife.World.Tile.GetPrice
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_GetPrice
  name: GetPrice
  nameWithType: Tile.GetPrice
  fullName: TinyLife.World.Tile.GetPrice
- uid: TinyLife.World.AutoTile
  commentId: T:TinyLife.World.AutoTile
  parent: TinyLife.World
  href: TinyLife.World.AutoTile.html
  name: AutoTile
  nameWithType: AutoTile
  fullName: TinyLife.World.AutoTile
- uid: TinyLife.World.Tile.OnNeighborChanged*
  commentId: Overload:TinyLife.World.Tile.OnNeighborChanged
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_OnNeighborChanged_TinyLife_World_Map_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_System_Int32_
  name: OnNeighborChanged
  nameWithType: Tile.OnNeighborChanged
  fullName: TinyLife.World.Tile.OnNeighborChanged
- uid: TinyLife.World.Tile.GetAutoTileBorder*
  commentId: Overload:TinyLife.World.Tile.GetAutoTileBorder
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_GetAutoTileBorder_TinyLife_World_Map_Microsoft_Xna_Framework_Point_System_Int32_Microsoft_Xna_Framework_Point_TinyLife_World_Tile_System_Int32_System_Int32_System_Func_Microsoft_Xna_Framework_Point_System_Int32_TinyLife_World_Tile__
  name: GetAutoTileBorder
  nameWithType: Tile.GetAutoTileBorder
  fullName: TinyLife.World.Tile.GetAutoTileBorder
- uid: System.Nullable{System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}}
  commentId: T:System.Nullable{System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mlem.textures.textureregion,microsoft.xna.framework.color,system.single-.texture
  name: (TextureRegion Texture, Color Color, float Priority)?
  nameWithType: (TextureRegion Texture, Color Color, float Priority)?
  fullName: (MLEM.Textures.TextureRegion Texture, Microsoft.Xna.Framework.Color Color, float Priority)?
  nameWithType.vb: (Texture As TextureRegion, Color As Color, Priority As Single)?
  fullName.vb: (Texture As MLEM.Textures.TextureRegion, Color As Microsoft.Xna.Framework.Color, Priority As Single)?
  name.vb: (Texture As TextureRegion, Color As Color, Priority As Single)?
  spec.csharp:
  - name: (
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}.Texture
    name: Texture
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mlem.textures.textureregion,microsoft.xna.framework.color,system.single-.texture
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}.Color
    name: Color
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mlem.textures.textureregion,microsoft.xna.framework.color,system.single-.color
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: " "
  - uid: System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}.Priority
    name: Priority
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mlem.textures.textureregion,microsoft.xna.framework.color,system.single-.priority
  - name: )
  - name: '?'
  spec.vb:
  - name: (
  - uid: System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}.Texture
    name: Texture
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mlem.textures.textureregion,microsoft.xna.framework.color,system.single-.texture
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}.Color
    name: Color
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mlem.textures.textureregion,microsoft.xna.framework.color,system.single-.color
  - name: " "
  - name: As
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single}.Priority
    name: Priority
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mlem.textures.textureregion,microsoft.xna.framework.color,system.single-.priority
  - name: " "
  - name: As
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.Tile.GetVariationTexture*
  commentId: Overload:TinyLife.World.Tile.GetVariationTexture
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_GetVariationTexture_MLEM_Maths_Direction2_Microsoft_Xna_Framework_Point_
  name: GetVariationTexture
  nameWithType: Tile.GetVariationTexture
  fullName: TinyLife.World.Tile.GetVariationTexture
- uid: MLEM.Maths.Direction2
  commentId: T:MLEM.Maths.Direction2
  parent: MLEM.Maths
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Maths.Direction2
- uid: MLEM.Maths
  commentId: N:MLEM.Maths
  isExternal: true
  name: MLEM.Maths
  nameWithType: MLEM.Maths
  fullName: MLEM.Maths
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Maths
    name: Maths
    isExternal: true
- uid: TinyLife.World.Tile.Register*
  commentId: Overload:TinyLife.World.Tile.Register
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_Register_System_String_System_Int32_System_Collections_Generic_Dictionary_Microsoft_Xna_Framework_Point_MLEM_Textures_TextureRegion__Microsoft_Xna_Framework_Point_TinyLife_Utilities_ColorScheme_System_Single_System_Boolean_TinyLife_World_Tile_Category_MLEM_Textures_TextureRegion_System_Func_MLEM_Maths_Direction2_System_Nullable_Microsoft_Xna_Framework_Point___System_Nullable_System_Int32__System_Func_Microsoft_Xna_Framework_Point_System_Single__System_Type_
  name: Register
  nameWithType: Tile.Register
  fullName: TinyLife.World.Tile.Register
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.ColorScheme.html
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}}
  commentId: T:System.Func{MLEM.Maths.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Direction2, Point?>
  nameWithType: Func<Direction2, Point?>
  fullName: System.Func<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point?>
  nameWithType.vb: Func(Of Direction2, Point?)
  fullName.vb: System.Func(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point?)
  name.vb: Func(Of Direction2, Point?)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  href: TinyLife.Utilities.ColorScheme.html
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    href: TinyLife.Utilities.ColorScheme.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    href: TinyLife.Utilities.ColorScheme.html
  - name: (
  - name: )
- uid: TinyLife.Utilities.ColorSettings.Defaults
  commentId: F:TinyLife.Utilities.ColorSettings.Defaults
  href: TinyLife.Utilities.ColorSettings.html#TinyLife_Utilities_ColorSettings_Defaults
  name: Defaults
  nameWithType: ColorSettings.Defaults
  fullName: TinyLife.Utilities.ColorSettings.Defaults
- uid: Microsoft.Xna.Framework.Point[]
  isExternal: true
  name: Point[]
  nameWithType: Point[]
  fullName: Microsoft.Xna.Framework.Point[]
  nameWithType.vb: Point()
  fullName.vb: Microsoft.Xna.Framework.Point()
  name.vb: Point()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: (
  - name: )
- uid: System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]}
  commentId: T:System.Func{MLEM.Maths.Direction2,Microsoft.Xna.Framework.Point[]}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Direction2, Point[]>
  nameWithType: Func<Direction2, Point[]>
  fullName: System.Func<MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point[]>
  nameWithType.vb: Func(Of Direction2, Point())
  fullName.vb: System.Func(Of MLEM.Maths.Direction2, Microsoft.Xna.Framework.Point())
  name.vb: Func(Of Direction2, Point())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Maths.Direction2})
  commentId: M:TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Maths.Direction2})
  isExternal: true
  href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyCameraRotation_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Nullable_MLEM_Maths_Direction2__
  name: ApplyCameraRotation(Vector2, bool, Direction2?)
  nameWithType: Map.ApplyCameraRotation(Vector2, bool, Direction2?)
  fullName: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, bool, MLEM.Maths.Direction2?)
  nameWithType.vb: Map.ApplyCameraRotation(Vector2, Boolean, Direction2?)
  fullName.vb: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, Boolean, MLEM.Maths.Direction2?)
  name.vb: ApplyCameraRotation(Vector2, Boolean, Direction2?)
  spec.csharp:
  - uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Maths.Direction2})
    name: ApplyCameraRotation
    href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyCameraRotation_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Nullable_MLEM_Maths_Direction2__
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Maths.Direction2})
    name: ApplyCameraRotation
    href: TinyLife.World.Map.html#TinyLife_World_Map_ApplyCameraRotation_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Nullable_MLEM_Maths_Direction2__
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: MLEM.Maths.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: )
- uid: TinyLife.World.Tile.GetDepth*
  commentId: Overload:TinyLife.World.Tile.GetDepth
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_GetDepth_TinyLife_World_Map_Microsoft_Xna_Framework_Vector2_System_Single_System_Single_System_Boolean_
  name: GetDepth
  nameWithType: Tile.GetDepth
  fullName: TinyLife.World.Tile.GetDepth
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  href: TinyLife.Options.html#TinyLife_Options_CameraRotation
  name: CameraRotation
  nameWithType: Options.CameraRotation
  fullName: TinyLife.Options.CameraRotation
- uid: TinyLife.World.Tile.GetVisualOffset*
  commentId: Overload:TinyLife.World.Tile.GetVisualOffset
  href: TinyLife.World.Tile.html#TinyLife_World_Tile_GetVisualOffset_MLEM_Maths_Direction2_System_Int32_System_Int32_
  name: GetVisualOffset
  nameWithType: Tile.GetVisualOffset
  fullName: TinyLife.World.Tile.GetVisualOffset
