### YamlMime:ManagedReference
items:
- uid: TinyLife.World.OpeningType
  commentId: T:TinyLife.World.OpeningType
  id: OpeningType
  parent: TinyLife.World
  children:
  - TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme,System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  - TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme[],System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  - TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorSettings,System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  - TinyLife.World.OpeningType.CanBuy
  - TinyLife.World.OpeningType.Colors
  - TinyLife.World.OpeningType.Construct(System.Int32[],TinyLife.Objects.WallLike)
  - TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Int32[],System.Nullable{Microsoft.Xna.Framework.Color},System.Single,Microsoft.Xna.Framework.Point)
  - TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,TinyLife.World.Map,System.Int32[],System.Single)
  - TinyLife.World.OpeningType.Icon
  - TinyLife.World.OpeningType.LightPour
  - TinyLife.World.OpeningType.Migrations
  - TinyLife.World.OpeningType.Name
  - TinyLife.World.OpeningType.Price
  - TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  - TinyLife.World.OpeningType.Types
  - TinyLife.World.OpeningType.WallMode
  langs:
  - csharp
  - vb
  name: OpeningType
  nameWithType: OpeningType
  fullName: TinyLife.World.OpeningType
  type: Class
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    An opening is some sort of extrusion in a <xref href="TinyLife.Objects.WallLike" data-throw-if-not-resolved="false"></xref>, like a window or a door.

    An opening type stores data that can be used to construct a <xref href="TinyLife.World.Opening" data-throw-if-not-resolved="false"></xref> instance.
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(MigratingStaticJsonConverter<OpeningType>), new object[] { typeof(OpeningType), "PrivateTypes", true })]

      public class OpeningType
    content.vb: >-
      <JsonConverter(GetType(MigratingStaticJsonConverter(Of OpeningType)), New Object() { GetType(OpeningType), "PrivateTypes", True })>

      Public Class OpeningType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.OpeningType.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.OpeningType.Types
  commentId: F:TinyLife.World.OpeningType.Types
  id: Types
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: OpeningType.Types
  fullName: TinyLife.World.OpeningType.Types
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    A registry for all <xref href="TinyLife.World.OpeningType" data-throw-if-not-resolved="false"></xref> instances from the game and mods.

    Use <xref href="TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)" data-throw-if-not-resolved="false"></xref> to register custom opening types.
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, OpeningType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.OpeningType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, OpeningType)
- uid: TinyLife.World.OpeningType.Name
  commentId: F:TinyLife.World.OpeningType.Name
  id: Name
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: OpeningType.Name
  fullName: TinyLife.World.OpeningType.Name
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The name of this opening type
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
- uid: TinyLife.World.OpeningType.WallMode
  commentId: F:TinyLife.World.OpeningType.WallMode
  id: WallMode
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: WallMode
  nameWithType: OpeningType.WallMode
  fullName: TinyLife.World.OpeningType.WallMode
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The <xref href="TinyLife.World.OpeningType.WallMode" data-throw-if-not-resolved="false"></xref> that <xref href="TinyLife.World.Wall" data-throw-if-not-resolved="false"></xref> instances with this opening in it should use for rendering
  example: []
  syntax:
    content: public readonly WallMode WallMode
    return:
      type: TinyLife.World.WallMode
    content.vb: Public ReadOnly WallMode As WallMode
- uid: TinyLife.World.OpeningType.Price
  commentId: F:TinyLife.World.OpeningType.Price
  id: Price
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: OpeningType.Price
  fullName: TinyLife.World.OpeningType.Price
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The price of this opening
  example: []
  syntax:
    content: public readonly int Price
    return:
      type: System.Int32
    content.vb: Public ReadOnly Price As Integer
- uid: TinyLife.World.OpeningType.Colors
  commentId: F:TinyLife.World.OpeningType.Colors
  id: Colors
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: OpeningType.Colors
  fullName: TinyLife.World.OpeningType.Colors
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The color settings that this opening uses.
  example: []
  syntax:
    content: public readonly ColorSettings Colors
    return:
      type: TinyLife.Utilities.ColorSettings
    content.vb: Public ReadOnly Colors As ColorSettings
- uid: TinyLife.World.OpeningType.LightPour
  commentId: F:TinyLife.World.OpeningType.LightPour
  id: LightPour
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: LightPour
  nameWithType: OpeningType.LightPour
  fullName: TinyLife.World.OpeningType.LightPour
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: A value between 0 and 1 that determines how much light, pours into a <xref href="TinyLife.World.Room" data-throw-if-not-resolved="false"></xref> through an opening of this type, where 1 implies that the wall is almost entirely open when this opening type is applied, and 0 implies that the opening has almost no transparency to it.
  example: []
  syntax:
    content: public readonly float LightPour
    return:
      type: System.Single
    content.vb: Public ReadOnly LightPour As Single
- uid: TinyLife.World.OpeningType.Icon
  commentId: F:TinyLife.World.OpeningType.Icon
  id: Icon
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: OpeningType.Icon
  fullName: TinyLife.World.OpeningType.Icon
  type: Field
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: >-
    The build mode icon for this object, which represents the category / theme / mod that it comes from.

    If this value is nonnull, the icon will be displayed in the corner of the build mode button for this object.
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
- uid: TinyLife.World.OpeningType.CanBuy
  commentId: P:TinyLife.World.OpeningType.CanBuy
  id: CanBuy
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: CanBuy
  nameWithType: OpeningType.CanBuy
  fullName: TinyLife.World.OpeningType.CanBuy
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: A field that indicates whether this opening type can be bought without the "ShowNonBuyable" cheat enabled
  example: []
  syntax:
    content: public bool CanBuy { get; init; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CanBuy As Boolean
  overload: TinyLife.World.OpeningType.CanBuy*
- uid: TinyLife.World.OpeningType.Migrations
  commentId: P:TinyLife.World.OpeningType.Migrations
  id: Migrations
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Migrations
  nameWithType: OpeningType.Migrations
  fullName: TinyLife.World.OpeningType.Migrations
  type: Property
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: The set of migrations that should be applied to instances of this opening type when they are loaded from disk.
  example: []
  syntax:
    content: public List<Migration<Opening>> Migrations { get; init; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.Opening}}
    content.vb: Public Property Migrations As List(Of Migration(Of Opening))
  overload: TinyLife.World.OpeningType.Migrations*
- uid: TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme,System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme,System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  id: '#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme,System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)'
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: OpeningType(string, Dictionary<Point, TextureRegion>, Point, WallMode, int, ColorScheme, float, Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  nameWithType: OpeningType.OpeningType(string, Dictionary<Point, TextureRegion>, Point, WallMode, int, ColorScheme, float, Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  fullName: TinyLife.World.OpeningType.OpeningType(string, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.World.WallMode, int, TinyLife.Utilities.ColorScheme, float, System.Func<TinyLife.World.OpeningType, int[], TinyLife.Objects.WallLike, TinyLife.World.Opening>, MLEM.Textures.TextureRegion)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new opening type with the given settings.
  example: []
  syntax:
    content: public OpeningType(string name, Dictionary<Point, TextureRegion> textures, Point textureRegion, WallMode wallMode, int price, ColorScheme color, float lightPour, Func<OpeningType, int[], WallLike, Opening> construct = null, TextureRegion icon = null)
    parameters:
    - id: name
      type: System.String
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
    - id: wallMode
      type: TinyLife.World.WallMode
    - id: price
      type: System.Int32
    - id: color
      type: TinyLife.Utilities.ColorScheme
    - id: lightPour
      type: System.Single
    - id: construct
      type: System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
    - id: icon
      type: MLEM.Textures.TextureRegion
    content.vb: Public Sub New(name As String, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, wallMode As WallMode, price As Integer, color As ColorScheme, lightPour As Single, construct As Func(Of OpeningType, Integer(), WallLike, Opening) = Nothing, icon As TextureRegion = Nothing)
  overload: TinyLife.World.OpeningType.#ctor*
  nameWithType.vb: OpeningType.New(String, Dictionary(Of Point, TextureRegion), Point, WallMode, Integer, ColorScheme, Single, Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
  fullName.vb: TinyLife.World.OpeningType.New(String, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.World.WallMode, Integer, TinyLife.Utilities.ColorScheme, Single, System.Func(Of TinyLife.World.OpeningType, Integer(), TinyLife.Objects.WallLike, TinyLife.World.Opening), MLEM.Textures.TextureRegion)
  name.vb: New(String, Dictionary(Of Point, TextureRegion), Point, WallMode, Integer, ColorScheme, Single, Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
- uid: TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme[],System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme[],System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  id: '#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme[],System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)'
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: OpeningType(string, Dictionary<Point, TextureRegion>, Point, WallMode, int, ColorScheme[], float, Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  nameWithType: OpeningType.OpeningType(string, Dictionary<Point, TextureRegion>, Point, WallMode, int, ColorScheme[], float, Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  fullName: TinyLife.World.OpeningType.OpeningType(string, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.World.WallMode, int, TinyLife.Utilities.ColorScheme[], float, System.Func<TinyLife.World.OpeningType, int[], TinyLife.Objects.WallLike, TinyLife.World.Opening>, MLEM.Textures.TextureRegion)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new opening type with the given settings.
  example: []
  syntax:
    content: public OpeningType(string name, Dictionary<Point, TextureRegion> textures, Point textureRegion, WallMode wallMode, int price, ColorScheme[] colors, float lightPour, Func<OpeningType, int[], WallLike, Opening> construct = null, TextureRegion icon = null)
    parameters:
    - id: name
      type: System.String
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
    - id: wallMode
      type: TinyLife.World.WallMode
    - id: price
      type: System.Int32
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
    - id: lightPour
      type: System.Single
    - id: construct
      type: System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
    - id: icon
      type: MLEM.Textures.TextureRegion
    content.vb: Public Sub New(name As String, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, wallMode As WallMode, price As Integer, colors As ColorScheme(), lightPour As Single, construct As Func(Of OpeningType, Integer(), WallLike, Opening) = Nothing, icon As TextureRegion = Nothing)
  overload: TinyLife.World.OpeningType.#ctor*
  nameWithType.vb: OpeningType.New(String, Dictionary(Of Point, TextureRegion), Point, WallMode, Integer, ColorScheme(), Single, Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
  fullName.vb: TinyLife.World.OpeningType.New(String, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.World.WallMode, Integer, TinyLife.Utilities.ColorScheme(), Single, System.Func(Of TinyLife.World.OpeningType, Integer(), TinyLife.Objects.WallLike, TinyLife.World.Opening), MLEM.Textures.TextureRegion)
  name.vb: New(String, Dictionary(Of Point, TextureRegion), Point, WallMode, Integer, ColorScheme(), Single, Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
- uid: TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorSettings,System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.World.OpeningType.#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorSettings,System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  id: '#ctor(System.String,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorSettings,System.Single,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)'
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: OpeningType(string, Dictionary<Point, TextureRegion>, Point, WallMode, int, ColorSettings, float, Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  nameWithType: OpeningType.OpeningType(string, Dictionary<Point, TextureRegion>, Point, WallMode, int, ColorSettings, float, Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  fullName: TinyLife.World.OpeningType.OpeningType(string, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.World.WallMode, int, TinyLife.Utilities.ColorSettings, float, System.Func<TinyLife.World.OpeningType, int[], TinyLife.Objects.WallLike, TinyLife.World.Opening>, MLEM.Textures.TextureRegion)
  type: Constructor
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Creates a new opening type with the given settings
  example: []
  syntax:
    content: public OpeningType(string name, Dictionary<Point, TextureRegion> textures, Point textureRegion, WallMode wallMode, int price, ColorSettings colors, float lightPour, Func<OpeningType, int[], WallLike, Opening> construct = null, TextureRegion icon = null)
    parameters:
    - id: name
      type: System.String
      description: The name
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas to use for rendering
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
      description: The texture region to use for rendering
    - id: wallMode
      type: TinyLife.World.WallMode
      description: The wall mode
    - id: price
      type: System.Int32
      description: The price
    - id: colors
      type: TinyLife.Utilities.ColorSettings
      description: The color schemes for this opening
    - id: lightPour
      type: System.Single
      description: A value between 0 and 1 that determines how much light, pours into a <xref href="TinyLife.World.Room" data-throw-if-not-resolved="false"></xref> through an opening of this type, where 1 implies that the wall is almost entirely open when this opening type is applied, and 0 implies that the opening has almost no transparency to it.
    - id: construct
      type: System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
      description: The function that is used for constructing an <xref href="TinyLife.World.Opening" data-throw-if-not-resolved="false"></xref> from this opening type
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object
    content.vb: Public Sub New(name As String, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, wallMode As WallMode, price As Integer, colors As ColorSettings, lightPour As Single, construct As Func(Of OpeningType, Integer(), WallLike, Opening) = Nothing, icon As TextureRegion = Nothing)
  overload: TinyLife.World.OpeningType.#ctor*
  nameWithType.vb: OpeningType.New(String, Dictionary(Of Point, TextureRegion), Point, WallMode, Integer, ColorSettings, Single, Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
  fullName.vb: TinyLife.World.OpeningType.New(String, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.World.WallMode, Integer, TinyLife.Utilities.ColorSettings, Single, System.Func(Of TinyLife.World.OpeningType, Integer(), TinyLife.Objects.WallLike, TinyLife.World.Opening), MLEM.Textures.TextureRegion)
  name.vb: New(String, Dictionary(Of Point, TextureRegion), Point, WallMode, Integer, ColorSettings, Single, Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
- uid: TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Int32[],System.Nullable{Microsoft.Xna.Framework.Color},System.Single,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Int32[],System.Nullable{Microsoft.Xna.Framework.Color},System.Single,Microsoft.Xna.Framework.Point)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Int32[],System.Nullable{Microsoft.Xna.Framework.Color},System.Single,Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Map, Point, Point, int, Vector2, bool, float, int[], Color?, float, Point)
  nameWithType: OpeningType.Draw(GameTime, SpriteBatch, Map, Point, Point, int, Vector2, bool, float, int[], Color?, float, Point)
  fullName: TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, int, Microsoft.Xna.Framework.Vector2, bool, float, int[], Microsoft.Xna.Framework.Color?, float, Microsoft.Xna.Framework.Point)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Draws this opening in a wall
  example: []
  syntax:
    content: public void Draw(GameTime time, SpriteBatch batch, Map map, Point pos1, Point pos2, int floor, Vector2 drawPos, bool vertical, float scale, int[] colors, Color? overrideColor, float depthOffset = 0, Point textureOffset = default)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to render with
    - id: map
      type: TinyLife.World.Map
      description: The map.
    - id: pos1
      type: Microsoft.Xna.Framework.Point
      description: The first position in the <xref href="TinyLife.Objects.WallLike.Positions" data-throw-if-not-resolved="false"></xref> array.
    - id: pos2
      type: Microsoft.Xna.Framework.Point
      description: The second position in the <xref href="TinyLife.Objects.WallLike.Positions" data-throw-if-not-resolved="false"></xref> array.
    - id: floor
      type: System.Int32
      description: The floor.
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw at
    - id: vertical
      type: System.Boolean
      description: Whether the underlying wall is vertical
    - id: scale
      type: System.Single
      description: The scale to render with
    - id: colors
      type: System.Int32[]
      description: The color indices that should be used for rendering
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that this object should be rendered with, instead of its default color
    - id: depthOffset
      type: System.Single
      description: An offset that is optionally added to the draw depth.
    - id: textureOffset
      type: Microsoft.Xna.Framework.Point
      description: An offset that should be applied to the texture region. This value is multiplied with the texture region's size.
    content.vb: Public Sub Draw(time As GameTime, batch As SpriteBatch, map As Map, pos1 As Point, pos2 As Point, floor As Integer, drawPos As Vector2, vertical As Boolean, scale As Single, colors As Integer(), overrideColor As Color?, depthOffset As Single = 0, textureOffset As Point = Nothing)
  overload: TinyLife.World.OpeningType.Draw*
  nameWithType.vb: OpeningType.Draw(GameTime, SpriteBatch, Map, Point, Point, Integer, Vector2, Boolean, Single, Integer(), Color?, Single, Point)
  fullName.vb: TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, Integer, Microsoft.Xna.Framework.Vector2, Boolean, Single, Integer(), Microsoft.Xna.Framework.Color?, Single, Microsoft.Xna.Framework.Point)
  name.vb: Draw(GameTime, SpriteBatch, Map, Point, Point, Integer, Vector2, Boolean, Single, Integer(), Color?, Single, Point)
- uid: TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,TinyLife.World.Map,System.Int32[],System.Single)
  commentId: M:TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,TinyLife.World.Map,System.Int32[],System.Single)
  id: DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,TinyLife.World.Map,System.Int32[],System.Single)
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: DrawUi(Element, SpriteBatch, GameTime, Map, int[], float)
  nameWithType: OpeningType.DrawUi(Element, SpriteBatch, GameTime, Map, int[], float)
  fullName: TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.GameTime, TinyLife.World.Map, int[], float)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Draws this opening in ui space rather than world space
  example: []
  syntax:
    content: public void DrawUi(Element e, SpriteBatch batch, GameTime time, Map map, int[] colors, float drawScale)
    parameters:
    - id: e
      type: MLEM.Ui.Elements.Element
      description: The ui element to draw this opening onto
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: map
      type: TinyLife.World.Map
      description: The map.
    - id: colors
      type: System.Int32[]
      description: The color indices to draw with
    - id: drawScale
      type: System.Single
      description: The scale to draw with. 0.3 by default.
    content.vb: Public Sub DrawUi(e As Element, batch As SpriteBatch, time As GameTime, map As Map, colors As Integer(), drawScale As Single)
  overload: TinyLife.World.OpeningType.DrawUi*
  nameWithType.vb: OpeningType.DrawUi(Element, SpriteBatch, GameTime, Map, Integer(), Single)
  fullName.vb: TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.GameTime, TinyLife.World.Map, Integer(), Single)
  name.vb: DrawUi(Element, SpriteBatch, GameTime, Map, Integer(), Single)
- uid: TinyLife.World.OpeningType.Construct(System.Int32[],TinyLife.Objects.WallLike)
  commentId: M:TinyLife.World.OpeningType.Construct(System.Int32[],TinyLife.Objects.WallLike)
  id: Construct(System.Int32[],TinyLife.Objects.WallLike)
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Construct(int[], WallLike)
  nameWithType: OpeningType.Construct(int[], WallLike)
  fullName: TinyLife.World.OpeningType.Construct(int[], TinyLife.Objects.WallLike)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Constructs a new <xref href="TinyLife.World.Opening" data-throw-if-not-resolved="false"></xref> instance from this opening type
  example: []
  syntax:
    content: public Opening Construct(int[] colors, WallLike wall)
    parameters:
    - id: colors
      type: System.Int32[]
      description: The color indices to use
    - id: wall
      type: TinyLife.Objects.WallLike
      description: The wall that this opening will be slotted into
    return:
      type: TinyLife.World.Opening
      description: A new opening instance based on this type
    content.vb: Public Function Construct(colors As Integer(), wall As WallLike) As Opening
  overload: TinyLife.World.OpeningType.Construct*
  nameWithType.vb: OpeningType.Construct(Integer(), WallLike)
  fullName.vb: TinyLife.World.OpeningType.Construct(Integer(), TinyLife.Objects.WallLike)
  name.vb: Construct(Integer(), WallLike)
- uid: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  commentId: M:TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  id: Register(TinyLife.World.OpeningType)
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Register(OpeningType)
  nameWithType: OpeningType.Register(OpeningType)
  fullName: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  type: Method
  assemblies:
  - TinyLife
  namespace: TinyLife.World
  summary: Registers the given <xref href="TinyLife.World.OpeningType" data-throw-if-not-resolved="false"></xref> to the <xref href="TinyLife.World.OpeningType.Types" data-throw-if-not-resolved="false"></xref> registry
  example: []
  syntax:
    content: public static OpeningType Register(OpeningType type)
    parameters:
    - id: type
      type: TinyLife.World.OpeningType
      description: The type to register
    return:
      type: TinyLife.World.OpeningType
      description: The passed <code class="paramref">type</code>, for chaining.
    content.vb: Public Shared Function Register(type As OpeningType) As OpeningType
  overload: TinyLife.World.OpeningType.Register*
references:
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  href: TinyLife.Objects.WallLike.html
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  href: TinyLife.World.Opening.html
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World
  commentId: N:TinyLife.World
  href: TinyLife.html
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.World
    name: World
    href: TinyLife.World.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.OpeningType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<OpeningType>(OpeningType)
  nameWithType: Extensions.JsonCopy<OpeningType>(OpeningType)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.OpeningType>(TinyLife.World.OpeningType)
  nameWithType.vb: Extensions.JsonCopy(Of OpeningType)(OpeningType)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.OpeningType)(TinyLife.World.OpeningType)
  name.vb: JsonCopy(Of OpeningType)(OpeningType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.OpeningType)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: '>'
  - name: (
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.OpeningType)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: )
  - name: (
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: TinyLife.World.OpeningType
  commentId: T:TinyLife.World.OpeningType
  parent: TinyLife.World
  href: TinyLife.World.OpeningType.html
  name: OpeningType
  nameWithType: OpeningType
  fullName: TinyLife.World.OpeningType
- uid: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  commentId: M:TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Register_TinyLife_World_OpeningType_
  name: Register(OpeningType)
  nameWithType: OpeningType.Register(OpeningType)
  fullName: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  spec.csharp:
  - uid: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
    name: Register
    href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Register_TinyLife_World_OpeningType_
  - name: (
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: )
  spec.vb:
  - uid: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
    name: Register
    href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Register_TinyLife_World_OpeningType_
  - name: (
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.OpeningType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.OpeningType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<string, OpeningType>
  nameWithType: ReadOnlyDictionary<string, OpeningType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<string, TinyLife.World.OpeningType>
  nameWithType.vb: ReadOnlyDictionary(Of String, OpeningType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of String, TinyLife.World.OpeningType)
  name.vb: ReadOnlyDictionary(Of String, OpeningType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.World.OpeningType.WallMode
  commentId: F:TinyLife.World.OpeningType.WallMode
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_WallMode
  name: WallMode
  nameWithType: OpeningType.WallMode
  fullName: TinyLife.World.OpeningType.WallMode
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  href: TinyLife.World.Wall.html
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.WallMode
  commentId: T:TinyLife.World.WallMode
  parent: TinyLife.World
  href: TinyLife.World.WallMode.html
  name: WallMode
  nameWithType: WallMode
  fullName: TinyLife.World.WallMode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Utilities.ColorSettings
  commentId: T:TinyLife.Utilities.ColorSettings
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.ColorSettings.html
  name: ColorSettings
  nameWithType: ColorSettings
  fullName: TinyLife.Utilities.ColorSettings
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  parent: TinyLife.World
  href: TinyLife.World.Room.html
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.World.OpeningType.CanBuy*
  commentId: Overload:TinyLife.World.OpeningType.CanBuy
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_CanBuy
  name: CanBuy
  nameWithType: OpeningType.CanBuy
  fullName: TinyLife.World.OpeningType.CanBuy
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.OpeningType.Migrations*
  commentId: Overload:TinyLife.World.OpeningType.Migrations
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Migrations
  name: Migrations
  nameWithType: OpeningType.Migrations
  fullName: TinyLife.World.OpeningType.Migrations
- uid: System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.Opening}}
  commentId: T:System.Collections.Generic.List{TinyLife.Utilities.Migration{TinyLife.World.Opening}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Migration<Opening>>
  nameWithType: List<Migration<Opening>>
  fullName: System.Collections.Generic.List<TinyLife.Utilities.Migration<TinyLife.World.Opening>>
  nameWithType.vb: List(Of Migration(Of Opening))
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Utilities.Migration(Of TinyLife.World.Opening))
  name.vb: List(Of Migration(Of Opening))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: <
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Utilities.Migration`1
    name: Migration
    href: TinyLife.Utilities.Migration-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: )
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.World.OpeningType.#ctor*
  commentId: Overload:TinyLife.World.OpeningType.#ctor
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType__ctor_System_String_System_Collections_Generic_Dictionary_Microsoft_Xna_Framework_Point_MLEM_Textures_TextureRegion__Microsoft_Xna_Framework_Point_TinyLife_World_WallMode_System_Int32_TinyLife_Utilities_ColorScheme_System_Single_System_Func_TinyLife_World_OpeningType_System_Int32___TinyLife_Objects_WallLike_TinyLife_World_Opening__MLEM_Textures_TextureRegion_
  name: OpeningType
  nameWithType: OpeningType.OpeningType
  fullName: TinyLife.World.OpeningType.OpeningType
  nameWithType.vb: OpeningType.New
  fullName.vb: TinyLife.World.OpeningType.New
  name.vb: New
- uid: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
  commentId: T:System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<Point, TextureRegion>
  nameWithType: Dictionary<Point, TextureRegion>
  fullName: System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>
  nameWithType.vb: Dictionary(Of Point, TextureRegion)
  fullName.vb: System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion)
  name.vb: Dictionary(Of Point, TextureRegion)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.ColorScheme.html
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
  commentId: T:System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<OpeningType, int[], WallLike, Opening>
  nameWithType: Func<OpeningType, int[], WallLike, Opening>
  fullName: System.Func<TinyLife.World.OpeningType, int[], TinyLife.Objects.WallLike, TinyLife.World.Opening>
  nameWithType.vb: Func(Of OpeningType, Integer(), WallLike, Opening)
  fullName.vb: System.Func(Of TinyLife.World.OpeningType, Integer(), TinyLife.Objects.WallLike, TinyLife.World.Opening)
  name.vb: Func(Of OpeningType, Integer(), WallLike, Opening)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.OpeningType
    name: OpeningType
    href: TinyLife.World.OpeningType.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
    href: TinyLife.Objects.WallLike.html
  - name: ','
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
    href: TinyLife.World.Opening.html
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  href: TinyLife.Utilities.ColorScheme.html
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    href: TinyLife.Utilities.ColorScheme.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    href: TinyLife.Utilities.ColorScheme.html
  - name: (
  - name: )
- uid: TinyLife.Objects.WallLike.Positions
  commentId: F:TinyLife.Objects.WallLike.Positions
  parent: TinyLife.Objects.WallLike
  href: TinyLife.Objects.WallLike.html#TinyLife_Objects_WallLike_Positions
  name: Positions
  nameWithType: WallLike.Positions
  fullName: TinyLife.Objects.WallLike.Positions
- uid: TinyLife.World.OpeningType.Draw*
  commentId: Overload:TinyLife.World.OpeningType.Draw
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Draw_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_TinyLife_World_Map_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Point_System_Int32_Microsoft_Xna_Framework_Vector2_System_Boolean_System_Single_System_Int32___System_Nullable_Microsoft_Xna_Framework_Color__System_Single_Microsoft_Xna_Framework_Point_
  name: Draw
  nameWithType: OpeningType.Draw
  fullName: TinyLife.World.OpeningType.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  href: TinyLife.World.Map.html
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.OpeningType.DrawUi*
  commentId: Overload:TinyLife.World.OpeningType.DrawUi
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_DrawUi_MLEM_Ui_Elements_Element_Microsoft_Xna_Framework_Graphics_SpriteBatch_Microsoft_Xna_Framework_GameTime_TinyLife_World_Map_System_Int32___System_Single_
  name: DrawUi
  nameWithType: OpeningType.DrawUi
  fullName: TinyLife.World.OpeningType.DrawUi
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.World.OpeningType.Construct*
  commentId: Overload:TinyLife.World.OpeningType.Construct
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Construct_System_Int32___TinyLife_Objects_WallLike_
  name: Construct
  nameWithType: OpeningType.Construct
  fullName: TinyLife.World.OpeningType.Construct
- uid: TinyLife.World.OpeningType.Types
  commentId: F:TinyLife.World.OpeningType.Types
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Types
  name: Types
  nameWithType: OpeningType.Types
  fullName: TinyLife.World.OpeningType.Types
- uid: TinyLife.World.OpeningType.Register*
  commentId: Overload:TinyLife.World.OpeningType.Register
  href: TinyLife.World.OpeningType.html#TinyLife_World_OpeningType_Register_TinyLife_World_OpeningType_
  name: Register
  nameWithType: OpeningType.Register
  fullName: TinyLife.World.OpeningType.Register
